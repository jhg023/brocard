#include <flint/nmod_poly.h>
#include <flint/ulong_extras.h>

static inline uint64_t ll_mod_preinv( uint64_t a_hi, uint64_t a_lo, uint64_t n, uint64_t ninv ) {
    uint64_t q0, q1, r;

    const int norm = __builtin_clzll( n );

    n <<= norm;
    a_hi <<= norm;

    const uint64_t u1 = a_hi + ( a_lo >> ( 64 - norm ) );
    const uint64_t u0 = ( a_lo << norm );

    umul_ppmm( q1, q0, ninv, u1 );
    add_ssaaaa( q1, q0, q1, q0, u1, u0 );

    r = ( u0 - ( q1 + 1 ) * n );

    if ( r > q0 ) {
        r += n;
    }

    if ( __builtin_expect( r < n, 1 ) ) {
        return r >> norm;
    }

    return ( r - n ) >> norm;
}

static inline uint64_t mulmod_preinv( uint64_t a, uint64_t b, uint64_t n, uint64_t ninv ) {
    uint64_t p1, p2;
    umul_ppmm( p1, p2, a, b );
    return ll_mod_preinv( p1, p2, n, ninv );
}

static inline uint64_t factorial_fast_mod2_preinv( uint64_t n, uint64_t p, uint64_t pinv ) {
    slong i, m;
    nmod_t mod;
    mp_ptr t, u, v;
    mp_limb_t r, s;

    nmod_init( &mod, p );

    m = n_sqrt( n );

    t = _nmod_vec_init( m + 1 );
    u = _nmod_vec_init( m + 1 );
    v = _nmod_vec_init( m + 1 );

    t[0] = UWORD( 0 );

    for ( i = 1; i < m; i++ ) {
        t[i] = n_submod( t[i - 1], UWORD( 1 ), p );
    }

    _nmod_poly_product_roots_nmod_vec( u, t, m, mod );

    for ( i = 0; i < m; i++ ) {
        t[i] = n_mod2_preinv( i * m + 1, p, pinv );
    }

    _nmod_poly_evaluate_nmod_vec_fast( v, u, m + 1, t, m, mod );

    r = 1;

    for ( i = 0; i < m; i++ ) {
        r = mulmod_preinv( r, v[i], mod.n, mod.ninv );
    }

    for ( s = m * m + 1; s <= n; s++ ) {
        r = mulmod_preinv( r, s, mod.n, mod.ninv );
    }

    _nmod_vec_clear( t );
    _nmod_vec_clear( u );
    _nmod_vec_clear( v );

    return r;
}

static inline uint64_t initialize_factorial( uint64_t n, uint64_t prime, uint64_t pinv ) {
    if ( n < ( prime >> 1 ) ) {
        return factorial_fast_mod2_preinv( n, prime, pinv );
    }

    uint64_t factorial = factorial_fast_mod2_preinv( prime - n - 1, prime, pinv );

    factorial = n_invmod( factorial, prime );

    if ( ( n & 1 ) == 0 ) {
        factorial = -factorial + prime;
    }

    return factorial % prime;
}

static inline int jacobi_unsigned( uint64_t x, uint64_t y ) {
    uint64_t b = x, a = y, temp;
    int s;

    int exp = __builtin_ctzll( b );
    b >>= exp;

    bool first = (( exp * ( a * a - 1 ) ) & 8) != 0;
    bool second = (( ( a - 1 ) * ( b - 1 ) ) & 4) != 0;

    if ( first != second ) {
        s = -1;
    } else {
        s = 1;
    }

    while ( b != 1 ) {
        if ( ( a >> 2 ) < b ) {
            temp = a - b;
            a = b;

            if ( temp < b ) {
                b = temp;
            } else if ( temp < ( b << 1 ) ) {
                b = temp - a;
            } else {
                b = temp - ( a << 1 );
            }
        } else {
            temp = a % b;
            a = b;
            b = temp;
        }

        if ( b == 0 ) {
            return 0;
        }

        exp = __builtin_ctzll( b );
        b >>= exp;

        first = (( exp * ( a * a - 1 ) ) & 8) != 0;
        second =  (( ( a - 1 ) * ( b - 1 ) ) & 4) != 0;

        if ( first != second ) {
            s = -s;
        }
    }

    return s;
}

void brocard_0( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 0ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 1ULL; n <= 31249999ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 31250017ULL, 1360285779832292455ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 31250017ULL, 1360285779832292455ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 31250017ULL, 1360285779832292455ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 31250017ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 31250039ULL, 1360271835700677838ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 31250039ULL, 1360271835700677838ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 31250039ULL, 1360271835700677838ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 31250039ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 31250047ULL, 1360266765112231194ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 31250047ULL, 1360266765112231194ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 31250047ULL, 1360266765112231194ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 31250047ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 31250057ULL, 1360260426880323706ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 31250057ULL, 1360260426880323706ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 31250057ULL, 1360260426880323706ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 31250057ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 31250113ULL, 1360224932856605039ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 31250113ULL, 1360224932856605039ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 31250113ULL, 1360224932856605039ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 31250113ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 31250129ULL, 1360214791730336246ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 31250129ULL, 1360214791730336246ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 31250129ULL, 1360214791730336246ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 31250129ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 31250137ULL, 1360209721171096025ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 31250137ULL, 1360209721171096025ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 31250137ULL, 1360209721171096025ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 31250137ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 31250143ULL, 1360205918253369560ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 31250143ULL, 1360205918253369560ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 31250143ULL, 1360205918253369560ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 31250143ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 31250147ULL, 1360203382975696534ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 31250147ULL, 1360203382975696534ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 31250147ULL, 1360203382975696534ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 31250147ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 31250161ULL, 1360194509508952040ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 31250161ULL, 1360194509508952040ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 31250161ULL, 1360194509508952040ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 31250161ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 31250171ULL, 1360188171323287962ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 31250171ULL, 1360188171323287962ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 31250171ULL, 1360188171323287962ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 31250171ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 31250179ULL, 1360183100777677319ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 31250179ULL, 1360183100777677319ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 31250179ULL, 1360183100777677319ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 31250179ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 31250189ULL, 1360176762599314786ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 31250189ULL, 1360176762599314786ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 31250189ULL, 1360176762599314786ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 31250189ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 31250203ULL, 1360167889156422005ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 31250203ULL, 1360167889156422005ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 31250203ULL, 1360167889156422005ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 31250203ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 31250227ULL, 1360152677558531571ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 31250227ULL, 1360152677558531571ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 31250227ULL, 1360152677558531571ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 31250227ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 31250243ULL, 1360142536506251744ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 31250243ULL, 1360142536506251744ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 31250243ULL, 1360142536506251744ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 31250243ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 31250249ULL, 1360138733614324025ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 31250249ULL, 1360138733614324025ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 31250249ULL, 1360138733614324025ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 31250249ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 31250251ULL, 1360137465984005963ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 31250251ULL, 1360137465984005963ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 31250251ULL, 1360137465984005963ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 31250251ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 31250273ULL, 1360123522061216128ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 31250273ULL, 1360123522061216128ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 31250273ULL, 1360123522061216128ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 31250273ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 31250279ULL, 1360119719176589894ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 31250279ULL, 1360119719176589894ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 31250279ULL, 1360119719176589894ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 31250279ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 31250281ULL, 1360118451548705660ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 31250281ULL, 1360118451548705660ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 31250281ULL, 1360118451548705660ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 31250281ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 31250287ULL, 1360114648666026485ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 31250287ULL, 1360114648666026485ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 31250287ULL, 1360114648666026485ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 31250287ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 31250299ULL, 1360107042905049013ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 31250299ULL, 1360107042905049013ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 31250299ULL, 1360107042905049013ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 31250299ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 31250327ULL, 1360089296152150549ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 31250327ULL, 1360089296152150549ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 31250327ULL, 1360089296152150549ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 31250327ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 31250333ULL, 1360085493280666934ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 31250333ULL, 1360085493280666934ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 31250333ULL, 1360085493280666934ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 31250333ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 31250339ULL, 1360081690410643606ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 31250339ULL, 1360081690410643606ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 31250339ULL, 1360081690410643606ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 31250339ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 31250381ULL, 1360055070361368269ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 31250381ULL, 1360055070361368269ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 31250381ULL, 1360055070361368269ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 31250381ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 31250411ULL, 1360036056084265734ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 31250411ULL, 1360036056084265734ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 31250411ULL, 1360036056084265734ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 31250411ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 31250423ULL, 1360028450383646656ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 31250423ULL, 1360028450383646656ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 31250423ULL, 1360028450383646656ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 31250423ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 31250431ULL, 1360023379919812326ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 31250431ULL, 1360023379919812326ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 31250431ULL, 1360023379919812326ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 31250431ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 31250447ULL, 1360013238999931785ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 31250447ULL, 1360013238999931785ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 31250447ULL, 1360013238999931785ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 31250447ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 31250467ULL, 1360000562864683817ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 31250467ULL, 1360000562864683817ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 31250467ULL, 1360000562864683817ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 31250467ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 31250521ULL, 1359966337380559088ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 31250521ULL, 1359966337380559088ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 31250521ULL, 1359966337380559088ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 31250521ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 31250561ULL, 1359940985246354405ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 31250561ULL, 1359940985246354405ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 31250561ULL, 1359940985246354405ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 31250561ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 31250563ULL, 1359939717641347804ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 31250563ULL, 1359939717641347804ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 31250563ULL, 1359939717641347804ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 31250563ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 31250617ULL, 1359905492367500157ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 31250617ULL, 1359905492367500157ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 31250617ULL, 1359905492367500157ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 31250617ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 31250623ULL, 1359901689566596109ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 31250623ULL, 1359901689566596109ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 31250623ULL, 1359901689566596109ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 31250623ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 31250663ULL, 1359876337597886483ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 31250663ULL, 1359876337597886483ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 31250663ULL, 1359876337597886483ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 31250663ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 31250669ULL, 1359872534808177634ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 31250669ULL, 1359872534808177634ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 31250669ULL, 1359872534808177634ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 31250669ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 31250671ULL, 1359871267211932516ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 31250671ULL, 1359871267211932516ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 31250671ULL, 1359871267211932516ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 31250671ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #1] Progress: %llu (0.00%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #1] Progress: %llu (0.00%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #1] Potential Solution: %llu, primes[0] = 31250017, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_1( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 31249999ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 31250000ULL; n <= 62499998ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 62500001ULL, 1360296237943887795ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 62500001ULL, 1360296237943887795ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 62500001ULL, 1360296237943887795ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 62500001ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 62500003ULL, 1360295604118628246ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 62500003ULL, 1360295604118628246ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 62500003ULL, 1360295604118628246ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 62500003ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 62500019ULL, 1360290533518012185ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 62500019ULL, 1360290533518012185ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 62500019ULL, 1360290533518012185ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 62500019ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 62500043ULL, 1360282927621955866ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 62500043ULL, 1360282927621955866ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 62500043ULL, 1360282927621955866ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 62500043ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 62500073ULL, 1360273420260099825ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 62500073ULL, 1360273420260099825ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 62500073ULL, 1360273420260099825ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 62500073ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 62500121ULL, 1360258208500114424ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 62500121ULL, 1360258208500114424ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 62500121ULL, 1360258208500114424ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 62500121ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 62500127ULL, 1360256307031759116ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 62500127ULL, 1360256307031759116ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 62500127ULL, 1360256307031759116ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 62500127ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 62500147ULL, 1360249968806544784ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 62500147ULL, 1360249968806544784ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 62500147ULL, 1360249968806544784ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 62500147ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 62500171ULL, 1360242362941642104ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 62500171ULL, 1360242362941642104ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 62500171ULL, 1360242362941642104ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 62500171ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 62500181ULL, 1360239193832989979ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 62500181ULL, 1360239193832989979ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 62500181ULL, 1360239193832989979ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 62500181ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 62500183ULL, 1360238560011381247ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 62500183ULL, 1360238560011381247ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 62500183ULL, 1360238560011381247ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 62500183ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 62500189ULL, 1360236658546798439ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 62500189ULL, 1360236658546798439ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 62500189ULL, 1360236658546798439ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 62500189ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 62500201ULL, 1360232855618728062ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 62500201ULL, 1360232855618728062ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 62500201ULL, 1360232855618728062ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 62500201ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 62500237ULL, 1360221446843278846ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 62500237ULL, 1360221446843278846ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 62500237ULL, 1360221446843278846ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 62500237ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 62500331ULL, 1360191657324901223ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 62500331ULL, 1360191657324901223ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 62500331ULL, 1360191657324901223ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 62500331ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 62500343ULL, 1360187854414111239ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 62500343ULL, 1360187854414111239ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 62500343ULL, 1360187854414111239ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 62500343ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 62500349ULL, 1360185952959263863ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 62500349ULL, 1360185952959263863ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 62500349ULL, 1360185952959263863ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 62500349ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 62500369ULL, 1360179614779075945ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 62500369ULL, 1360179614779075945ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 62500369ULL, 1360179614779075945ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 62500369ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 62500379ULL, 1360176445690503140ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 62500379ULL, 1360176445690503140ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 62500379ULL, 1360176445690503140ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 62500379ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 62500387ULL, 1360173910420375049ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 62500387ULL, 1360173910420375049ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 62500387ULL, 1360173910420375049ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 62500387ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 62500393ULL, 1360172008968204904ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 62500393ULL, 1360172008968204904ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 62500393ULL, 1360172008968204904ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 62500393ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 62500429ULL, 1360160600262850635ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 62500429ULL, 1360160600262850635ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 62500429ULL, 1360160600262850635ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 62500429ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 62500439ULL, 1360157431180362435ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 62500439ULL, 1360157431180362435ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 62500439ULL, 1360157431180362435ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 62500439ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 62500447ULL, 1360154895915102026ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 62500447ULL, 1360154895915102026ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 62500447ULL, 1360154895915102026ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 62500447ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 62500489ULL, 1360141585783132911ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 62500489ULL, 1360141585783132911ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 62500489ULL, 1360141585783132911ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 62500489ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 62500531ULL, 1360128275669052461ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 62500531ULL, 1360128275669052461ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 62500531ULL, 1360128275669052461ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 62500531ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 62500549ULL, 1360122571339922667ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 62500549ULL, 1360122571339922667ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 62500549ULL, 1360122571339922667ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 62500549ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 62500573ULL, 1360114965572860641ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 62500573ULL, 1360114965572860641ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 62500573ULL, 1360114965572860641ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 62500573ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 62500579ULL, 1360113064132007818ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 62500579ULL, 1360113064132007818ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 62500579ULL, 1360113064132007818ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 62500579ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 62500609ULL, 1360103556933219799ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 62500609ULL, 1360103556933219799ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 62500609ULL, 1360103556933219799ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 62500609ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 62500643ULL, 1360092782118960018ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 62500643ULL, 1360092782118960018ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 62500643ULL, 1360092782118960018ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 62500643ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 62500649ULL, 1360090880682366376ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 62500649ULL, 1360090880682366376ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 62500649ULL, 1360090880682366376ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 62500649ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 62500657ULL, 1360088345434142743ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 62500657ULL, 1360088345434142743ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 62500657ULL, 1360088345434142743ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 62500657ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 62500679ULL, 1360081373504874244ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 62500679ULL, 1360081373504874244ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 62500679ULL, 1360081373504874244ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 62500679ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 62500693ULL, 1360076936825167973ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 62500693ULL, 1360076936825167973ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 62500693ULL, 1360076936825167973ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 62500693ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 62500703ULL, 1360073767769451826ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 62500703ULL, 1360073767769451826ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 62500703ULL, 1360073767769451826ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 62500703ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 62500759ULL, 1360056021076181704ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 62500759ULL, 1360056021076181704ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 62500759ULL, 1360056021076181704ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 62500759ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 62500777ULL, 1360050316788670108ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 62500777ULL, 1360050316788670108ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 62500777ULL, 1360050316788670108ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 62500777ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 62500787ULL, 1360047147741472271ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 62500787ULL, 1360047147741472271ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 62500787ULL, 1360047147741472271ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 62500787ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 62500793ULL, 1360045246313640328ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 62500793ULL, 1360045246313640328ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 62500793ULL, 1360045246313640328ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 62500793ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #2] Progress: %llu (3.12%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #2] Progress: %llu (3.12%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #2] Potential Solution: %llu, primes[0] = 62500001, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_2( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 62499998ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 62499999ULL; n <= 93749997ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 93750023ULL, 7962636951943749288ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 93750023ULL, 7962636951943749288ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 93750023ULL, 7962636951943749288ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 93750023ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 93750029ULL, 7962635261743886481ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 93750029ULL, 7962635261743886481ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 93750029ULL, 7962635261743886481ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 93750029ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 93750061ULL, 7962626247348272013ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 93750061ULL, 7962626247348272013ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 93750061ULL, 7962626247348272013ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 93750061ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 93750071ULL, 7962623430350904506ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 93750071ULL, 7962623430350904506ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 93750071ULL, 7962623430350904506ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 93750071ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 93750091ULL, 7962617796357972369ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 93750091ULL, 7962617796357972369ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 93750091ULL, 7962617796357972369ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 93750091ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 93750103ULL, 7962614415963366927ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 93750103ULL, 7962614415963366927ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 93750103ULL, 7962614415963366927ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 93750103ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 93750109ULL, 7962612725766388724ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 93750109ULL, 7962612725766388724ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 93750109ULL, 7962612725766388724ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 93750109ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 93750157ULL, 7962599204198351512ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 93750157ULL, 7962599204198351512ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 93750157ULL, 7962599204198351512ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 93750157ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 93750187ULL, 7962590753225359455ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 93750187ULL, 7962590753225359455ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 93750187ULL, 7962590753225359455ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 93750187ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 93750203ULL, 7962586246041975213ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 93750203ULL, 7962586246041975213ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 93750203ULL, 7962586246041975213ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 93750203ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 93750247ULL, 7962573851295601168ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 93750247ULL, 7962573851295601168ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 93750247ULL, 7962573851295601168ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 93750247ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 93750253ULL, 7962572161103815232ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 93750253ULL, 7962572161103815232ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 93750253ULL, 7962572161103815232ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 93750253ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 93750271ULL, 7962567090529755487ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 93750271ULL, 7962567090529755487ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 93750271ULL, 7962567090529755487ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 93750271ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 93750287ULL, 7962562583354448089ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 93750287ULL, 7962562583354448089ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 93750287ULL, 7962562583354448089ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 93750287ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 93750299ULL, 7962559202973977145ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 93750299ULL, 7962559202973977145ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 93750299ULL, 7962559202973977145ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 93750299ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 93750407ULL, 7962528779588680463ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 93750407ULL, 7962528779588680463ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 93750407ULL, 7962528779588680463ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 93750407ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 93750421ULL, 7962524835821644513ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 93750421ULL, 7962524835821644513ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 93750421ULL, 7962524835821644513ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 93750421ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 93750439ULL, 7962519765265757606ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 93750439ULL, 7962519765265757606ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 93750439ULL, 7962519765265757606ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 93750439ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 93750443ULL, 7962518638475824935ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 93750443ULL, 7962518638475824935ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 93750443ULL, 7962518638475824935ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 93750443ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 93750451ULL, 7962516384896248048ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 93750451ULL, 7962516384896248048ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 93750451ULL, 7962516384896248048ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 93750451ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 93750457ULL, 7962514694711817783ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 93750457ULL, 7962514694711817783ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 93750457ULL, 7962514694711817783ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 93750457ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 93750463ULL, 7962513004527603861ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 93750463ULL, 7962513004527603861ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 93750463ULL, 7962513004527603861ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 93750463ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 93750467ULL, 7962511877738248103ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 93750467ULL, 7962511877738248103ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 93750467ULL, 7962511877738248103ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 93750467ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 93750491ULL, 7962505117004132750ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 93750491ULL, 7962505117004132750ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 93750491ULL, 7962505117004132750ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 93750491ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 93750493ULL, 7962504553609779385ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 93750493ULL, 7962504553609779385ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 93750493ULL, 7962504553609779385ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 93750493ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 93750551ULL, 7962488215183988324ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 93750551ULL, 7962488215183988324ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 93750551ULL, 7962488215183988324ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 93750551ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 93750583ULL, 7962479200888757279ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 93750583ULL, 7962479200888757279ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 93750583ULL, 7962479200888757279ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 93750583ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 93750589ULL, 7962477510709086541ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 93750589ULL, 7962477510709086541ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 93750589ULL, 7962477510709086541ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 93750589ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 93750611ULL, 7962471313385478087ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 93750611ULL, 7962471313385478087ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 93750611ULL, 7962471313385478087ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 93750611ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 93750619ULL, 7962469059813977970ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 93750619ULL, 7962469059813977970ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 93750619ULL, 7962469059813977970ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 93750619ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 93750647ULL, 7962461172316756338ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 93750647ULL, 7962461172316756338ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 93750647ULL, 7962461172316756338ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 93750647ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 93750653ULL, 7962459482139393241ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 93750653ULL, 7962459482139393241ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 93750653ULL, 7962459482139393241ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 93750653ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 93750659ULL, 7962457791962246486ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 93750659ULL, 7962457791962246486ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 93750659ULL, 7962457791962246486ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 93750659ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 93750661ULL, 7962457228569912310ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 93750661ULL, 7962457228569912310ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 93750661ULL, 7962457228569912310ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 93750661ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 93750667ULL, 7962455538393054009ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 93750667ULL, 7962455538393054009ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 93750667ULL, 7962455538393054009ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 93750667ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 93750673ULL, 7962453848216412049ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 93750673ULL, 7962453848216412049ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 93750673ULL, 7962453848216412049ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 93750673ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 93750677ULL, 7962452721432104265ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 93750677ULL, 7962452721432104265ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 93750677ULL, 7962452721432104265ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 93750677ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 93750697ULL, 7962447087512007619ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 93750697ULL, 7962447087512007619ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 93750697ULL, 7962447087512007619ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 93750697ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 93750719ULL, 7962440890202677684ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 93750719ULL, 7962440890202677684ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 93750719ULL, 7962440890202677684ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 93750719ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 93750749ULL, 7962432439331006063ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 93750749ULL, 7962432439331006063ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 93750749ULL, 7962432439331006063ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 93750749ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #3] Progress: %llu (6.25%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #3] Progress: %llu (6.25%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #3] Potential Solution: %llu, primes[0] = 93750023, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_3( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 93749997ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 93749998ULL; n <= 124999996ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 125000003ULL, 1360296079487569105ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 125000003ULL, 1360296079487569105ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 125000003ULL, 1360296079487569105ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 125000003ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 125000077ULL, 1360284353727021481ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 125000077ULL, 1360284353727021481ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 125000077ULL, 1360284353727021481ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 125000077ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 125000089ULL, 1360282452253646296ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 125000089ULL, 1360282452253646296ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 125000089ULL, 1360282452253646296ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 125000089ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 125000149ULL, 1360272944892246609ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 125000149ULL, 1360272944892246609ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 125000149ULL, 1360272944892246609ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 125000149ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 125000159ULL, 1360271360332900680ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 125000159ULL, 1360271360332900680ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 125000159ULL, 1360271360332900680ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 125000159ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 125000203ULL, 1360264388274790519ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 125000203ULL, 1360264388274790519ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 125000203ULL, 1360264388274790519ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 125000203ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 125000207ULL, 1360263754451569347ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 125000207ULL, 1360263754451569347ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 125000207ULL, 1360263754451569347ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 125000207ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 125000209ULL, 1360263437539973973ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 125000209ULL, 1360263437539973973ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 125000209ULL, 1360263437539973973ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 125000209ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 125000263ULL, 1360254880930732219ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 125000263ULL, 1360254880930732219ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 125000263ULL, 1360254880930732219ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 125000263ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 125000273ULL, 1360253296374276519ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 125000273ULL, 1360253296374276519ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 125000273ULL, 1360253296374276519ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 125000273ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 125000279ULL, 1360252345640524793ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 125000279ULL, 1360252345640524793ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 125000279ULL, 1360252345640524793ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 125000279ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 125000287ULL, 1360251077995664467ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 125000287ULL, 1360251077995664467ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 125000287ULL, 1360251077995664467ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 125000287ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 125000329ULL, 1360244422862809803ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 125000329ULL, 1360244422862809803ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 125000329ULL, 1360244422862809803ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 125000329ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 125000333ULL, 1360243789040866415ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 125000333ULL, 1360243789040866415ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 125000333ULL, 1360243789040866415ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 125000333ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 125000363ULL, 1360239035377583993ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 125000363ULL, 1360239035377583993ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 125000363ULL, 1360239035377583993ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 125000363ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 125000383ULL, 1360235866269996685ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 125000383ULL, 1360235866269996685ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 125000383ULL, 1360235866269996685ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 125000383ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 125000387ULL, 1360235232448600916ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 125000387ULL, 1360235232448600916ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 125000387ULL, 1360235232448600916ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 125000387ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 125000413ULL, 1360231112610517180ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 125000413ULL, 1360231112610517180ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 125000413ULL, 1360231112610517180ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 125000413ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 125000419ULL, 1360230161878895089ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 125000419ULL, 1360230161878895089ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 125000419ULL, 1360230161878895089ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 125000419ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 125000429ULL, 1360228577326394427ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 125000429ULL, 1360228577326394427ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 125000429ULL, 1360228577326394427ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 125000429ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 125000461ULL, 1360223506760096010ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 125000461ULL, 1360223506760096010ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 125000461ULL, 1360223506760096010ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 125000461ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 125000479ULL, 1360220654567694023ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 125000479ULL, 1360220654567694023ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 125000479ULL, 1360220654567694023ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 125000479ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 125000483ULL, 1360220020747271801ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 125000483ULL, 1360220020747271801ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 125000483ULL, 1360220020747271801ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 125000483ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 125000509ULL, 1360215900915516109ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 125000509ULL, 1360215900915516109ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 125000509ULL, 1360215900915516109ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 125000509ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 125000521ULL, 1360213999455283831ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 125000521ULL, 1360213999455283831ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 125000521ULL, 1360213999455283831ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 125000521ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 125000531ULL, 1360212414905369146ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 125000531ULL, 1360212414905369146ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 125000531ULL, 1360212414905369146ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 125000531ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 125000537ULL, 1360211464175542028ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 125000537ULL, 1360211464175542028ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 125000537ULL, 1360211464175542028ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 125000537ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 125000543ULL, 1360210513445806179ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 125000543ULL, 1360210513445806179ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 125000543ULL, 1360210513445806179ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 125000543ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 125000549ULL, 1360209562716161600ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 125000549ULL, 1360209562716161600ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 125000549ULL, 1360209562716161600ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 125000549ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 125000597ULL, 1360201956882290675ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 125000597ULL, 1360201956882290675ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 125000597ULL, 1360201956882290675ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 125000597ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 125000599ULL, 1360201639972672817ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 125000599ULL, 1360201639972672817ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 125000599ULL, 1360201639972672817ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 125000599ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 125000633ULL, 1360196252510720802ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 125000633ULL, 1360196252510720802ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 125000633ULL, 1360196252510720802ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 125000633ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 125000657ULL, 1360192449598166277ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 125000657ULL, 1360192449598166277ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 125000657ULL, 1360192449598166277ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 125000657ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 125000663ULL, 1360191498870255819ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 125000663ULL, 1360191498870255819ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 125000663ULL, 1360191498870255819ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 125000663ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 125000693ULL, 1360186745232072570ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 125000693ULL, 1360186745232072570ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 125000693ULL, 1360186745232072570ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 125000693ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 125000741ULL, 1360179139415725375ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 125000741ULL, 1360179139415725375ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 125000741ULL, 1360179139415725375ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 125000741ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 125000789ULL, 1360171533605219411ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 125000789ULL, 1360171533605219411ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 125000789ULL, 1360171533605219411ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 125000789ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 125000801ULL, 1360169632153505611ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 125000801ULL, 1360169632153505611ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 125000801ULL, 1360169632153505611ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 125000801ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 125000809ULL, 1360168364519232565ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 125000809ULL, 1360168364519232565ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 125000809ULL, 1360168364519232565ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 125000809ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 125000819ULL, 1360166779976619430ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 125000819ULL, 1360166779976619430ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 125000819ULL, 1360166779976619430ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 125000819ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #4] Progress: %llu (9.38%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #4] Progress: %llu (9.38%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #4] Potential Solution: %llu, primes[0] = 125000003, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_4( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 124999996ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 124999997ULL; n <= 156249995ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 156250027ULL, 13244515455746536731ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 156250027ULL, 13244515455746536731ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 156250027ULL, 13244515455746536731ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 156250027ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 156250049ULL, 13244510993618594307ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 156250049ULL, 13244510993618594307ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 156250049ULL, 13244510993618594307ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 156250049ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 156250093ULL, 13244502069366479062ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 156250093ULL, 13244502069366479062ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 156250093ULL, 13244502069366479062ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 156250093ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 156250103ULL, 13244500041128062920ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 156250103ULL, 13244500041128062920ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 156250103ULL, 13244500041128062920ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 156250103ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 156250117ULL, 13244497201594716473ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 156250117ULL, 13244497201594716473ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 156250117ULL, 13244497201594716473ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 156250117ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 156250121ULL, 13244496390299568092ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 156250121ULL, 13244496390299568092ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 156250121ULL, 13244496390299568092ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 156250121ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 156250123ULL, 13244495984652009479ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 156250123ULL, 13244495984652009479ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 156250123ULL, 13244495984652009479ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 156250123ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 156250177ULL, 13244485032171852278ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 156250177ULL, 13244485032171852278ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 156250177ULL, 13244485032171852278ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 156250177ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 156250183ULL, 13244483815230079895ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 156250183ULL, 13244483815230079895ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 156250183ULL, 13244483815230079895ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 156250183ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 156250187ULL, 13244483003935616895ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 156250187ULL, 13244483003935616895ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 156250187ULL, 13244483003935616895ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 156250187ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 156250207ULL, 13244478947463924970ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 156250207ULL, 13244478947463924970ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 156250207ULL, 13244478947463924970ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 156250207ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 156250249ULL, 13244470428876752099ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 156250249ULL, 13244470428876752099ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 156250249ULL, 13244470428876752099ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 156250249ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 156250253ULL, 13244469617582974480ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 156250253ULL, 13244469617582974480ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 156250253ULL, 13244469617582974480ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 156250253ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 156250273ULL, 13244465561114709456ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 156250273ULL, 13244465561114709456ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 156250273ULL, 13244465561114709456ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 156250273ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 156250309ULL, 13244458259474449316ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 156250309ULL, 13244458259474449316ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 156250309ULL, 13244458259474449316ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 156250309ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 156250321ULL, 13244455825595110289ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 156250321ULL, 13244455825595110289ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 156250321ULL, 13244455825595110289ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 156250321ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 156250327ULL, 13244454608655580967ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 156250327ULL, 13244454608655580967ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 156250327ULL, 13244454608655580967ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 156250327ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 156250343ULL, 13244451363483959694ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 156250343ULL, 13244451363483959694ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 156250343ULL, 13244451363483959694ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 156250343ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 156250351ULL, 13244449740898398286ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 156250351ULL, 13244449740898398286ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 156250351ULL, 13244449740898398286ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 156250351ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 156250379ULL, 13244444061850241807ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 156250379ULL, 13244444061850241807ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 156250379ULL, 13244444061850241807ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 156250379ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 156250397ULL, 13244440411034644583ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 156250397ULL, 13244440411034644583ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 156250397ULL, 13244440411034644583ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 156250397ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 156250399ULL, 13244440005388519036ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 156250399ULL, 13244440005388519036ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 156250399ULL, 13244440005388519036ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 156250399ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 156250453ULL, 13244429052947054618ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 156250453ULL, 13244429052947054618ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 156250453ULL, 13244429052947054618ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 156250453ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 156250469ULL, 13244425807780667140ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 156250469ULL, 13244425807780667140ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 156250469ULL, 13244425807780667140ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 156250469ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 156250487ULL, 13244422156969275641ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 156250487ULL, 13244422156969275641ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 156250487ULL, 13244422156969275641ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 156250487ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 156250511ULL, 13244417289222062089ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 156250511ULL, 13244417289222062089ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 156250511ULL, 13244417289222062089ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 156250511ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 156250517ULL, 13244416072285492353ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 156250517ULL, 13244416072285492353ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 156250517ULL, 13244416072285492353ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 156250517ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 156250531ULL, 13244413232767193090ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 156250531ULL, 13244413232767193090ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 156250531ULL, 13244413232767193090ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 156250531ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 156250559ULL, 13244407553732121086ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 156250559ULL, 13244407553732121086ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 156250559ULL, 13244407553732121086ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 156250559ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 156250561ULL, 13244407148086836683ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 156250561ULL, 13244407148086836683ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 156250561ULL, 13244407148086836683ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 156250561ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 156250573ULL, 13244404714215348343ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 156250573ULL, 13244404714215348343ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 156250573ULL, 13244404714215348343ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 156250573ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 156250583ULL, 13244402685989393632ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 156250583ULL, 13244402685989393632ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 156250583ULL, 13244402685989393632ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 156250583ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 156250597ULL, 13244399846473493186ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 156250597ULL, 13244399846473493186ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 156250597ULL, 13244399846473493186ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 156250597ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 156250651ULL, 13244388894059786507ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 156250651ULL, 13244388894059786507ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 156250651ULL, 13244388894059786507ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 156250651ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 156250657ULL, 13244387677125397510ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 156250657ULL, 13244387677125397510ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 156250657ULL, 13244387677125397510ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 156250657ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 156250669ULL, 13244385243256899897ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 156250669ULL, 13244385243256899897ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 156250669ULL, 13244385243256899897ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 156250669ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 156250673ULL, 13244384431967483769ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 156250673ULL, 13244384431967483769ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 156250673ULL, 13244384431967483769ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 156250673ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 156250687ULL, 13244381592454854429ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 156250687ULL, 13244381592454854429ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 156250687ULL, 13244381592454854429ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 156250687ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 156250693ULL, 13244380375521026193ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 156250693ULL, 13244380375521026193ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 156250693ULL, 13244380375521026193ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 156250693ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 156250697ULL, 13244379564231859292ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 156250697ULL, 13244379564231859292ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 156250697ULL, 13244379564231859292ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 156250697ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #5] Progress: %llu (12.50%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #5] Progress: %llu (12.50%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #5] Potential Solution: %llu, primes[0] = 156250027, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_5( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 156249995ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 156249996ULL; n <= 187499994ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 187500007ULL, 7962642445094797546ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 187500007ULL, 7962642445094797546ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 187500007ULL, 7962642445094797546ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 187500007ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 187500029ULL, 7962639346393925272ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 187500029ULL, 7962639346393925272ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 187500029ULL, 7962639346393925272ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 187500029ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 187500097ULL, 7962629768595826495ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 187500097ULL, 7962629768595826495ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 187500097ULL, 7962629768595826495ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 187500097ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 187500119ULL, 7962626669897928972ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 187500119ULL, 7962626669897928972ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 187500119ULL, 7962626669897928972ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 187500119ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 187500143ULL, 7962623289501051906ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 187500143ULL, 7962623289501051906ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 187500143ULL, 7962623289501051906ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 187500143ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 187500179ULL, 7962618218907358896ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 187500179ULL, 7962618218907358896ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 187500179ULL, 7962618218907358896ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 187500179ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 187500211ULL, 7962613711714599717ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 187500211ULL, 7962613711714599717ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 187500211ULL, 7962613711714599717ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 187500211ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 187500217ULL, 7962612866616128644ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 187500217ULL, 7962612866616128644ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 187500217ULL, 7962612866616128644ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 187500217ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 187500241ULL, 7962609486222785215ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 187500241ULL, 7962609486222785215ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 187500241ULL, 7962609486222785215ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 187500241ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 187500277ULL, 7962604415634392657ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 187500277ULL, 7962604415634392657ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 187500277ULL, 7962604415634392657ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 187500277ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 187500319ULL, 7962598499950395595ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 187500319ULL, 7962598499950395595ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 187500319ULL, 7962598499950395595ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 187500319ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 187500329ULL, 7962597091454596440ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 187500329ULL, 7962597091454596440ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 187500329ULL, 7962597091454596440ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 187500329ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 187500353ULL, 7962593711065291445ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 187500353ULL, 7962593711065291445ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 187500353ULL, 7962593711065291445ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 187500353ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 187500359ULL, 7962592865968100412ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 187500359ULL, 7962592865968100412ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 187500359ULL, 7962592865968100412ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 187500359ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 187500373ULL, 7962590894074865002ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 187500373ULL, 7962590894074865002ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 187500373ULL, 7962590894074865002ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 187500373ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 187500433ULL, 7962582443107191413ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 187500433ULL, 7962582443107191413ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 187500433ULL, 7962582443107191413ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 187500433ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 187500451ULL, 7962579907817944014ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 187500451ULL, 7962579907817944014ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 187500451ULL, 7962579907817944014ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 187500451ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 187500473ULL, 7962576809131747134ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 187500473ULL, 7962576809131747134ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 187500473ULL, 7962576809131747134ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 187500473ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 187500499ULL, 7962573147048997403ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 187500499ULL, 7962573147048997403ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 187500499ULL, 7962573147048997403ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 187500499ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 187500517ULL, 7962570611761534842ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 187500517ULL, 7962570611761534842ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 187500517ULL, 7962570611761534842ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 187500517ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 187500553ULL, 7962565541188070043ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 187500553ULL, 7962565541188070043ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 187500553ULL, 7962565541188070043ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 187500553ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 187500583ULL, 7962561315711670074ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 187500583ULL, 7962561315711670074ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 187500583ULL, 7962561315711670074ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 187500583ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 187500589ULL, 7962560470616552338ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 187500589ULL, 7962560470616552338ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 187500589ULL, 7962560470616552338ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 187500589ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 187500611ULL, 7962557371934916708ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 187500611ULL, 7962557371934916708ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 187500611ULL, 7962557371934916708ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 187500611ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 187500613ULL, 7962557090236622253ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 187500613ULL, 7962557090236622253ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 187500613ULL, 7962557090236622253ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 187500613ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 187500619ULL, 7962556245141774947ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 187500619ULL, 7962556245141774947ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 187500619ULL, 7962556245141774947ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 187500619ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 187500629ULL, 7962554836650482960ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 187500629ULL, 7962554836650482960ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 187500629ULL, 7962554836650482960ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 187500629ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 187500637ULL, 7962553709857557543ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 187500637ULL, 7962553709857557543ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 187500637ULL, 7962553709857557543ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 187500637ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 187500659ULL, 7962550611177508432ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 187500659ULL, 7962550611177508432ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 187500659ULL, 7962550611177508432ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 187500659ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 187500673ULL, 7962548639290583053ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 187500673ULL, 7962548639290583053ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 187500673ULL, 7962548639290583053ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 187500673ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 187500707ULL, 7962543850423561650ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 187500707ULL, 7962543850423561650ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 187500707ULL, 7962543850423561650ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 187500707ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 187500713ULL, 7962543005329561689ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 187500713ULL, 7962543005329561689ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 187500713ULL, 7962543005329561689ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 187500713ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 187500727ULL, 7962541033443772112ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 187500727ULL, 7962541033443772112ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 187500727ULL, 7962541033443772112ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 187500727ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 187500739ULL, 7962539343256186847ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 187500739ULL, 7962539343256186847ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 187500739ULL, 7962539343256186847ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 187500739ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 187500751ULL, 7962537653068817925ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 187500751ULL, 7962537653068817925ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 187500751ULL, 7962537653068817925ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 187500751ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 187500757ULL, 7962536807975214593ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 187500757ULL, 7962536807975214593ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 187500757ULL, 7962536807975214593ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 187500757ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 187500779ULL, 7962533709299131775ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 187500779ULL, 7962533709299131775ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 187500779ULL, 7962533709299131775ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 187500779ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 187500791ULL, 7962532019112483996ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 187500791ULL, 7962532019112483996ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 187500791ULL, 7962532019112483996ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 187500791ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 187500799ULL, 7962530892321505668ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 187500799ULL, 7962530892321505668ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 187500799ULL, 7962530892321505668ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 187500799ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 187500809ULL, 7962529483832917971ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 187500809ULL, 7962529483832917971ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 187500809ULL, 7962529483832917971ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 187500809ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #6] Progress: %llu (15.62%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #6] Progress: %llu (15.62%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #6] Potential Solution: %llu, primes[0] = 187500007, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_6( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 187499994ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 187499995ULL; n <= 218749993ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 218749997ULL, 4189874097953879764ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 218749997ULL, 4189874097953879764ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 218749997ULL, 4189874097953879764ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 218749997ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 218750011ULL, 4189872649210389629ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 218750011ULL, 4189872649210389629ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 218750011ULL, 4189872649210389629ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 218750011ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 218750017ULL, 4189872028320379195ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 218750017ULL, 4189872028320379195ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 218750017ULL, 4189872028320379195ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 218750017ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 218750039ULL, 4189869751723965676ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 218750039ULL, 4189869751723965676ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 218750039ULL, 4189869751723965676ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 218750039ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 218750041ULL, 4189869544760678063ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 218750041ULL, 4189869544760678063ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 218750041ULL, 4189869544760678063ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 218750041ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 218750099ULL, 4189863542826983526ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 218750099ULL, 4189863542826983526ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 218750099ULL, 4189863542826983526ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 218750099ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 218750113ULL, 4189862094084844447ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 218750113ULL, 4189862094084844447ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 218750113ULL, 4189862094084844447ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 218750113ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 218750117ULL, 4189861680158553056ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 218750117ULL, 4189861680158553056ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 218750117ULL, 4189861680158553056ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 218750117ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 218750149ULL, 4189858368748766890ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 218750149ULL, 4189858368748766890ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 218750149ULL, 4189858368748766890ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 218750149ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 218750183ULL, 4189854850376930632ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 218750183ULL, 4189854850376930632ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 218750183ULL, 4189854850376930632ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 218750183ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 218750281ULL, 4189844709193639715ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 218750281ULL, 4189844709193639715ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 218750281ULL, 4189844709193639715ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 218750281ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 218750317ULL, 4189840983863284265ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 218750317ULL, 4189840983863284265ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 218750317ULL, 4189840983863284265ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 218750317ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 218750321ULL, 4189840569937764904ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 218750321ULL, 4189840569937764904ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 218750321ULL, 4189840569937764904ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 218750321ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 218750333ULL, 4189839328161297648ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 218750333ULL, 4189839328161297648ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 218750333ULL, 4189839328161297648ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 218750333ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 218750359ULL, 4189836637646085974ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 218750359ULL, 4189836637646085974ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 218750359ULL, 4189836637646085974ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 218750359ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 218750381ULL, 4189834361056791029ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 218750381ULL, 4189834361056791029ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 218750381ULL, 4189834361056791029ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 218750381ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 218750383ULL, 4189834154094150558ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 218750383ULL, 4189834154094150558ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 218750383ULL, 4189834154094150558ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 218750383ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 218750431ULL, 4189829186991914611ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 218750431ULL, 4189829186991914611ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 218750431ULL, 4189829186991914611ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 218750431ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 218750443ULL, 4189827945216696225ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 218750443ULL, 4189827945216696225ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 218750443ULL, 4189827945216696225ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 218750443ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 218750449ULL, 4189827324329138122ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 218750449ULL, 4189827324329138122ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 218750449ULL, 4189827324329138122ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 218750449ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 218750459ULL, 4189826289516616972ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 218750459ULL, 4189826289516616972ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 218750459ULL, 4189826289516616972ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 218750459ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 218750471ULL, 4189825047741716480ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 218750471ULL, 4189825047741716480ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 218750471ULL, 4189825047741716480ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 218750471ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 218750491ULL, 4189822978117185081ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 218750491ULL, 4189822978117185081ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 218750491ULL, 4189822978117185081ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 218750491ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 218750507ULL, 4189821322417832443ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 218750507ULL, 4189821322417832443ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 218750507ULL, 4189821322417832443ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 218750507ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 218750527ULL, 4189819252793982245ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 218750527ULL, 4189819252793982245ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 218750527ULL, 4189819252793982245ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 218750527ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 218750537ULL, 4189818217982199063ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 218750537ULL, 4189818217982199063ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 218750537ULL, 4189818217982199063ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 218750537ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 218750599ULL, 4189811802151255053ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 218750599ULL, 4189811802151255053ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 218750599ULL, 4189811802151255053ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 218750599ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 218750633ULL, 4189808283793894326ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 218750633ULL, 4189808283793894326ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 218750633ULL, 4189808283793894326ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 218750633ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 218750641ULL, 4189807455945262513ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 218750641ULL, 4189807455945262513ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 218750641ULL, 4189807455945262513ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 218750641ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 218750657ULL, 4189805800248180541ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 218750657ULL, 4189805800248180541ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 218750657ULL, 4189805800248180541ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 218750657ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 218750659ULL, 4189805593286062324ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 218750659ULL, 4189805593286062324ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 218750659ULL, 4189805593286062324ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 218750659ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 218750669ULL, 4189804558475528008ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 218750669ULL, 4189804558475528008ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 218750669ULL, 4189804558475528008ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 218750669ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 218750681ULL, 4189803316703011714ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 218750681ULL, 4189803316703011714ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 218750681ULL, 4189803316703011714ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 218750681ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 218750689ULL, 4189802488854743208ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 218750689ULL, 4189802488854743208ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 218750689ULL, 4189802488854743208ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 218750689ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 218750729ULL, 4189798349614308939ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 218750729ULL, 4189798349614308939ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 218750729ULL, 4189798349614308939ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 218750729ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 218750731ULL, 4189798142652326962ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 218750731ULL, 4189798142652326962ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 218750731ULL, 4189798142652326962ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 218750731ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 218750759ULL, 4189795245184976652ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 218750759ULL, 4189795245184976652ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 218750759ULL, 4189795245184976652ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 218750759ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 218750783ULL, 4189792761642123900ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 218750783ULL, 4189792761642123900ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 218750783ULL, 4189792761642123900ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 218750783ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 218750797ULL, 4189791312909044793ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 218750797ULL, 4189791312909044793ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 218750797ULL, 4189791312909044793ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 218750797ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 218750809ULL, 4189790071137981723ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 218750809ULL, 4189790071137981723ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 218750809ULL, 4189790071137981723ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 218750809ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #7] Progress: %llu (18.75%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #7] Progress: %llu (18.75%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #7] Potential Solution: %llu, primes[0] = 218749997, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_7( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 218749993ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 218749994ULL; n <= 249999992ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 250000013ULL, 1360295524890473655ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 250000013ULL, 1360295524890473655ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 250000013ULL, 1360295524890473655ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 250000013ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 250000019ULL, 1360295049521559416ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 250000019ULL, 1360295049521559416ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 250000019ULL, 1360295049521559416ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 250000019ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 250000073ULL, 1360290771202358068ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 250000073ULL, 1360290771202358068ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 250000073ULL, 1360290771202358068ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 250000073ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 250000103ULL, 1360288394359155938ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 250000103ULL, 1360288394359155938ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 250000103ULL, 1360288394359155938ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 250000103ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 250000117ULL, 1360287285165856828ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 250000117ULL, 1360287285165856828ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 250000117ULL, 1360287285165856828ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 250000117ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 250000123ULL, 1360286809797338096ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 250000123ULL, 1360286809797338096ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 250000123ULL, 1360286809797338096ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 250000123ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 250000129ULL, 1360286334428842182ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 250000129ULL, 1360286334428842182ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 250000129ULL, 1360286334428842182ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 250000129ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 250000139ULL, 1360285542148066365ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 250000139ULL, 1360285542148066365ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 250000139ULL, 1360285542148066365ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 250000139ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 250000141ULL, 1360285383691918807ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 250000141ULL, 1360285383691918807ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 250000141ULL, 1360285383691918807ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 250000141ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 250000189ULL, 1360281580745138014ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 250000189ULL, 1360281580745138014ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 250000189ULL, 1360281580745138014ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 250000189ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 250000193ULL, 1360281263832972199ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 250000193ULL, 1360281263832972199ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 250000193ULL, 1360281263832972199ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 250000193ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 250000211ULL, 1360279837728351528ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 250000211ULL, 1360279837728351528ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 250000211ULL, 1360279837728351528ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 250000211ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 250000243ULL, 1360277302431755173ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 250000243ULL, 1360277302431755173ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 250000243ULL, 1360277302431755173ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 250000243ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 250000259ULL, 1360276034783700383ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 250000259ULL, 1360276034783700383ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 250000259ULL, 1360276034783700383ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 250000259ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 250000291ULL, 1360273499488077580ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 250000291ULL, 1360273499488077580ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 250000291ULL, 1360273499488077580ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 250000291ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 250000297ULL, 1360273024120220560ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 250000297ULL, 1360273024120220560ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 250000297ULL, 1360273024120220560ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 250000297ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 250000313ULL, 1360271756472713394ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 250000313ULL, 1360271756472713394ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 250000313ULL, 1360271756472713394ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 250000313ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 250000339ULL, 1360269696545860316ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 250000339ULL, 1360269696545860316ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 250000339ULL, 1360269696545860316ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 250000339ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 250000367ULL, 1360267478163574632ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 250000367ULL, 1360267478163574632ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 250000367ULL, 1360267478163574632ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 250000367ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 250000369ULL, 1360267319707716098ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 250000369ULL, 1360267319707716098ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 250000369ULL, 1360267319707716098ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 250000369ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 250000381ULL, 1360266368972618134ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 250000381ULL, 1360266368972618134ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 250000381ULL, 1360266368972618134ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 250000381ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 250000391ULL, 1360265576693439552ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 250000391ULL, 1360265576693439552ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 250000391ULL, 1360265576693439552ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 250000391ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 250000393ULL, 1360265418237611441ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 250000393ULL, 1360265418237611441ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 250000393ULL, 1360265418237611441ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 250000393ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 250000433ULL, 1360262249121581638ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 250000433ULL, 1360262249121581638ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 250000433ULL, 1360262249121581638ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 250000433ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 250000459ULL, 1360260189196706086ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 250000459ULL, 1360260189196706086ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 250000459ULL, 1360260189196706086ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 250000459ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 250000463ULL, 1360259872285224800ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 250000463ULL, 1360259872285224800ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 250000463ULL, 1360259872285224800ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 250000463ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 250000469ULL, 1360259396918021885ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 250000469ULL, 1360259396918021885ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 250000469ULL, 1360259396918021885ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 250000469ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 250000519ULL, 1360255435525551610ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 250000519ULL, 1360255435525551610ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 250000519ULL, 1360255435525551610ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 250000519ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 250000549ULL, 1360253058690830031ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 250000549ULL, 1360253058690830031ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 250000549ULL, 1360253058690830031ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 250000549ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 250000559ULL, 1360252266412716268ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 250000559ULL, 1360252266412716268ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 250000559ULL, 1360252266412716268ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 250000559ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 250000573ULL, 1360251157223463483ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 250000573ULL, 1360251157223463483ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 250000573ULL, 1360251157223463483ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 250000573ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 250000577ULL, 1360250840312271220ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 250000577ULL, 1360250840312271220ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 250000577ULL, 1360250840312271220ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 250000577ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 250000633ULL, 1360246403556644344ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 250000633ULL, 1360246403556644344ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 250000633ULL, 1360246403556644344ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 250000633ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 250000669ULL, 1360243551357648102ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 250000669ULL, 1360243551357648102ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 250000669ULL, 1360243551357648102ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 250000669ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 250000679ULL, 1360242759080294925ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 250000679ULL, 1360242759080294925ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 250000679ULL, 1360242759080294925ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 250000679ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 250000687ULL, 1360242125258458018ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 250000687ULL, 1360242125258458018ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 250000687ULL, 1360242125258458018ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 250000687ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 250000697ULL, 1360241332981218928ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 250000697ULL, 1360241332981218928ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 250000697ULL, 1360241332981218928ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 250000697ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 250000711ULL, 1360240223793190684ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 250000711ULL, 1360240223793190684ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 250000711ULL, 1360240223793190684ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 250000711ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 250000787ULL, 1360234202488919309ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 250000787ULL, 1360234202488919309ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 250000787ULL, 1360234202488919309ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 250000787ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 250000789ULL, 1360234044033593185ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 250000789ULL, 1360234044033593185ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 250000789ULL, 1360234044033593185ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 250000789ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #8] Progress: %llu (21.88%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #8] Progress: %llu (21.88%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #8] Potential Solution: %llu, primes[0] = 250000013, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_8( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 249999992ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 249999993ULL; n <= 281249991ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 281249993ULL, 16765773475697257433ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 281249993ULL, 16765773475697257433ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 281249993ULL, 16765773475697257433ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 281249993ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 281250001ULL, 16765772474096761811ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 281250001ULL, 16765772474096761811ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 281250001ULL, 16765772474096761811ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 281250001ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 281250007ULL, 16765771722896427487ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 281250007ULL, 16765771722896427487ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 281250007ULL, 16765771722896427487ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 281250007ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 281250017ULL, 16765770470895941507ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 281250017ULL, 16765770470895941507ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 281250017ULL, 16765770470895941507ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 281250017ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 281250029ULL, 16765768968495475851ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 281250029ULL, 16765768968495475851ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 281250029ULL, 16765768968495475851ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 281250029ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 281250031ULL, 16765768718095410706ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 281250031ULL, 16765768718095410706ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 281250031ULL, 16765768718095410706ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 281250031ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 281250041ULL, 16765767466095138400ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 281250041ULL, 16765767466095138400ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 281250041ULL, 16765767466095138400ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 281250041ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 281250059ULL, 16765765212494872608ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 281250059ULL, 16765765212494872608ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 281250059ULL, 16765765212494872608ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 281250059ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 281250089ULL, 16765761456495070645ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 281250089ULL, 16765761456495070645ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 281250089ULL, 16765761456495070645ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 281250089ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 281250097ULL, 16765760454895258782ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 281250097ULL, 16765760454895258782ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 281250097ULL, 16765760454895258782ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 281250097ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 281250127ULL, 16765756698896471773ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 281250127ULL, 16765756698896471773ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 281250127ULL, 16765756698896471773ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 281250127ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 281250131ULL, 16765756198096694046ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 281250131ULL, 16765756198096694046ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 281250131ULL, 16765756198096694046ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 281250131ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 281250157ULL, 16765752942898486043ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 281250157ULL, 16765752942898486043ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 281250157ULL, 16765752942898486043ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 281250157ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 281250161ULL, 16765752442098815153ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 281250161ULL, 16765752442098815153ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 281250161ULL, 16765752442098815153ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 281250161ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 281250257ULL, 16765740422910987291ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 281250257ULL, 16765740422910987291ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 281250257ULL, 16765740422910987291ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 281250257ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 281250287ULL, 16765736666916473768ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 281250287ULL, 16765736666916473768ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 281250287ULL, 16765736666916473768ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 281250287ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 281250337ULL, 16765730406927398515ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 281250337ULL, 16765730406927398515ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 281250337ULL, 16765730406927398515ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 281250337ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 281250353ULL, 16765728403731364517ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 281250353ULL, 16765728403731364517ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 281250353ULL, 16765728403731364517ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 281250353ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 281250367ULL, 16765726650935021733ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 281250367ULL, 16765726650935021733ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 281250367ULL, 16765726650935021733ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 281250367ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 281250373ULL, 16765725899736642530ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 281250373ULL, 16765725899736642530ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 281250373ULL, 16765725899736642530ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 281250373ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 281250377ULL, 16765725398937740868ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 281250377ULL, 16765725398937740868ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 281250377ULL, 16765725398937740868ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 281250377ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 281250421ULL, 16765719890150762744ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 281250421ULL, 16765719890150762744ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 281250421ULL, 16765719890150762744ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 281250421ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 281250449ULL, 16765716384559946823ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 281250449ULL, 16765716384559946823ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 281250449ULL, 16765716384559946823ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 281250449ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 281250493ULL, 16765710875775789194ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 281250493ULL, 16765710875775789194ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 281250493ULL, 16765710875775789194ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 281250493ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 281250527ULL, 16765706618989211573ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 281250527ULL, 16765706618989211573ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 281250527ULL, 16765706618989211573ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 281250527ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 281250539ULL, 16765705116594194607ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 281250539ULL, 16765705116594194607ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 281250539ULL, 16765705116594194607ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 281250539ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 281250583ULL, 16765699607813562592ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 281250583ULL, 16765699607813562592ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 281250583ULL, 16765699607813562592ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 281250583ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 281250589ULL, 16765698856616337227ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 281250589ULL, 16765698856616337227ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 281250589ULL, 16765698856616337227ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 281250589ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 281250649ULL, 16765691344645846380ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 281250649ULL, 16765691344645846380ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 281250649ULL, 16765691344645846380ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 281250649ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 281250689ULL, 16765686336667299760ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 281250689ULL, 16765686336667299760ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 281250689ULL, 16765686336667299760ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 281250689ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 281250691ULL, 16765686086268409821ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 281250691ULL, 16765686086268409821ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 281250691ULL, 16765686086268409821ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 281250691ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 281250721ULL, 16765682330285488095ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 281250721ULL, 16765682330285488095ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 281250721ULL, 16765682330285488095ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 281250721ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 281250743ULL, 16765679575898521416ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 281250743ULL, 16765679575898521416ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 281250743ULL, 16765679575898521416ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 281250743ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 281250751ULL, 16765678574303367642ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 281250751ULL, 16765678574303367642ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 281250751ULL, 16765678574303367642ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 281250751ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 281250799ULL, 16765672564733641568ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 281250799ULL, 16765672564733641568ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 281250799ULL, 16765672564733641568ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 281250799ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 281250803ULL, 16765672063936256987ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 281250803ULL, 16765672063936256987ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 281250803ULL, 16765672063936256987ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 281250803ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 281250811ULL, 16765671062341530559ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 281250811ULL, 16765671062341530559ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 281250811ULL, 16765671062341530559ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 281250811ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 281250829ULL, 16765668808753604427ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 281250829ULL, 16765668808753604427ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 281250829ULL, 16765668808753604427ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 281250829ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 281250833ULL, 16765668307956326682ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 281250833ULL, 16765668307956326682ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 281250833ULL, 16765668307956326682ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 281250833ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 281250881ULL, 16765662298390104844ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 281250881ULL, 16765662298390104844ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 281250881ULL, 16765662298390104844ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 281250881ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #9] Progress: %llu (25.00%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #9] Progress: %llu (25.00%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #9] Potential Solution: %llu, primes[0] = 281249993, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_9( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 281249991ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 281249992ULL; n <= 312499990ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 312500017ULL, 13244519207991460896ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 312500017ULL, 13244519207991460896ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 312500017ULL, 13244519207991460896ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 312500017ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 312500059ULL, 13244514948686479993ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 312500059ULL, 13244514948686479993ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 312500059ULL, 13244514948686479993ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 312500059ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 312500077ULL, 13244513123270410085ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 312500077ULL, 13244513123270410085ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 312500077ULL, 13244513123270410085ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 312500077ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 312500081ULL, 13244512717622423108ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 312500081ULL, 13244512717622423108ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 312500081ULL, 13244512717622423108ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 312500081ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 312500099ULL, 13244510892206610219ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 312500099ULL, 13244510892206610219ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 312500099ULL, 13244510892206610219ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 312500099ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 312500101ULL, 13244510689382643990ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 312500101ULL, 13244510689382643990ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 312500101ULL, 13244510689382643990ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 312500101ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 312500129ULL, 13244507849847389377ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 312500129ULL, 13244507849847389377ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 312500129ULL, 13244507849847389377ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 312500129ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 312500141ULL, 13244506632903864597ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 312500141ULL, 13244506632903864597ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 312500141ULL, 13244506632903864597ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 312500141ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 312500159ULL, 13244504807488752667ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 312500159ULL, 13244504807488752667ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 312500159ULL, 13244504807488752667ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 312500159ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 312500189ULL, 13244501765130700090ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 312500189ULL, 13244501765130700090ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 312500189ULL, 13244501765130700090ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 312500189ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 312500207ULL, 13244499939716148928ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 312500207ULL, 13244499939716148928ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 312500207ULL, 13244499939716148928ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 312500207ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 312500213ULL, 13244499331244678604ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 312500213ULL, 13244499331244678604ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 312500213ULL, 13244499331244678604ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 312500213ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 312500269ULL, 13244493652178748976ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 312500269ULL, 13244493652178748976ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 312500269ULL, 13244493652178748976ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 312500269ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 312500291ULL, 13244491421117690638ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 312500291ULL, 13244491421117690638ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 312500291ULL, 13244491421117690638ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 312500291ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 312500329ULL, 13244487567467511590ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 312500329ULL, 13244487567467511590ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 312500329ULL, 13244487567467511590ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 312500329ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 312500339ULL, 13244486553349199188ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 312500339ULL, 13244486553349199188ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 312500339ULL, 13244486553349199188ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 312500339ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 312500359ULL, 13244484525112769094ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 312500359ULL, 13244484525112769094ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 312500359ULL, 13244484525112769094ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 312500359ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 312500411ULL, 13244479251699265843ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 312500411ULL, 13244479251699265843ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 312500411ULL, 13244479251699265843ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 312500411ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 312500413ULL, 13244479048875704612ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 312500413ULL, 13244479048875704612ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 312500413ULL, 13244479048875704612ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 312500413ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 312500473ULL, 13244472964170074886ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 312500473ULL, 13244472964170074886ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 312500473ULL, 13244472964170074886ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 312500473ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 312500497ULL, 13244470530288477222ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 312500497ULL, 13244470530288477222ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 312500497ULL, 13244470530288477222ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 312500497ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 312500569ULL, 13244463228645927292ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 312500569ULL, 13244463228645927292ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 312500569ULL, 13244463228645927292ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 312500569ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 312500593ULL, 13244460794765825002ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 312500593ULL, 13244460794765825002ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 312500593ULL, 13244460794765825002ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 312500593ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 312500611ULL, 13244458969355993619ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 312500611ULL, 13244458969355993619ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 312500611ULL, 13244458969355993619ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 312500611ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 312500641ULL, 13244455927006741952ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 312500641ULL, 13244455927006741952ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 312500641ULL, 13244455927006741952ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 312500641ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 312500653ULL, 13244454710067204841ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 312500653ULL, 13244454710067204841ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 312500653ULL, 13244454710067204841ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 312500653ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 312500687ULL, 13244451262072357238ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 312500687ULL, 13244451262072357238ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 312500687ULL, 13244451262072357238ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 312500687ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 312500693ULL, 13244450653602756133ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 312500693ULL, 13244450653602756133ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 312500693ULL, 13244450653602756133ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 312500693ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 312500707ULL, 13244449233840444420ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 312500707ULL, 13244449233840444420ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 312500707ULL, 13244449233840444420ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 312500707ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 312500717ULL, 13244448219724585366ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 312500717ULL, 13244448219724585366ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 312500717ULL, 13244448219724585366ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 312500717ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 312500753ULL, 13244444568908030170ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 312500753ULL, 13244444568908030170ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 312500753ULL, 13244444568908030170ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 312500753ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 312500777ULL, 13244442135030794009ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 312500777ULL, 13244442135030794009ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 312500777ULL, 13244442135030794009ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 312500777ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 312500789ULL, 13244440918092316120ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 312500789ULL, 13244440918092316120ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 312500789ULL, 13244440918092316120ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 312500789ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 312500803ULL, 13244439498330876706ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 312500803ULL, 13244439498330876706ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 312500803ULL, 13244439498330876706ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 312500803ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 312500813ULL, 13244438484215640723ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 312500813ULL, 13244438484215640723ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 312500813ULL, 13244438484215640723ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 312500813ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 312500843ULL, 13244435441870322193ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 312500843ULL, 13244435441870322193ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 312500843ULL, 13244435441870322193ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 312500843ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 312500849ULL, 13244434833401328582ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 312500849ULL, 13244434833401328582ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 312500849ULL, 13244434833401328582ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 312500849ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 312500861ULL, 13244433616463411456ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 312500861ULL, 13244433616463411456ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 312500861ULL, 13244433616463411456ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 312500861ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 312500869ULL, 13244432805171518628ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 312500869ULL, 13244432805171518628ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 312500869ULL, 13244432805171518628ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 312500869ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 312500911ULL, 13244428545889762765ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 312500911ULL, 13244428545889762765ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 312500911ULL, 13244428545889762765ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 312500911ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #10] Progress: %llu (28.12%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #10] Progress: %llu (28.12%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #10] Potential Solution: %llu, primes[0] = 312500017, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_10( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 312499990ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 312499991ULL; n <= 343749989ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 343750007ULL, 10363496253887131746ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 343750007ULL, 10363496253887131746ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 343750007ULL, 10363496253887131746ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 343750007ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 343750009ULL, 10363496086263919684ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 343750009ULL, 10363496086263919684ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 343750009ULL, 10363496086263919684ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 343750009ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 343750063ULL, 10363491560437931286ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 343750063ULL, 10363491560437931286ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 343750063ULL, 10363491560437931286ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 343750063ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 343750073ULL, 10363490722322163551ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 343750073ULL, 10363490722322163551ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 343750073ULL, 10363490722322163551ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 343750073ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 343750097ULL, 10363488710844519940ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 343750097ULL, 10363488710844519940ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 343750097ULL, 10363488710844519940ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 343750097ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 343750117ULL, 10363487034613364821ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 343750117ULL, 10363487034613364821ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 343750117ULL, 10363487034613364821ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 343750117ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 343750163ULL, 10363483179282448271ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 343750163ULL, 10363483179282448271ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 343750163ULL, 10363483179282448271ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 343750163ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 343750193ULL, 10363480664936754247ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 343750193ULL, 10363480664936754247ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 343750193ULL, 10363480664936754247ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 343750193ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 343750219ULL, 10363478485837507753ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 343750219ULL, 10363478485837507753ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 343750219ULL, 10363478485837507753ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 343750219ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 343750241ULL, 10363476641984556651ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 343750241ULL, 10363476641984556651ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 343750241ULL, 10363476641984556651ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 343750241ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 343750247ULL, 10363476139115610948ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 343750247ULL, 10363476139115610948ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 343750247ULL, 10363476139115610948ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 343750247ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 343750271ULL, 10363474127640003681ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 343750271ULL, 10363474127640003681ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 343750271ULL, 10363474127640003681ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 343750271ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 343750283ULL, 10363473121902305376ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 343750283ULL, 10363473121902305376ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 343750283ULL, 10363473121902305376ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 343750283ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 343750291ULL, 10363472451410545516ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 343750291ULL, 10363472451410545516ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 343750291ULL, 10363472451410545516ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 343750291ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 343750327ULL, 10363469434198012350ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 343750327ULL, 10363469434198012350ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 343750327ULL, 10363469434198012350ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 343750327ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 343750333ULL, 10363468931329318263ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 343750333ULL, 10363468931329318263ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 343750333ULL, 10363468931329318263ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 343750333ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 343750361ULL, 10363466584608977972ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 343750361ULL, 10363466584608977972ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 343750361ULL, 10363466584608977972ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 343750361ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 343750367ULL, 10363466081740383363ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 343750367ULL, 10363466081740383363ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 343750367ULL, 10363466081740383363ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 343750367ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 343750397ULL, 10363463567397673633ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 343750397ULL, 10363463567397673633ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 343750397ULL, 10363463567397673633ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 343750397ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 343750417ULL, 10363461891169444295ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 343750417ULL, 10363461891169444295ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 343750417ULL, 10363461891169444295ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 343750417ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 343750423ULL, 10363461388301013529ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 343750423ULL, 10363461388301013529ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 343750423ULL, 10363461388301013529ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 343750423ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 343750441ULL, 10363459879695826558ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 343750441ULL, 10363459879695826558ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 343750441ULL, 10363459879695826558ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 343750441ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 343750487ULL, 10363456024372177644ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 343750487ULL, 10363456024372177644ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 343750487ULL, 10363456024372177644ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 343750487ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 343750499ULL, 10363455018635743275ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 343750499ULL, 10363455018635743275ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 343750499ULL, 10363455018635743275ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 343750499ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 343750513ULL, 10363453845276658592ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 343750513ULL, 10363453845276658592ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 343750513ULL, 10363453845276658592ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 343750513ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 343750529ULL, 10363452504294964557ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 343750529ULL, 10363452504294964557ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 343750529ULL, 10363452504294964557ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 343750529ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 343750541ULL, 10363451498558775953ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 343750541ULL, 10363451498558775953ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 343750541ULL, 10363451498558775953ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 343750541ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 343750577ULL, 10363448481350631451ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 343750577ULL, 10363448481350631451ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 343750577ULL, 10363448481350631451ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 343750577ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 343750639ULL, 10363443285049197336ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 343750639ULL, 10363443285049197336ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 343750639ULL, 10363443285049197336ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 343750639ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 343750651ULL, 10363442279313652401ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 343750651ULL, 10363442279313652401ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 343750651ULL, 10363442279313652401ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 343750651ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 343750657ULL, 10363441776445906266ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 343750657ULL, 10363441776445906266ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 343750657ULL, 10363441776445906266ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 343750657ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 343750699ULL, 10363438256372174848ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 343750699ULL, 10363438256372174848ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 343750699ULL, 10363438256372174848ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 343750699ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 343750733ULL, 10363435406789308001ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 343750733ULL, 10363435406789308001ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 343750733ULL, 10363435406789308001ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 343750733ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 343750747ULL, 10363434233431820790ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 343750747ULL, 10363434233431820790ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 343750747ULL, 10363434233431820790ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 343750747ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 343750751ULL, 10363433898186841998ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 343750751ULL, 10363433898186841998ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 343750751ULL, 10363433898186841998ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 343750751ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 343750769ULL, 10363432389584533987ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 343750769ULL, 10363432389584533987ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 343750769ULL, 10363432389584533987ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 343750769ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 343750783ULL, 10363431216227292540ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 343750783ULL, 10363431216227292540ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 343750783ULL, 10363431216227292540ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 343750783ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 343750789ULL, 10363430713359932606ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 343750789ULL, 10363430713359932606ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 343750789ULL, 10363430713359932606ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 343750789ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 343750807ULL, 10363429204757958132ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 343750807ULL, 10363429204757958132ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 343750807ULL, 10363429204757958132ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 343750807ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 343750811ULL, 10363428869513096371ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 343750811ULL, 10363428869513096371ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 343750811ULL, 10363428869513096371ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 343750811ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #11] Progress: %llu (31.25%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #11] Progress: %llu (31.25%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #11] Potential Solution: %llu, primes[0] = 343750007, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_11( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 343749989ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 343749990ULL; n <= 374999988ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 374999993ULL, 7962643924020470206ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 374999993ULL, 7962643924020470206ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 374999993ULL, 7962643924020470206ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 374999993ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 375000013ULL, 7962642515519825821ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 375000013ULL, 7962642515519825821ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 375000013ULL, 7962642515519825821ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 375000013ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 375000023ULL, 7962641811269559969ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 375000023ULL, 7962641811269559969ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 375000023ULL, 7962641811269559969ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 375000023ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 375000029ULL, 7962641388719418487ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 375000029ULL, 7962641388719418487ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 375000029ULL, 7962641388719418487ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 375000029ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 375000037ULL, 7962640825319250877ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 375000037ULL, 7962640825319250877ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 375000037ULL, 7962640825319250877ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 375000037ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 375000091ULL, 7962637022368748266ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 375000091ULL, 7962637022368748266ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 375000091ULL, 7962637022368748266ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 375000091ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 375000103ULL, 7962636177268785313ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 375000103ULL, 7962636177268785313ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 375000103ULL, 7962636177268785313ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 375000103ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 375000113ULL, 7962635473018857501ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 375000113ULL, 7962635473018857501ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 375000113ULL, 7962635473018857501ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 375000113ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 375000121ULL, 7962634909618942294ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 375000121ULL, 7962634909618942294ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 375000121ULL, 7962634909618942294ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 375000121ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 375000133ULL, 7962634064519114556ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 375000133ULL, 7962634064519114556ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 375000133ULL, 7962634064519114556ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 375000133ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 375000181ULL, 7962630684120344469ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 375000181ULL, 7962630684120344469ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 375000181ULL, 7962630684120344469ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 375000181ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 375000191ULL, 7962629979870709624ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 375000191ULL, 7962629979870709624ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 375000191ULL, 7962629979870709624ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 375000191ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 375000209ULL, 7962628712221461556ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 375000209ULL, 7962628712221461556ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 375000209ULL, 7962628712221461556ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 375000209ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 375000251ULL, 7962625754373689318ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 375000251ULL, 7962625754373689318ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 375000251ULL, 7962625754373689318ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 375000251ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 375000259ULL, 7962625190974188773ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 375000259ULL, 7962625190974188773ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 375000259ULL, 7962625190974188773ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 375000259ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 375000289ULL, 7962623078226275823ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 375000289ULL, 7962623078226275823ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 375000289ULL, 7962623078226275823ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 375000289ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 375000299ULL, 7962622373977046626ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 375000299ULL, 7962622373977046626ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 375000299ULL, 7962622373977046626ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 375000299ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 375000317ULL, 7962621106328528722ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 375000317ULL, 7962621106328528722ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 375000317ULL, 7962621106328528722ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 375000317ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 375000319ULL, 7962620965478700912ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 375000319ULL, 7962620965478700912ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 375000319ULL, 7962620965478700912ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 375000319ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 375000341ULL, 7962619416130694153ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 375000341ULL, 7962619416130694153ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 375000341ULL, 7962619416130694153ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 375000341ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 375000347ULL, 7962618993581269315ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 375000347ULL, 7962618993581269315ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 375000347ULL, 7962618993581269315ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 375000347ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 375000403ULL, 7962615049787289530ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 375000403ULL, 7962615049787289530ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 375000403ULL, 7962615049787289530ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 375000403ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 375000419ULL, 7962613922989225937ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 375000419ULL, 7962613922989225937ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 375000419ULL, 7962613922989225937ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 375000419ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 375000427ULL, 7962613359590230197ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 375000427ULL, 7962613359590230197ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 375000427ULL, 7962613359590230197ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 375000427ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 375000481ULL, 7962609556647637710ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 375000481ULL, 7962609556647637710ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 375000481ULL, 7962609556647637710ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 375000481ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 375000499ULL, 7962608289000350269ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 375000499ULL, 7962608289000350269ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 375000499ULL, 7962608289000350269ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 375000499ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 375000529ULL, 7962606176255141631ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 375000529ULL, 7962606176255141631ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 375000529ULL, 7962606176255141631ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 375000529ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 375000547ULL, 7962604908608178707ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 375000547ULL, 7962604908608178707ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 375000547ULL, 7962604908608178707ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 375000547ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 375000581ULL, 7962602514164247436ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 375000581ULL, 7962602514164247436ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 375000581ULL, 7962602514164247436ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 375000581ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 375000589ULL, 7962601950765738472ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 375000589ULL, 7962601950765738472ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 375000589ULL, 7962601950765738472ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 375000589ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 375000617ULL, 7962599978871146402ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 375000617ULL, 7962599978871146402ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 375000617ULL, 7962599978871146402ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 375000617ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 375000673ULL, 7962596035082845669ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 375000673ULL, 7962596035082845669ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 375000673ULL, 7962596035082845669ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 375000673ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 375000677ULL, 7962595753383726402ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 375000677ULL, 7962595753383726402ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 375000677ULL, 7962595753383726402ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 375000677ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 375000679ULL, 7962595612534169023ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 375000679ULL, 7962595612534169023ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 375000679ULL, 7962595612534169023ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 375000679ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 375000683ULL, 7962595330835058771ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 375000683ULL, 7962595330835058771ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 375000683ULL, 7962595330835058771ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 375000683ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 375000697ULL, 7962594344888220214ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 375000697ULL, 7962594344888220214ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 375000697ULL, 7962594344888220214ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 375000697ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 375000709ULL, 7962593499790988616ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 375000709ULL, 7962593499790988616ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 375000709ULL, 7962593499790988616ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 375000709ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 375000713ULL, 7962593218091923436ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 375000713ULL, 7962593218091923436ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 375000713ULL, 7962593218091923436ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 375000713ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 375000727ULL, 7962592232145242631ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 375000727ULL, 7962592232145242631ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 375000727ULL, 7962592232145242631ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 375000727ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 375000749ULL, 7962590682800607245ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 375000749ULL, 7962590682800607245ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 375000749ULL, 7962590682800607245ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 375000749ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #12] Progress: %llu (34.38%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #12] Progress: %llu (34.38%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #12] Potential Solution: %llu, primes[0] = 374999993, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_12( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 374999988ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 374999989ULL; n <= 406249987ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 406250041ULL, 5931149624233588281ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 406250041ULL, 5931149624233588281ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 406250041ULL, 5931149624233588281ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 406250041ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 406250059ULL, 5931148544105532071ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 406250059ULL, 5931148544105532071ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 406250059ULL, 5931148544105532071ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 406250059ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 406250063ULL, 5931148304077088134ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 406250063ULL, 5931148304077088134ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 406250063ULL, 5931148304077088134ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 406250063ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 406250087ULL, 5931146863906523772ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 406250087ULL, 5931146863906523772ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 406250087ULL, 5931146863906523772ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 406250087ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 406250113ULL, 5931145303721937736ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 406250113ULL, 5931145303721937736ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 406250113ULL, 5931145303721937736ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 406250113ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 406250123ULL, 5931144703650996282ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 406250123ULL, 5931144703650996282ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 406250123ULL, 5931144703650996282ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 406250123ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 406250129ULL, 5931144343608445590ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 406250129ULL, 5931144343608445590ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 406250129ULL, 5931144343608445590ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 406250129ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 406250147ULL, 5931143263480857324ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 406250147ULL, 5931143263480857324ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 406250147ULL, 5931143263480857324ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 406250147ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 406250149ULL, 5931143143466686759ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 406250149ULL, 5931143143466686759ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 406250149ULL, 5931143143466686759ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 406250149ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 406250167ULL, 5931142063339204844ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 406250167ULL, 5931142063339204844ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 406250167ULL, 5931142063339204844ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 406250167ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 406250171ULL, 5931141823310888528ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 406250171ULL, 5931141823310888528ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 406250171ULL, 5931141823310888528ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 406250171ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 406250189ULL, 5931140743183523599ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 406250189ULL, 5931140743183523599ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 406250189ULL, 5931140743183523599ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 406250189ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 406250203ULL, 5931139903084528162ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 406250203ULL, 5931139903084528162ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 406250203ULL, 5931139903084528162ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 406250203ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 406250209ULL, 5931139543042119271ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 406250209ULL, 5931139543042119271ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 406250209ULL, 5931139543042119271ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 406250209ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 406250213ULL, 5931139303013852586ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 406250213ULL, 5931139303013852586ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 406250213ULL, 5931139303013852586ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 406250213ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 406250233ULL, 5931138102872590059ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 406250233ULL, 5931138102872590059ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 406250233ULL, 5931138102872590059ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 406250233ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 406250239ULL, 5931137742830234343ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 406250239ULL, 5931137742830234343ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 406250239ULL, 5931137742830234343ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 406250239ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 406250287ULL, 5931134862491771484ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 406250287ULL, 5931134862491771484ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 406250287ULL, 5931134862491771484ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 406250287ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 406250291ULL, 5931134622463596969ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 406250291ULL, 5931134622463596969ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 406250291ULL, 5931134622463596969ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 406250291ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 406250333ULL, 5931132102168049939ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 406250333ULL, 5931132102168049939ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 406250333ULL, 5931132102168049939ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 406250333ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 406250359ULL, 5931130541985353404ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 406250359ULL, 5931130541985353404ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 406250359ULL, 5931130541985353404ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 406250359ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 406250401ULL, 5931128021690650091ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 406250401ULL, 5931128021690650091ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 406250401ULL, 5931128021690650091ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 406250401ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 406250407ULL, 5931127661648592158ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 406250407ULL, 5931127661648592158ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 406250407ULL, 5931127661648592158ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 406250407ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 406250447ULL, 5931125261368477723ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 406250447ULL, 5931125261368477723ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 406250447ULL, 5931125261368477723ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 406250447ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 406250461ULL, 5931124421270549339ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 406250461ULL, 5931124421270549339ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 406250461ULL, 5931124421270549339ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 406250461ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 406250489ULL, 5931122741074866278ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 406250489ULL, 5931122741074866278ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 406250489ULL, 5931122741074866278ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 406250489ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 406250501ULL, 5931122020991073009ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 406250501ULL, 5931122020991073009ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 406250501ULL, 5931122020991073009ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 406250501ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 406250543ULL, 5931119500698131573ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 406250543ULL, 5931119500698131573ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 406250543ULL, 5931119500698131573ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 406250543ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 406250549ULL, 5931119140656325337ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 406250549ULL, 5931119140656325337ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 406250549ULL, 5931119140656325337ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 406250549ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 406250561ULL, 5931118420572744770ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 406250561ULL, 5931118420572744770ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 406250561ULL, 5931118420572744770ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 406250561ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 406250573ULL, 5931117700489206742ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 406250573ULL, 5931117700489206742ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 406250573ULL, 5931117700489206742ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 406250573ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 406250599ULL, 5931116140308353620ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 406250599ULL, 5931116140308353620ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 406250599ULL, 5931116140308353620ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 406250599ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 406250617ULL, 5931115060183264598ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 406250617ULL, 5931115060183264598ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 406250617ULL, 5931115060183264598ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 406250617ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 406250623ULL, 5931114700141589528ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 406250623ULL, 5931114700141589528ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 406250623ULL, 5931114700141589528ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 406250623ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 406250641ULL, 5931113620016628127ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 406250641ULL, 5931113620016628127ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 406250641ULL, 5931113620016628127ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 406250641ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 406250651ULL, 5931113019947246485ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 406250651ULL, 5931113019947246485ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 406250651ULL, 5931113019947246485ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 406250651ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 406250659ULL, 5931112539891762441ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 406250659ULL, 5931112539891762441ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 406250659ULL, 5931112539891762441ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 406250659ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 406250701ULL, 5931110019600781402ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 406250701ULL, 5931110019600781402ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 406250701ULL, 5931110019600781402ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 406250701ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 406250729ULL, 5931108339407083552ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 406250729ULL, 5931108339407083552ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 406250729ULL, 5931108339407083552ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 406250729ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 406250731ULL, 5931108219393256854ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 406250731ULL, 5931108219393256854ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 406250731ULL, 5931108219393256854ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 406250731ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #13] Progress: %llu (37.50%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #13] Progress: %llu (37.50%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #13] Potential Solution: %llu, primes[0] = 406250041, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_13( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 406249987ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 406249988ULL; n <= 437499986ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 437499989ULL, 4189874356658093945ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 437499989ULL, 4189874356658093945ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 437499989ULL, 4189874356658093945ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 437499989ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 437500013ULL, 4189873114877919806ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 437500013ULL, 4189873114877919806ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 437500013ULL, 4189873114877919806ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 437500013ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 437500057ULL, 4189870838281287734ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 437500057ULL, 4189870838281287734ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 437500057ULL, 4189870838281287734ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 437500057ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 437500069ULL, 4189870217391376642ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 437500069ULL, 4189870217391376642ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 437500069ULL, 4189870217391376642ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 437500069ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 437500079ULL, 4189869699983143418ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 437500079ULL, 4189869699983143418ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 437500079ULL, 4189869699983143418ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 437500079ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 437500093ULL, 4189868975611656640ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 437500093ULL, 4189868975611656640ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 437500093ULL, 4189868975611656640ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 437500093ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 437500097ULL, 4189868768648383219ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 437500097ULL, 4189868768648383219ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 437500097ULL, 4189868768648383219ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 437500097ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 437500109ULL, 4189868147758585662ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 437500109ULL, 4189868147758585662ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 437500109ULL, 4189868147758585662ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 437500109ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 437500123ULL, 4189867423387198226ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 437500123ULL, 4189867423387198226ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 437500123ULL, 4189867423387198226ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 437500123ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 437500127ULL, 4189867216423953189ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 437500127ULL, 4189867216423953189ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 437500127ULL, 4189867216423953189ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 437500127ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 437500187ULL, 4189864111975731757ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 437500187ULL, 4189864111975731757ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 437500187ULL, 4189864111975731757ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 437500187ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 437500199ULL, 4189863491086189652ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 437500199ULL, 4189863491086189652ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 437500199ULL, 4189863491086189652ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 437500199ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 437500201ULL, 4189863387604602612ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 437500201ULL, 4189863387604602612ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 437500201ULL, 4189863387604602612ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 437500201ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 437500211ULL, 4189862870196681606ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 437500211ULL, 4189862870196681606ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 437500211ULL, 4189862870196681606ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 437500211ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 437500229ULL, 4189861938862483401ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 437500229ULL, 4189861938862483401ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 437500229ULL, 4189861938862483401ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 437500229ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 437500277ULL, 4189859455304996183ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 437500277ULL, 4189859455304996183ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 437500277ULL, 4189859455304996183ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 437500277ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 437500309ULL, 4189857799600307461ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 437500309ULL, 4189857799600307461ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 437500309ULL, 4189857799600307461ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 437500309ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 437500331ULL, 4189856661303474463ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 437500331ULL, 4189856661303474463ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 437500331ULL, 4189856661303474463ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 437500331ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 437500337ULL, 4189856350858903514ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 437500337ULL, 4189856350858903514ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 437500337ULL, 4189856350858903514ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 437500337ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 437500339ULL, 4189856247377381757ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 437500339ULL, 4189856247377381757ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 437500339ULL, 4189856247377381757ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 437500339ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 437500373ULL, 4189854488191656635ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 437500373ULL, 4189854488191656635ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 437500373ULL, 4189854488191656635ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 437500373ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 437500397ULL, 4189853246413662350ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 437500397ULL, 4189853246413662350ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 437500397ULL, 4189853246413662350ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 437500397ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 437500417ULL, 4189852211598771185ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 437500417ULL, 4189852211598771185ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 437500417ULL, 4189852211598771185ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 437500417ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 437500433ULL, 4189851383746926373ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 437500433ULL, 4189851383746926373ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 437500433ULL, 4189851383746926373ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 437500433ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 437500471ULL, 4189849417599037624ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 437500471ULL, 4189849417599037624ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 437500471ULL, 4189849417599037624ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 437500471ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 437500501ULL, 4189847865377261450ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 437500501ULL, 4189847865377261450ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 437500501ULL, 4189847865377261450ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 437500501ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 437500507ULL, 4189847554932931761ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 437500507ULL, 4189847554932931761ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 437500507ULL, 4189847554932931761ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 437500507ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 437500519ULL, 4189846934044297926ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 437500519ULL, 4189846934044297926ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 437500519ULL, 4189846934044297926ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 437500519ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 437500541ULL, 4189845795748557692ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 437500541ULL, 4189845795748557692ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 437500541ULL, 4189845795748557692ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 437500541ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 437500571ULL, 4189844243527278228ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 437500571ULL, 4189844243527278228ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 437500571ULL, 4189844243527278228ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 437500571ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 437500577ULL, 4189843933083047880ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 437500577ULL, 4189843933083047880ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 437500577ULL, 4189843933083047880ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 437500577ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 437500597ULL, 4189842898269008219ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 437500597ULL, 4189842898269008219ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 437500597ULL, 4189842898269008219ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 437500597ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 437500621ULL, 4189841656492285512ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 437500621ULL, 4189841656492285512ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 437500621ULL, 4189841656492285512ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 437500621ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 437500633ULL, 4189841035603975249ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 437500633ULL, 4189841035603975249ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 437500633ULL, 4189841035603975249ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 437500633ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 437500667ULL, 4189839276420614469ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 437500667ULL, 4189839276420614469ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 437500667ULL, 4189839276420614469ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 437500667ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 437500673ULL, 4189838965976520362ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 437500673ULL, 4189838965976520362ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 437500673ULL, 4189838965976520362ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 437500673ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 437500681ULL, 4189838552051074798ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 437500681ULL, 4189838552051074798ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 437500681ULL, 4189838552051074798ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 437500681ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 437500703ULL, 4189837413756177551ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 437500703ULL, 4189837413756177551ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 437500703ULL, 4189837413756177551ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 437500703ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 437500759ULL, 4189834516278773865ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 437500759ULL, 4189834516278773865ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 437500759ULL, 4189834516278773865ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 437500759ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 437500807ULL, 4189832032727303937ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 437500807ULL, 4189832032727303937ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 437500807ULL, 4189832032727303937ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 437500807ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #14] Progress: %llu (40.62%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #14] Progress: %llu (40.62%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #14] Potential Solution: %llu, primes[0] = 437499989, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_14( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 437499986ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 437499987ULL; n <= 468749985ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 468750001ULL, 2680765885022250496ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 468750001ULL, 2680765885022250496ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 468750001ULL, 2680765885022250496ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 468750001ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 468750041ULL, 2680764082141558377ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 468750041ULL, 2680764082141558377ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 468750041ULL, 2680764082141558377ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 468750041ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 468750043ULL, 2680763991997531848ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 468750043ULL, 2680763991997531848ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 468750043ULL, 2680763991997531848ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 468750043ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 468750049ULL, 2680763721565456876ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 468750049ULL, 2680763721565456876ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 468750049ULL, 2680763721565456876ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 468750049ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 468750059ULL, 2680763270845347307ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 468750059ULL, 2680763270845347307ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 468750059ULL, 2680763270845347307ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 468750059ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 468750071ULL, 2680762729981241209ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 468750071ULL, 2680762729981241209ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 468750071ULL, 2680762729981241209ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 468750071ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 468750109ULL, 2680761017245087925ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 468750109ULL, 2680761017245087925ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 468750109ULL, 2680761017245087925ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 468750109ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 468750127ULL, 2680760205949112240ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 468750127ULL, 2680760205949112240ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 468750127ULL, 2680760205949112240ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 468750127ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 468750131ULL, 2680760025661126104ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 468750131ULL, 2680760025661126104ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 468750131ULL, 2680760025661126104ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 468750131ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 468750137ULL, 2680759755229152671ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 468750137ULL, 2680759755229152671ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 468750137ULL, 2680759755229152671ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 468750137ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 468750193ULL, 2680757231197734468ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 468750193ULL, 2680757231197734468ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 468750193ULL, 2680757231197734468ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 468750193ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 468750199ULL, 2680756960765832572ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 468750199ULL, 2680756960765832572ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 468750199ULL, 2680756960765832572ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 468750199ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 468750239ULL, 2680755157886663525ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 468750239ULL, 2680755157886663525ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 468750239ULL, 2680755157886663525ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 468750239ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 468750251ULL, 2680754617022972811ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 468750251ULL, 2680754617022972811ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 468750251ULL, 2680754617022972811ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 468750251ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 468750257ULL, 2680754346591137838ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 468750257ULL, 2680754346591137838ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 468750257ULL, 2680754346591137838ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 468750257ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 468750259ULL, 2680754256447194386ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 468750259ULL, 2680754256447194386ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 468750259ULL, 2680754256447194386ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 468750259ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 468750277ULL, 2680753445151737929ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 468750277ULL, 2680753445151737929ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 468750277ULL, 2680753445151737929ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 468750277ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 468750283ULL, 2680753174719932957ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 468750283ULL, 2680753174719932957ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 468750283ULL, 2680753174719932957ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 468750283ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 468750377ULL, 2680748937955892226ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 468750377ULL, 2680748937955892226ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 468750377ULL, 2680748937955892226ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 468750377ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 468750379ULL, 2680748847811994928ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 468750379ULL, 2680748847811994928ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 468750379ULL, 2680748847811994928ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 468750379ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 468750389ULL, 2680748397092519972ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 468750389ULL, 2680748397092519972ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 468750389ULL, 2680748397092519972ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 468750389ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 468750407ULL, 2680747585797513514ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 468750407ULL, 2680747585797513514ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 468750407ULL, 2680747585797513514ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 468750407ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 468750427ULL, 2680746684358690525ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 468750427ULL, 2680746684358690525ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 468750427ULL, 2680746684358690525ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 468750427ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 468750433ULL, 2680746413927058629ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 468750433ULL, 2680746413927058629ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 468750433ULL, 2680746413927058629ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 468750433ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 468750437ULL, 2680746233639307877ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 468750437ULL, 2680746233639307877ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 468750437ULL, 2680746233639307877ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 468750437ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 468750479ULL, 2680744340618110754ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 468750479ULL, 2680744340618110754ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 468750479ULL, 2680744340618110754ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 468750479ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 468750493ULL, 2680743709611120431ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 468750493ULL, 2680743709611120431ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 468750493ULL, 2680743709611120431ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 468750493ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 468750509ULL, 2680742988460320500ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 468750509ULL, 2680742988460320500ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 468750509ULL, 2680742988460320500ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 468750509ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 468750553ULL, 2680741005295874536ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 468750553ULL, 2680741005295874536ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 468750553ULL, 2680741005295874536ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 468750553ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 468750587ULL, 2680739472850875836ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 468750587ULL, 2680739472850875836ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 468750587ULL, 2680739472850875836ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 468750587ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 468750613ULL, 2680738300981320946ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 468750613ULL, 2680738300981320946ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 468750613ULL, 2680738300981320946ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 468750613ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 468750641ULL, 2680737038968099526ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 468750641ULL, 2680737038968099526ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 468750641ULL, 2680737038968099526ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 468750641ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 468750643ULL, 2680736948824303765ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 468750643ULL, 2680736948824303765ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 468750643ULL, 2680736948824303765ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 468750643ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 468750647ULL, 2680736768536714551ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 468750647ULL, 2680736768536714551ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 468750647ULL, 2680736768536714551ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 468750647ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 468750677ULL, 2680735416379893522ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 468750677ULL, 2680735416379893522ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 468750677ULL, 2680735416379893522ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 468750677ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 468750703ULL, 2680734244510788629ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 468750703ULL, 2680734244510788629ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 468750703ULL, 2680734244510788629ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 468750703ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 468750713ULL, 2680733793791936748ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 468750713ULL, 2680733793791936748ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 468750713ULL, 2680733793791936748ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 468750713ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 468750727ULL, 2680733162785576420ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 468750727ULL, 2680733162785576420ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 468750727ULL, 2680733162785576420ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 468750727ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 468750769ULL, 2680731269766721591ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 468750769ULL, 2680731269766721591ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 468750769ULL, 2680731269766721591ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 468750769ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 468750773ULL, 2680731089479229299ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 468750773ULL, 2680731089479229299ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 468750773ULL, 2680731089479229299ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 468750773ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #15] Progress: %llu (43.75%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #15] Progress: %llu (43.75%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #15] Potential Solution: %llu, primes[0] = 468750001, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_15( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 468749985ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 468749986ULL; n <= 499999984ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 499999993ULL, 1360296832155105464ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 499999993ULL, 1360296832155105464ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 499999993ULL, 1360296832155105464ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 499999993ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 500000003ULL, 1360296436014289724ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 500000003ULL, 1360296436014289724ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 500000003ULL, 1360296436014289724ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 500000003ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 500000009ULL, 1360296198329807885ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 500000009ULL, 1360296198329807885ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 500000009ULL, 1360296198329807885ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 500000009ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 500000041ULL, 1360294930679334422ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 500000041ULL, 1360294930679334422ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 500000041ULL, 1360294930679334422ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 500000041ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 500000057ULL, 1360294296854158538ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 500000057ULL, 1360294296854158538ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 500000057ULL, 1360294296854158538ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 500000057ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 500000069ULL, 1360293821485303245ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 500000069ULL, 1360293821485303245ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 500000069ULL, 1360293821485303245ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 500000069ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 500000071ULL, 1360293742257162915ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 500000071ULL, 1360293742257162915ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 500000071ULL, 1360293742257162915ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 500000071ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 500000077ULL, 1360293504572745726ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 500000077ULL, 1360293504572745726ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 500000077ULL, 1360293504572745726ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 500000077ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 500000089ULL, 1360293029203928463ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 500000089ULL, 1360293029203928463ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 500000089ULL, 1360293029203928463ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 500000089ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 500000093ULL, 1360292870747661113ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 500000093ULL, 1360292870747661113ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 500000093ULL, 1360292870747661113ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 500000093ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 500000099ULL, 1360292633063264841ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 500000099ULL, 1360292633063264841ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 500000099ULL, 1360292633063264841ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 500000099ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 500000101ULL, 1360292553835134018ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 500000101ULL, 1360292553835134018ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 500000101ULL, 1360292553835134018ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 500000101ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 500000117ULL, 1360291920010110251ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 500000117ULL, 1360291920010110251ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 500000117ULL, 1360291920010110251ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 500000117ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 500000183ULL, 1360289305482315998ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 500000183ULL, 1360289305482315998ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 500000183ULL, 1360289305482315998ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 500000183ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 500000201ULL, 1360288592429400994ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 500000201ULL, 1360288592429400994ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 500000201ULL, 1360288592429400994ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 500000201ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 500000227ULL, 1360287562464169959ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 500000227ULL, 1360287562464169959ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 500000227ULL, 1360287562464169959ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 500000227ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 500000231ULL, 1360287404007990076ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 500000231ULL, 1360287404007990076ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 500000231ULL, 1360287404007990076ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 500000231ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 500000233ULL, 1360287324779901086ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 500000233ULL, 1360287324779901086ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 500000233ULL, 1360287324779901086ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 500000233ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 500000261ULL, 1360286215586721769ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 500000261ULL, 1360286215586721769ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 500000261ULL, 1360286215586721769ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 500000261ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 500000273ULL, 1360285740218254377ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 500000273ULL, 1360285740218254377ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 500000273ULL, 1360285740218254377ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 500000273ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 500000299ULL, 1360284710253319972ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 500000299ULL, 1360284710253319972ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 500000299ULL, 1360284710253319972ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 500000299ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 500000317ULL, 1360283997200735825ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 500000317ULL, 1360283997200735825ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 500000317ULL, 1360283997200735825ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 500000317ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 500000321ULL, 1360283838744612986ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 500000321ULL, 1360283838744612986ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 500000321ULL, 1360283838744612986ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 500000321ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 500000323ULL, 1360283759516552518ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 500000323ULL, 1360283759516552518ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 500000323ULL, 1360283759516552518ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 500000323ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 500000353ULL, 1360282571095721549ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 500000353ULL, 1360282571095721549ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 500000353ULL, 1360282571095721549ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 500000353ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 500000359ULL, 1360282333411572469ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 500000359ULL, 1360282333411572469ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 500000359ULL, 1360282333411572469ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 500000359ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 500000377ULL, 1360281620359159454ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 500000377ULL, 1360281620359159454ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 500000377ULL, 1360281620359159454ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 500000377ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 500000387ULL, 1360281224218952185ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 500000387ULL, 1360281224218952185ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 500000387ULL, 1360281224218952185ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 500000387ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 500000393ULL, 1360280986534835430ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 500000393ULL, 1360280986534835430ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 500000393ULL, 1360280986534835430ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 500000393ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 500000437ULL, 1360279243518153525ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 500000437ULL, 1360279243518153525ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 500000437ULL, 1360279243518153525ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 500000437ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 500000443ULL, 1360279005834084306ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 500000443ULL, 1360279005834084306ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 500000443ULL, 1360279005834084306ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 500000443ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 500000461ULL, 1360278292781910877ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 500000461ULL, 1360278292781910877ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 500000461ULL, 1360278292781910877ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 500000461ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 500000467ULL, 1360278055097864476ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 500000467ULL, 1360278055097864476ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 500000467ULL, 1360278055097864476ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 500000467ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 500000483ULL, 1360277421273768628ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 500000483ULL, 1360277421273768628ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 500000483ULL, 1360277421273768628ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 500000483ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 500000489ULL, 1360277183589743143ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 500000489ULL, 1360277183589743143ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 500000489ULL, 1360277183589743143ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 500000489ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 500000491ULL, 1360277104361735916ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 500000491ULL, 1360277104361735916ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 500000491ULL, 1360277104361735916ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 500000491ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 500000507ULL, 1360276470537700915ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 500000507ULL, 1360276470537700915ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 500000507ULL, 1360276470537700915ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 500000507ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 500000539ULL, 1360275202889752608ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 500000539ULL, 1360275202889752608ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 500000539ULL, 1360275202889752608ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 500000539ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 500000551ULL, 1360274727521813825ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 500000551ULL, 1360274727521813825ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 500000551ULL, 1360274727521813825ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 500000551ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 500000587ULL, 1360273301418134382ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 500000587ULL, 1360273301418134382ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 500000587ULL, 1360273301418134382ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 500000587ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #16] Progress: %llu (46.88%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #16] Progress: %llu (46.88%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #16] Potential Solution: %llu, primes[0] = 499999993, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_16( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 499999984ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 499999985ULL; n <= 531249983ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 531250003ULL, 195176412610035659ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 531250003ULL, 195176412610035659ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 531250003ULL, 195176412610035659ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 531250003ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 531250061ULL, 195174377351185672ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 531250061ULL, 195174377351185672ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 531250061ULL, 195174377351185672ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 531250061ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 531250073ULL, 195173956263203228ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 531250073ULL, 195173956263203228ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 531250073ULL, 195173956263203228ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 531250073ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 531250087ULL, 195173464993914420ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 531250087ULL, 195173464993914420ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 531250087ULL, 195173464993914420ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 531250087ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 531250091ULL, 195173324631265231ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 531250091ULL, 195173324631265231ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 531250091ULL, 195173324631265231ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 531250091ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 531250117ULL, 195172412274097022ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 531250117ULL, 195172412274097022ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 531250117ULL, 195172412274097022ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 531250117ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 531250121ULL, 195172271911463685ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 531250121ULL, 195172271911463685ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 531250121ULL, 195172271911463685ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 531250121ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 531250123ULL, 195172201730147810ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 531250123ULL, 195172201730147810ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 531250123ULL, 195172201730147810ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 531250123ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 531250129ULL, 195171991186203353ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 531250129ULL, 195171991186203353ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 531250129ULL, 195171991186203353ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 531250129ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 531250141ULL, 195171570098328708ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 531250141ULL, 195171570098328708ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 531250141ULL, 195171570098328708ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 531250141ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 531250151ULL, 195171219191781035ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 531250151ULL, 195171219191781035ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 531250151ULL, 195171219191781035ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 531250151ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 531250157ULL, 195171008647858772ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 531250157ULL, 195171008647858772ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 531250157ULL, 195171008647858772ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 531250157ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 531250171ULL, 195170517378725321ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 531250171ULL, 195170517378725321ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 531250171ULL, 195170517378725321ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 531250171ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 531250183ULL, 195170096290917257ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 531250183ULL, 195170096290917257ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 531250183ULL, 195170096290917257ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 531250183ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 531250189ULL, 195169885747020359ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 531250189ULL, 195169885747020359ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 531250189ULL, 195169885747020359ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 531250189ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 531250211ULL, 195169113752772420ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 531250211ULL, 195169113752772420ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 531250211ULL, 195169113752772420ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 531250211ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 531250231ULL, 195168411939875234ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 531250231ULL, 195168411939875234ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 531250231ULL, 195168411939875234ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 531250231ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 531250249ULL, 195167780308312946ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 531250249ULL, 195167780308312946ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 531250249ULL, 195167780308312946ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 531250249ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 531250301ULL, 195165955595151214ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 531250301ULL, 195165955595151214ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 531250301ULL, 195165955595151214ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 531250301ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 531250319ULL, 195165323963755379ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 531250319ULL, 195165323963755379ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 531250319ULL, 195165323963755379ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 531250319ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 531250331ULL, 195164902876181935ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 531250331ULL, 195164902876181935ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 531250331ULL, 195164902876181935ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 531250331ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 531250351ULL, 195164201063601802ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 531250351ULL, 195164201063601802ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 531250351ULL, 195164201063601802ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 531250351ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 531250361ULL, 195163850157331552ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 531250361ULL, 195163850157331552ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 531250361ULL, 195163850157331552ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 531250361ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 531250387ULL, 195162937801090726ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 531250387ULL, 195162937801090726ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 531250387ULL, 195162937801090726ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 531250387ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 531250397ULL, 195162586894868034ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 531250397ULL, 195162586894868034ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 531250397ULL, 195162586894868034ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 531250397ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 531250427ULL, 195161534176279220ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 531250427ULL, 195161534176279220ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 531250427ULL, 195161534176279220ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 531250427ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 531250439ULL, 195161113088876985ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 531250439ULL, 195161113088876985ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 531250439ULL, 195161113088876985ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 531250439ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 531250463ULL, 195160270914129585ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 531250463ULL, 195160270914129585ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 531250463ULL, 195160270914129585ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 531250463ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 531250487ULL, 195159428739458278ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 531250487ULL, 195159428739458278ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 531250487ULL, 195159428739458278ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 531250487ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 531250537ULL, 195157674209137451ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 531250537ULL, 195157674209137451ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 531250537ULL, 195157674209137451ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 531250537ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 531250543ULL, 195157463665521145ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 531250543ULL, 195157463665521145ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 531250543ULL, 195157463665521145ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 531250543ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 531250549ULL, 195157253121909595ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 531250549ULL, 195157253121909595ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 531250549ULL, 195157253121909595ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 531250549ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 531250553ULL, 195157112759504537ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 531250553ULL, 195157112759504537ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 531250553ULL, 195157112759504537ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 531250553ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 531250609ULL, 195155147686055667ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 531250609ULL, 195155147686055667ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 531250609ULL, 195155147686055667ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 531250609ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 531250637ULL, 195154165149486588ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 531250637ULL, 195154165149486588ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 531250637ULL, 195154165149486588ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 531250637ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 531250661ULL, 195153322975366954ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 531250661ULL, 195153322975366954ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 531250661ULL, 195153322975366954ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 531250661ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 531250669ULL, 195153042250677319ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 531250669ULL, 195153042250677319ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 531250669ULL, 195153042250677319ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 531250669ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 531250673ULL, 195152901888335672ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 531250673ULL, 195152901888335672ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 531250673ULL, 195152901888335672ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 531250673ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 531250703ULL, 195151849170840693ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 531250703ULL, 195151849170840693ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 531250703ULL, 195151849170840693ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 531250703ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 531250717ULL, 195151357902717058ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 531250717ULL, 195151357902717058ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 531250717ULL, 195151357902717058ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 531250717ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #17] Progress: %llu (50.00%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #17] Progress: %llu (50.00%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #17] Potential Solution: %llu, primes[0] = 531250003, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_17( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 531249983ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 531249984ULL; n <= 562499982ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 562499989ULL, 16765773287897160163ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 562499989ULL, 16765773287897160163ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 562499989ULL, 16765773287897160163ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 562499989ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 562500013ULL, 16765771785496454123ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 562500013ULL, 16765771785496454123ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 562500013ULL, 16765771785496454123ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 562500013ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 562500017ULL, 16765771535096348914ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 562500017ULL, 16765771535096348914ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 562500017ULL, 16765771535096348914ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 562500017ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 562500019ULL, 16765771409896297645ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 562500019ULL, 16765771409896297645ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 562500019ULL, 16765771409896297645ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 562500019ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 562500023ULL, 16765771159496197778ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 562500023ULL, 16765771159496197778ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 562500023ULL, 16765771159496197778ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 562500023ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 562500031ULL, 16765770658696008728ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 562500031ULL, 16765770658696008728ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 562500031ULL, 16765770658696008728ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 562500031ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 562500061ULL, 16765768780695426658ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 562500061ULL, 16765768780695426658ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 562500061ULL, 16765768780695426658ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 562500061ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 562500067ULL, 16765768405095334283ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 562500067ULL, 16765768405095334283ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 562500067ULL, 16765768405095334283ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 562500067ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 562500083ULL, 16765767403495127122ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 562500083ULL, 16765767403495127122ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 562500083ULL, 16765767403495127122ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 562500083ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 562500109ULL, 16765765775894912013ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 562500109ULL, 16765765775894912013ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 562500109ULL, 16765765775894912013ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 562500109ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 562500173ULL, 16765761769495023537ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 562500173ULL, 16765761769495023537ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 562500173ULL, 16765761769495023537ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 562500173ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 562500221ULL, 16765758764695705469ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 562500221ULL, 16765758764695705469ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 562500221ULL, 16765758764695705469ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 562500221ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 562500229ULL, 16765758263895868982ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 562500229ULL, 16765758263895868982ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 562500229ULL, 16765758263895868982ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 562500229ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 562500241ULL, 16765757512696140961ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 562500241ULL, 16765757512696140961ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 562500241ULL, 16765757512696140961ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 562500241ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 562500247ULL, 16765757137096288969ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 562500247ULL, 16765757137096288969ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 562500247ULL, 16765757137096288969ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 562500247ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 562500283ULL, 16765754883497345288ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 562500283ULL, 16765754883497345288ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 562500283ULL, 16765754883497345288ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 562500283ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 562500293ULL, 16765754257497689903ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 562500293ULL, 16765754257497689903ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 562500293ULL, 16765754257497689903ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 562500293ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 562500311ULL, 16765753130698366299ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 562500311ULL, 16765753130698366299ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 562500311ULL, 16765753130698366299ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 562500311ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 562500353ULL, 16765750501500225005ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 562500353ULL, 16765750501500225005ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 562500353ULL, 16765750501500225005ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 562500353ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 562500383ULL, 16765748623501793035ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 562500383ULL, 16765748623501793035ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 562500383ULL, 16765748623501793035ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 562500383ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 562500431ULL, 16765745618704718549ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 562500431ULL, 16765745618704718549ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 562500431ULL, 16765745618704718549ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 562500431ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 562500439ULL, 16765745117905255991ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 562500439ULL, 16765745117905255991ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 562500439ULL, 16765745117905255991ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 562500439ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 562500473ULL, 16765742989507699044ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 562500473ULL, 16765742989507699044ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 562500473ULL, 16765742989507699044ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 562500473ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 562500509ULL, 16765740735910566253ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 562500509ULL, 16765740735910566253ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 562500509ULL, 16765740735910566253ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 562500509ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 562500511ULL, 16765740610710734001ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 562500511ULL, 16765740610710734001ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 562500511ULL, 16765740610710734001ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 562500511ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 562500527ULL, 16765739609112108030ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 562500527ULL, 16765739609112108030ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 562500527ULL, 16765739609112108030ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 562500527ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 562500557ULL, 16765737731114837915ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 562500557ULL, 16765737731114837915ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 562500557ULL, 16765737731114837915ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 562500557ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 562500571ULL, 16765736854716180414ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 562500571ULL, 16765736854716180414ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 562500571ULL, 16765736854716180414ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 562500571ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 562500583ULL, 16765736103517365850ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 562500583ULL, 16765736103517365850ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 562500583ULL, 16765736103517365850ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 562500583ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 562500599ULL, 16765735101918996289ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 562500599ULL, 16765735101918996289ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 562500599ULL, 16765735101918996289ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 562500599ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 562500637ULL, 16765732723123096945ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 562500637ULL, 16765732723123096945ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 562500637ULL, 16765732723123096945ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 562500637ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 562500647ULL, 16765732097124229484ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 562500647ULL, 16765732097124229484ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 562500647ULL, 16765732097124229484ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 562500647ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 562500661ULL, 16765731220725852431ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 562500661ULL, 16765731220725852431ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 562500661ULL, 16765731220725852431ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 562500661ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 562500667ULL, 16765730845126561334ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 562500667ULL, 16765730845126561334ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 562500667ULL, 16765730845126561334ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 562500667ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 562500671ULL, 16765730594727038388ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 562500671ULL, 16765730594727038388ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 562500671ULL, 16765730594727038388ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 562500671ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 562500683ULL, 16765729843528490916ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 562500683ULL, 16765729843528490916ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 562500683ULL, 16765729843528490916ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 562500683ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 562500707ULL, 16765728341131492127ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 562500707ULL, 16765728341131492127ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 562500707ULL, 16765728341131492127ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 562500707ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 562500721ULL, 16765727464733302039ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 562500721ULL, 16765727464733302039ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 562500721ULL, 16765727464733302039ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 562500721ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 562500773ULL, 16765724209540406510ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 562500773ULL, 16765724209540406510ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 562500773ULL, 16765724209540406510ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 562500773ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 562500787ULL, 16765723333142422083ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 562500787ULL, 16765723333142422083ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 562500787ULL, 16765723333142422083ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 562500787ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #18] Progress: %llu (53.12%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #18] Progress: %llu (53.12%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #18] Potential Solution: %llu, primes[0] = 562499989, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_18( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 562499982ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 562499983ULL; n <= 593749981ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 593749997ULL, 14912482416637840164ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 593749997ULL, 14912482416637840164ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 593749997ULL, 14912482416637840164ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 593749997ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 593749999ULL, 14912482304269919165ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 593749999ULL, 14912482304269919165ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 593749999ULL, 14912482304269919165ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 593749999ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 593750011ULL, 14912481630062409069ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 593750011ULL, 14912481630062409069ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 593750011ULL, 14912481630062409069ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 593750011ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 593750029ULL, 14912480618751195023ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 593750029ULL, 14912480618751195023ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 593750029ULL, 14912480618751195023ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 593750029ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 593750077ULL, 14912477921921590674ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 593750077ULL, 14912477921921590674ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 593750077ULL, 14912477921921590674ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 593750077ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 593750081ULL, 14912477697185809993ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 593750081ULL, 14912477697185809993ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 593750081ULL, 14912477697185809993ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 593750081ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 593750093ULL, 14912477022978486121ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 593750093ULL, 14912477022978486121ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 593750093ULL, 14912477022978486121ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 593750093ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 593750111ULL, 14912476011667551409ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 593750111ULL, 14912476011667551409ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 593750111ULL, 14912476011667551409ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 593750111ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 593750119ULL, 14912475562196044553ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 593750119ULL, 14912475562196044553ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 593750119ULL, 14912475562196044553ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 593750119ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 593750123ULL, 14912475337460295667ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 593750123ULL, 14912475337460295667ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 593750123ULL, 14912475337460295667ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 593750123ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 593750167ULL, 14912472865367257769ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 593750167ULL, 14912472865367257769ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 593750167ULL, 14912472865367257769ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 593750167ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 593750173ULL, 14912472528263690080ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 593750173ULL, 14912472528263690080ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 593750173ULL, 14912472528263690080ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 593750173ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 593750197ULL, 14912471179849487453ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 593750197ULL, 14912471179849487453ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 593750197ULL, 14912471179849487453ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 593750197ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 593750207ULL, 14912470618010268531ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 593750207ULL, 14912470618010268531ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 593750207ULL, 14912470618010268531ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 593750207ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 593750219ULL, 14912469943803230806ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 593750219ULL, 14912469943803230806ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 593750219ULL, 14912469943803230806ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 593750219ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 593750231ULL, 14912469269596220333ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 593750231ULL, 14912469269596220333ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 593750231ULL, 14912469269596220333ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 593750231ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 593750237ULL, 14912468932492725316ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 593750237ULL, 14912468932492725316ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 593750237ULL, 14912468932492725316ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 593750237ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 593750291ULL, 14912465898561576750ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 593750291ULL, 14912465898561576750ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 593750291ULL, 14912465898561576750ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 593750291ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 593750299ULL, 14912465449090342415ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 593750299ULL, 14912465449090342415ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 593750299ULL, 14912465449090342415ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 593750299ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 593750327ULL, 14912463875941117626ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 593750327ULL, 14912463875941117626ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 593750327ULL, 14912463875941117626ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 593750327ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 593750369ULL, 14912461516217558641ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 593750369ULL, 14912461516217558641ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 593750369ULL, 14912461516217558641ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 593750369ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 593750419ULL, 14912458707023280840ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 593750419ULL, 14912458707023280840ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 593750419ULL, 14912458707023280840ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 593750419ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 593750429ULL, 14912458145184482056ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 593750429ULL, 14912458145184482056ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 593750429ULL, 14912458145184482056ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 593750429ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 593750461ULL, 14912456347300453121ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 593750461ULL, 14912456347300453121ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 593750461ULL, 14912456347300453121ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 593750461ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 593750473ULL, 14912455673093992232ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 593750473ULL, 14912455673093992232ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 593750473ULL, 14912455673093992232ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 593750473ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 593750489ULL, 14912454774152086773ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 593750489ULL, 14912454774152086773ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 593750489ULL, 14912454774152086773ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 593750489ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 593750501ULL, 14912454099945689473ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 593750501ULL, 14912454099945689473ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 593750501ULL, 14912454099945689473ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 593750501ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 593750503ULL, 14912453987577959240ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 593750503ULL, 14912453987577959240ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 593750503ULL, 14912453987577959240ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 593750503ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 593750603ULL, 14912448369192412726ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 593750603ULL, 14912448369192412726ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 593750603ULL, 14912448369192412726ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 593750603ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 593750609ULL, 14912448032089340117ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 593750609ULL, 14912448032089340117ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 593750609ULL, 14912448032089340117ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 593750609ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 593750621ULL, 14912447357883215338ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 593750621ULL, 14912447357883215338ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 593750621ULL, 14912447357883215338ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 593750621ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 593750623ULL, 14912447245515530524ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 593750623ULL, 14912447245515530524ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 593750623ULL, 14912447245515530524ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 593750623ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 593750639ULL, 14912446346574079267ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 593750639ULL, 14912446346574079267ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 593750639ULL, 14912446346574079267ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 593750639ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 593750693ULL, 14912443312647038957ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 593750693ULL, 14912443312647038957ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 593750693ULL, 14912443312647038957ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 593750693ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 593750699ULL, 14912442975544068544ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 593750699ULL, 14912442975544068544ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 593750699ULL, 14912442975544068544ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 593750699ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 593750723ULL, 14912441627132255019ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 593750723ULL, 14912441627132255019ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 593750723ULL, 14912441627132255019ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 593750723ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 593750743ULL, 14912440503455827018ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 593750743ULL, 14912440503455827018ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 593750743ULL, 14912440503455827018ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 593750743ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 593750747ULL, 14912440278720550502ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 593750747ULL, 14912440278720550502ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 593750747ULL, 14912440278720550502ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 593750747ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 593750753ULL, 14912439941617641406ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 593750753ULL, 14912439941617641406ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 593750753ULL, 14912439941617641406ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 593750753ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 593750761ULL, 14912439492147106542ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 593750761ULL, 14912439492147106542ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 593750761ULL, 14912439492147106542ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 593750761ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #19] Progress: %llu (56.25%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #19] Progress: %llu (56.25%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #19] Potential Solution: %llu, primes[0] = 593749997, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_19( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 593749981ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 593749982ULL; n <= 624999980ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 624999989ULL, 13244521489762457338ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 624999989ULL, 13244521489762457338ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 624999989ULL, 13244521489762457338ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 624999989ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 625000027ULL, 13244519562933594318ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 625000027ULL, 13244519562933594318ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 625000027ULL, 13244519562933594318ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 625000027ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 625000037ULL, 13244519055873406150ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 625000037ULL, 13244519055873406150ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 625000037ULL, 13244519055873406150ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 625000037ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 625000049ULL, 13244518447401201766ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 625000049ULL, 13244518447401201766ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 625000049ULL, 13244518447401201766ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 625000049ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 625000067ULL, 13244517534692939000ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 625000067ULL, 13244517534692939000ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 625000067ULL, 13244517534692939000ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 625000067ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 625000069ULL, 13244517433280913049ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 625000069ULL, 13244517433280913049ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 625000069ULL, 13244517433280913049ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 625000069ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 625000109ULL, 13244515405040530327ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 625000109ULL, 13244515405040530327ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 625000109ULL, 13244515405040530327ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 625000109ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 625000127ULL, 13244514492332442801ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 625000127ULL, 13244514492332442801ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 625000127ULL, 13244514492332442801ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 625000127ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 625000139ULL, 13244513883860413657ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 625000139ULL, 13244513883860413657ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 625000139ULL, 13244513883860413657ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 625000139ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 625000153ULL, 13244513173976409187ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 625000153ULL, 13244513173976409187ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 625000153ULL, 13244513173976409187ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 625000153ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 625000169ULL, 13244512362680443021ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 625000169ULL, 13244512362680443021ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 625000169ULL, 13244512362680443021ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 625000169ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 625000171ULL, 13244512261268450171ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 625000171ULL, 13244512261268450171ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 625000171ULL, 13244512261268450171ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 625000171ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 625000237ULL, 13244508914673050226ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 625000237ULL, 13244508914673050226ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 625000237ULL, 13244508914673050226ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 625000237ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 625000241ULL, 13244508711849109309ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 625000241ULL, 13244508711849109309ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 625000241ULL, 13244508711849109309ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 625000241ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 625000253ULL, 13244508103377302136ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 625000253ULL, 13244508103377302136ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 625000253ULL, 13244508103377302136ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 625000253ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 625000261ULL, 13244507697729443668ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 625000261ULL, 13244507697729443668ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 625000261ULL, 13244507697729443668ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 625000261ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 625000279ULL, 13244506785021800083ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 625000279ULL, 13244506785021800083ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 625000279ULL, 13244506785021800083ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 625000279ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 625000297ULL, 13244505872314209070ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 625000297ULL, 13244505872314209070ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 625000297ULL, 13244505872314209070ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 625000297ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 625000309ULL, 13244505263842510935ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 625000309ULL, 13244505263842510935ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 625000309ULL, 13244505263842510935ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 625000309ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 625000319ULL, 13244504756782780338ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 625000319ULL, 13244504756782780338ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 625000319ULL, 13244504756782780338ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 625000319ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 625000361ULL, 13244502627132089015ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 625000361ULL, 13244502627132089015ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 625000361ULL, 13244502627132089015ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 625000361ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 625000381ULL, 13244501613012812795ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 625000381ULL, 13244501613012812795ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 625000381ULL, 13244501613012812795ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 625000381ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 625000403ULL, 13244500497481683917ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 625000403ULL, 13244500497481683917ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 625000403ULL, 13244500497481683917ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 625000403ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 625000429ULL, 13244499179126814674ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 625000429ULL, 13244499179126814674ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 625000429ULL, 13244499179126814674ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 625000429ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 625000447ULL, 13244498266419661761ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 625000447ULL, 13244498266419661761ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 625000447ULL, 13244498266419661761ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 625000447ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 625000451ULL, 13244498063595857141ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 625000451ULL, 13244498063595857141ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 625000451ULL, 13244498063595857141ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 625000451ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 625000469ULL, 13244497150888768482ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 625000469ULL, 13244497150888768482ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 625000469ULL, 13244497150888768482ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 625000469ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 625000477ULL, 13244496745241190398ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 625000477ULL, 13244496745241190398ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 625000477ULL, 13244496745241190398ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 625000477ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 625000487ULL, 13244496238181732395ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 625000487ULL, 13244496238181732395ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 625000487ULL, 13244496238181732395ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 625000487ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 625000507ULL, 13244495224062865068ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 625000507ULL, 13244495224062865068ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 625000507ULL, 13244495224062865068ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 625000507ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 625000531ULL, 13244494007120309948ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 625000531ULL, 13244494007120309948ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 625000531ULL, 13244494007120309948ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 625000531ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 625000549ULL, 13244493094413454942ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 625000549ULL, 13244493094413454942ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 625000549ULL, 13244493094413454942ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 625000549ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 625000561ULL, 13244492485942247477ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 625000561ULL, 13244492485942247477ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 625000561ULL, 13244492485942247477ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 625000561ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 625000567ULL, 13244492181706652507ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 625000567ULL, 13244492181706652507ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 625000567ULL, 13244492181706652507ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 625000567ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 625000583ULL, 13244491370411761145ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 625000583ULL, 13244491370411761145ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 625000583ULL, 13244491370411761145ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 625000583ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 625000603ULL, 13244490356293205354ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 625000603ULL, 13244490356293205354ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 625000603ULL, 13244490356293205354ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 625000603ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 625000667ULL, 13244487111114262977ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 625000667ULL, 13244487111114262977ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 625000667ULL, 13244487111114262977ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 625000667ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 625000681ULL, 13244486401231457925ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 625000681ULL, 13244486401231457925ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 625000681ULL, 13244486401231457925ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 625000681ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 625000709ULL, 13244484981465943230ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 625000709ULL, 13244484981465943230ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 625000709ULL, 13244484981465943230ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 625000709ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 625000711ULL, 13244484880054125619ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 625000711ULL, 13244484880054125619ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 625000711ULL, 13244484880054125619ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 625000711ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #20] Progress: %llu (59.38%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #20] Progress: %llu (59.38%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #20] Potential Solution: %llu, primes[0] = 624999989, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_20( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 624999980ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 624999981ULL; n <= 656249979ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 656249983ULL, 11735413856443239562ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 656249983ULL, 11735413856443239562ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 656249983ULL, 11735413856443239562ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 656249983ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 656250029ULL, 11735411740817786710ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 656250029ULL, 11735411740817786710ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 656250029ULL, 11735411740817786710ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 656250029ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 656250073ULL, 11735409717176326728ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 656250073ULL, 11735409717176326728ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 656250073ULL, 11735409717176326728ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 656250073ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 656250079ULL, 11735409441225239574ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 656250079ULL, 11735409441225239574ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 656250079ULL, 11735409441225239574ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 656250079ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 656250083ULL, 11735409257257850941ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 656250083ULL, 11735409257257850941ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 656250083ULL, 11735409257257850941ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 656250083ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 656250103ULL, 11735408337420941415ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 656250103ULL, 11735408337420941415ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 656250103ULL, 11735408337420941415ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 656250103ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 656250107ULL, 11735408153453566238ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 656250107ULL, 11735408153453566238ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 656250107ULL, 11735408153453566238ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 656250107ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 656250121ULL, 11735407509567770779ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 656250121ULL, 11735407509567770779ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 656250121ULL, 11735407509567770779ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 656250121ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 656250149ULL, 11735406221796262278ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 656250149ULL, 11735406221796262278ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 656250149ULL, 11735406221796262278ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 656250149ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 656250163ULL, 11735405577910549236ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 656250163ULL, 11735405577910549236ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 656250163ULL, 11735405577910549236ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 656250163ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 656250173ULL, 11735405117992199597ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 656250173ULL, 11735405117992199597ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 656250173ULL, 11735405117992199597ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 656250173ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 656250197ULL, 11735404014188217652ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 656250197ULL, 11735404014188217652ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 656250197ULL, 11735404014188217652ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 656250197ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 656250209ULL, 11735403462286256955ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 656250209ULL, 11735403462286256955ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 656250209ULL, 11735403462286256955ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 656250209ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 656250233ULL, 11735402358482396113ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 656250233ULL, 11735402358482396113ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 656250233ULL, 11735402358482396113ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 656250233ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 656250247ULL, 11735401714596847906ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 656250247ULL, 11735401714596847906ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 656250247ULL, 11735401714596847906ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 656250247ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 656250281ULL, 11735400150874916635ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 656250281ULL, 11735400150874916635ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 656250281ULL, 11735400150874916635ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 656250281ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 656250307ULL, 11735398955087666757ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 656250307ULL, 11735398955087666757ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 656250307ULL, 11735398955087666757ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 656250307ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 656250341ULL, 11735397391366021424ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 656250341ULL, 11735397391366021424ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 656250341ULL, 11735397391366021424ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 656250341ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 656250347ULL, 11735397115415159655ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 656250347ULL, 11735397115415159655ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 656250347ULL, 11735397115415159655ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 656250347ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 656250401ULL, 11735394631857630808ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 656250401ULL, 11735394631857630808ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 656250401ULL, 11735394631857630808ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 656250401ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 656250403ULL, 11735394539874026478ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 656250403ULL, 11735394539874026478ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 656250403ULL, 11735394539874026478ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 656250403ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 656250407ULL, 11735394355906819499ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 656250407ULL, 11735394355906819499ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 656250407ULL, 11735394355906819499ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 656250407ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 656250409ULL, 11735394263923216851ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 656250409ULL, 11735394263923216851ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 656250409ULL, 11735394263923216851ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 656250409ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 656250437ULL, 11735392976152838644ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 656250437ULL, 11735392976152838644ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 656250437ULL, 11735392976152838644ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 656250437ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 656250457ULL, 11735392056316921490ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 656250457ULL, 11735392056316921490ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 656250457ULL, 11735392056316921490ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 656250457ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 656250499ULL, 11735390124661677962ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 656250499ULL, 11735390124661677962ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 656250499ULL, 11735390124661677962ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 656250499ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 656250521ULL, 11735389112842363362ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 656250521ULL, 11735389112842363362ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 656250521ULL, 11735389112842363362ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 656250521ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 656250527ULL, 11735388836891652973ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 656250527ULL, 11735388836891652973ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 656250527ULL, 11735388836891652973ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 656250527ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 656250533ULL, 11735388560940947629ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 656250533ULL, 11735388560940947629ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 656250533ULL, 11735388560940947629ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 656250533ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 656250571ULL, 11735386813253264296ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 656250571ULL, 11735386813253264296ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 656250571ULL, 11735386813253264296ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 656250571ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 656250583ULL, 11735386261351932662ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 656250583ULL, 11735386261351932662ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 656250583ULL, 11735386261351932662ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 656250583ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 656250587ULL, 11735386077384826602ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 656250587ULL, 11735386077384826602ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 656250587ULL, 11735386077384826602ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 656250587ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 656250601ULL, 11735385433499973055ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 656250601ULL, 11735385433499973055ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 656250601ULL, 11735385433499973055ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 656250601ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 656250607ULL, 11735385157549329944ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 656250607ULL, 11735385157549329944ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 656250607ULL, 11735385157549329944ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 656250607ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 656250653ULL, 11735383041927900402ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 656250653ULL, 11735383041927900402ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 656250653ULL, 11735383041927900402ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 656250653ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 656250691ULL, 11735381294240856223ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 656250691ULL, 11735381294240856223ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 656250691ULL, 11735381294240856223ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 656250691ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 656250701ULL, 11735380834323246658ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 656250701ULL, 11735380834323246658ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 656250701ULL, 11735380834323246658ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 656250701ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 656250719ULL, 11735380006471584762ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 656250719ULL, 11735380006471584762ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 656250719ULL, 11735380006471584762ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 656250719ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 656250757ULL, 11735378258784892117ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 656250757ULL, 11735378258784892117ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 656250757ULL, 11735378258784892117ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 656250757ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 656250769ULL, 11735377706883873331ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 656250769ULL, 11735377706883873331ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 656250769ULL, 11735377706883873331ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 656250769ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #21] Progress: %llu (62.50%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #21] Progress: %llu (62.50%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #21] Potential Solution: %llu, primes[0] = 656249983, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_21( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 656249979ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 656249980ULL; n <= 687499978ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 687499993ULL, 10363497133909027077ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 687499993ULL, 10363497133909027077ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 687499993ULL, 10363497133909027077ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 687499993ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 687500003ULL, 10363496714850974977ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 687500003ULL, 10363496714850974977ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 687500003ULL, 10363496714850974977ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 687500003ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 687500053ULL, 10363494619560897336ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 687500053ULL, 10363494619560897336ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 687500053ULL, 10363494619560897336ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 687500053ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 687500059ULL, 10363494368126108500ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 687500059ULL, 10363494368126108500ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 687500059ULL, 10363494368126108500ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 687500059ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 687500069ULL, 10363493949068136859ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 687500069ULL, 10363493949068136859ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 687500069ULL, 10363493949068136859ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 687500069ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 687500081ULL, 10363493446198586981ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 687500081ULL, 10363493446198586981ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 687500081ULL, 10363493446198586981ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 687500081ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 687500119ULL, 10363491853778461514ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 687500119ULL, 10363491853778461514ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 687500119ULL, 10363491853778461514ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 687500119ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 687500137ULL, 10363491099474252998ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 687500137ULL, 10363491099474252998ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 687500137ULL, 10363491099474252998ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 687500137ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 687500167ULL, 10363489842300659910ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 687500167ULL, 10363489842300659910ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 687500167ULL, 10363489842300659910ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 687500167ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 687500173ULL, 10363489590865954459ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 687500173ULL, 10363489590865954459ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 687500173ULL, 10363489590865954459ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 687500173ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 687500189ULL, 10363488920373428044ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 687500189ULL, 10363488920373428044ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 687500189ULL, 10363488920373428044ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 687500189ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 687500197ULL, 10363488585127176540ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 687500197ULL, 10363488585127176540ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 687500197ULL, 10363488585127176540ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 687500197ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 687500201ULL, 10363488417504053714ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 687500201ULL, 10363488417504053714ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 687500201ULL, 10363488417504053714ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 687500201ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 687500221ULL, 10363487579388468840ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 687500221ULL, 10363487579388468840ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 687500221ULL, 10363487579388468840ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 687500221ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 687500227ULL, 10363487327953802886ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 687500227ULL, 10363487327953802886ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 687500227ULL, 10363487327953802886ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 687500227ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 687500251ULL, 10363486322215182960ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 687500251ULL, 10363486322215182960ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 687500251ULL, 10363486322215182960ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 687500251ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 687500257ULL, 10363486070780538950ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 687500257ULL, 10363486070780538950ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 687500257ULL, 10363486070780538950ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 687500257ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 687500263ULL, 10363485819345899329ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 687500263ULL, 10363485819345899329ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 687500263ULL, 10363485819345899329ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 687500263ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 687500267ULL, 10363485651722808686ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 687500267ULL, 10363485651722808686ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 687500267ULL, 10363485651722808686ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 687500267ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 687500309ULL, 10363483891680474700ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 687500309ULL, 10363483891680474700ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 687500309ULL, 10363483891680474700ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 687500309ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 687500311ULL, 10363483807868940351ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 687500311ULL, 10363483807868940351ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 687500311ULL, 10363483807868940351ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 687500311ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 687500323ULL, 10363483304999744493ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 687500323ULL, 10363483304999744493ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 687500323ULL, 10363483304999744493ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 687500323ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 687500339ULL, 10363482634507510657ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 687500339ULL, 10363482634507510657ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 687500339ULL, 10363482634507510657ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 687500339ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 687500353ULL, 10363482047826831650ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 687500353ULL, 10363482047826831650ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 687500353ULL, 10363482047826831650ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 687500353ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 687500393ULL, 10363480371596451864ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 687500393ULL, 10363480371596451864ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 687500393ULL, 10363480371596451864ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 687500393ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 687500447ULL, 10363478108685748555ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 687500447ULL, 10363478108685748555ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 687500447ULL, 10363478108685748555ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 687500447ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 687500461ULL, 10363477522005253873ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 687500461ULL, 10363477522005253873ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 687500461ULL, 10363477522005253873ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 687500461ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 687500479ULL, 10363476767701795820ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 687500479ULL, 10363476767701795820ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 687500479ULL, 10363476767701795820ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 687500479ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 687500543ULL, 10363474085734264850ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 687500543ULL, 10363474085734264850ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 687500543ULL, 10363474085734264850ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 687500543ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 687500549ULL, 10363473834299834422ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 687500549ULL, 10363473834299834422ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 687500549ULL, 10363473834299834422ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 687500549ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 687500551ULL, 10363473750488358588ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 687500551ULL, 10363473750488358588ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 687500551ULL, 10363473750488358588ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 687500551ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 687500563ULL, 10363473247619513824ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 687500563ULL, 10363473247619513824ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 687500563ULL, 10363473247619513824ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 687500563ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 687500591ULL, 10363472074258944309ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 687500591ULL, 10363472074258944309ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 687500591ULL, 10363472074258944309ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 687500591ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 687500603ULL, 10363471571390158061ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 687500603ULL, 10363471571390158061ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 687500603ULL, 10363471571390158061ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 687500603ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 687500629ULL, 10363470481841181412ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 687500629ULL, 10363470481841181412ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 687500629ULL, 10363470481841181412ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 687500629ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 687500677ULL, 10363468470366364106ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 687500677ULL, 10363468470366364106ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 687500677ULL, 10363468470366364106ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 687500677ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 687500711ULL, 10363467045571871786ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 687500711ULL, 10363467045571871786ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 687500711ULL, 10363467045571871786ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 687500711ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 687500717ULL, 10363466794137564241ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 687500717ULL, 10363466794137564241ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 687500717ULL, 10363466794137564241ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 687500717ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 687500719ULL, 10363466710326129368ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 687500719ULL, 10363466710326129368ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 687500719ULL, 10363466710326129368ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 687500719ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 687500741ULL, 10363465788400377947ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 687500741ULL, 10363465788400377947ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 687500741ULL, 10363465788400377947ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 687500741ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #22] Progress: %llu (65.62%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #22] Progress: %llu (65.62%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #22] Potential Solution: %llu, primes[0] = 687499993, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_22( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 687499978ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 687499979ULL; n <= 718749977ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 718750001ULL, 9110877632041352999ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 718750001ULL, 9110877632041352999ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 718750001ULL, 9110877632041352999ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 718750001ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 718750003ULL, 9110877555359275529ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 718750003ULL, 9110877555359275529ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 718750003ULL, 9110877555359275529ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 718750003ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 718750061ULL, 9110875331579214541ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 718750061ULL, 9110875331579214541ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 718750061ULL, 9110875331579214541ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 718750061ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 718750063ULL, 9110875254897149874ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 718750063ULL, 9110875254897149874ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 718750063ULL, 9110875254897149874ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 718750063ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 718750079ULL, 9110874641440647899ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 718750079ULL, 9110874641440647899ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 718750079ULL, 9110874641440647899ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 718750079ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 718750093ULL, 9110874104666231075ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 718750093ULL, 9110874104666231075ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 718750093ULL, 9110874104666231075ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 718750093ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 718750103ULL, 9110873721255946146ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 718750103ULL, 9110873721255946146ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 718750103ULL, 9110873721255946146ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 718750103ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 718750121ULL, 9110873031117460160ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 718750121ULL, 9110873031117460160ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 718750121ULL, 9110873031117460160ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 718750121ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 718750133ULL, 9110872571025155373ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 718750133ULL, 9110872571025155373ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 718750133ULL, 9110872571025155373ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 718750133ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 718750139ULL, 9110872340979008741ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 718750139ULL, 9110872340979008741ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 718750139ULL, 9110872340979008741ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 718750139ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 718750141ULL, 9110872264296960717ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 718750141ULL, 9110872264296960717ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 718750141ULL, 9110872264296960717ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 718750141ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 718750169ULL, 9110871190748333190ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 718750169ULL, 9110871190748333190ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 718750169ULL, 9110871190748333190ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 718750169ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 718750177ULL, 9110870884020169260ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 718750177ULL, 9110870884020169260ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 718750177ULL, 9110870884020169260ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 718750177ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 718750187ULL, 9110870500609973950ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 718750187ULL, 9110870500609973950ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 718750187ULL, 9110870500609973950ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 718750187ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 718750217ULL, 9110869350379452030ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 718750217ULL, 9110869350379452030ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 718750217ULL, 9110869350379452030ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 718750217ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 718750229ULL, 9110868890287270148ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 718750229ULL, 9110868890287270148ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 718750229ULL, 9110868890287270148ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 718750229ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 718750237ULL, 9110868583559157428ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 718750237ULL, 9110868583559157428ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 718750237ULL, 9110868583559157428ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 718750237ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 718750303ULL, 9110866053052488021ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 718750303ULL, 9110866053052488021ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 718750303ULL, 9110866053052488021ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 718750303ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 718750313ULL, 9110865669642427137ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 718750313ULL, 9110865669642427137ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 718750313ULL, 9110865669642427137ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 718750313ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 718750379ULL, 9110863139136292877ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 718750379ULL, 9110863139136292877ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 718750379ULL, 9110863139136292877ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 718750379ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 718750393ULL, 9110862602362324143ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 718750393ULL, 9110862602362324143ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 718750393ULL, 9110862602362324143ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 718750393ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 718750421ULL, 9110861528814449407ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 718750421ULL, 9110861528814449407ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 718750421ULL, 9110861528814449407ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 718750421ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 718750423ULL, 9110861452132461555ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 718750423ULL, 9110861452132461555ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 718750423ULL, 9110861452132461555ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 718750423ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 718750427ULL, 9110861298768487132ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 718750427ULL, 9110861298768487132ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 718750427ULL, 9110861298768487132ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 718750427ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 718750433ULL, 9110861068722528697ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 718750433ULL, 9110861068722528697ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 718750433ULL, 9110861068722528697ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 718750433ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 718750451ULL, 9110860378584676437ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 718750451ULL, 9110860378584676437ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 718750451ULL, 9110860378584676437ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 718750451ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 718750477ULL, 9110859381718950866ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 718750477ULL, 9110859381718950866ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 718750477ULL, 9110859381718950866ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 718750477ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 718750489ULL, 9110858921627101850ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 718750489ULL, 9110858921627101850ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 718750489ULL, 9110858921627101850ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 718750489ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 718750499ULL, 9110858538217239405ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 718750499ULL, 9110858538217239405ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 718750499ULL, 9110858538217239405ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 718750499ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 718750577ULL, 9110855547620678492ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 718750577ULL, 9110855547620678492ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 718750577ULL, 9110855547620678492ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 718750577ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 718750579ULL, 9110855470938723927ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 718750579ULL, 9110855470938723927ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 718750579ULL, 9110855470938723927ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 718750579ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 718750589ULL, 9110855087528957502ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 718750589ULL, 9110855087528957502ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 718750589ULL, 9110855087528957502ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 718750589ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 718750597ULL, 9110854780801152043ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 718750597ULL, 9110854780801152043ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 718750597ULL, 9110854780801152043ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 718750597ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 718750603ULL, 9110854550755302430ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 718750603ULL, 9110854550755302430ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 718750603ULL, 9110854550755302430ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 718750603ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 718750609ULL, 9110854320709456658ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 718750609ULL, 9110854320709456658ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 718750609ULL, 9110854320709456658ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 718750609ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 718750699ULL, 9110850870022230964ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 718750699ULL, 9110850870022230964ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 718750699ULL, 9110850870022230964ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 718750699ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 718750729ULL, 9110849719793347771ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 718750729ULL, 9110849719793347771ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 718750729ULL, 9110849719793347771ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 718750729ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 718750733ULL, 9110849566429503933ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 718750733ULL, 9110849566429503933ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 718750733ULL, 9110849566429503933ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 718750733ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 718750751ULL, 9110848876292227788ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 718750751ULL, 9110848876292227788ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 718750751ULL, 9110848876292227788ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 718750751ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 718750777ULL, 9110847879427334381ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 718750777ULL, 9110847879427334381ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 718750777ULL, 9110847879427334381ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 718750777ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #23] Progress: %llu (68.75%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #23] Progress: %llu (68.75%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #23] Potential Solution: %llu, primes[0] = 718750001, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_23( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 718749977ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 718749978ULL; n <= 749999976ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 749999989ULL, 7962643818382916665ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 749999989ULL, 7962643818382916665ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 749999989ULL, 7962643818382916665ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 749999989ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 750000007ULL, 7962643184557613171ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 750000007ULL, 7962643184557613171ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 750000007ULL, 7962643184557613171ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 750000007ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 750000073ULL, 7962640860531760649ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 750000073ULL, 7962640860531760649ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 750000073ULL, 7962640860531760649ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 750000073ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 750000089ULL, 7962640297131615575ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 750000089ULL, 7962640297131615575ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 750000089ULL, 7962640297131615575ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 750000089ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 750000137ULL, 7962638606931324584ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 750000137ULL, 7962638606931324584ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 750000137ULL, 7962638606931324584ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 750000137ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 750000157ULL, 7962637902681267190ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 750000157ULL, 7962637902681267190ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 750000157ULL, 7962637902681267190ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 750000157ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 750000161ULL, 7962637761831260219ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 750000161ULL, 7962637761831260219ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 750000161ULL, 7962637761831260219ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 750000161ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 750000221ULL, 7962635649081335932ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 750000221ULL, 7962635649081335932ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 750000221ULL, 7962635649081335932ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 750000221ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 750000247ULL, 7962634733556473722ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 750000247ULL, 7962634733556473722ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 750000247ULL, 7962634733556473722ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 750000247ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 750000257ULL, 7962634381431543620ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 750000257ULL, 7962634381431543620ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 750000257ULL, 7962634381431543620ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 750000257ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 750000259ULL, 7962634311006558726ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 750000259ULL, 7962634311006558726ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 750000259ULL, 7962634311006558726ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 750000259ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 750000263ULL, 7962634170156590066ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 750000263ULL, 7962634170156590066ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 750000263ULL, 7962634170156590066ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 750000263ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 750000269ULL, 7962633958881639892ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 750000269ULL, 7962633958881639892ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 750000269ULL, 7962633958881639892ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 750000269ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 750000287ULL, 7962633325056809653ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 750000287ULL, 7962633325056809653ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 750000287ULL, 7962633325056809653ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 750000287ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 750000289ULL, 7962633254631830394ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 750000289ULL, 7962633254631830394ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 750000289ULL, 7962633254631830394ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 750000289ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 750000301ULL, 7962632832081962724ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 750000301ULL, 7962632832081962724ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 750000301ULL, 7962632832081962724ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 750000301ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 750000337ULL, 7962631564432440843ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 750000337ULL, 7962631564432440843ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 750000337ULL, 7962631564432440843ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 750000337ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 750000341ULL, 7962631423582501479ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 750000341ULL, 7962631423582501479ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 750000341ULL, 7962631423582501479ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 750000341ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 750000347ULL, 7962631212307595251ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 750000347ULL, 7962631212307595251ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 750000347ULL, 7962631212307595251ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 750000347ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 750000401ULL, 7962629310833591312ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 750000401ULL, 7962629310833591312ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 750000401ULL, 7962629310833591312ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 750000401ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 750000421ULL, 7962628606584029710ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 750000421ULL, 7962628606584029710ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 750000421ULL, 7962628606584029710ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 750000421ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 750000431ULL, 7962628254459262994ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 750000431ULL, 7962628254459262994ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 750000431ULL, 7962628254459262994ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 750000431ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 750000443ULL, 7962627831909555329ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 750000443ULL, 7962627831909555329ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 750000443ULL, 7962627831909555329ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 750000443ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 750000451ULL, 7962627550209757731ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 750000451ULL, 7962627550209757731ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 750000451ULL, 7962627550209757731ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 750000451ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 750000457ULL, 7962627338934913477ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 750000457ULL, 7962627338934913477ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 750000457ULL, 7962627338934913477ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 750000457ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 750000481ULL, 7962626493835570262ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 750000481ULL, 7962626493835570262ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 750000481ULL, 7962626493835570262ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 750000481ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 750000487ULL, 7962626282560742910ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 750000487ULL, 7962626282560742910ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 750000487ULL, 7962626282560742910ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 750000487ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 750000497ULL, 7962625930436038168ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 750000497ULL, 7962625930436038168ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 750000497ULL, 7962625930436038168ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 750000497ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 750000529ULL, 7962624803637046093ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 750000529ULL, 7962624803637046093ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 750000529ULL, 7962624803637046093ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 750000529ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 750000569ULL, 7962623395138441215ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 750000569ULL, 7962623395138441215ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 750000569ULL, 7962623395138441215ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 750000569ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 750000593ULL, 7962622550039350404ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 750000593ULL, 7962622550039350404ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 750000593ULL, 7962622550039350404ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 750000593ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 750000617ULL, 7962621704940313679ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 750000617ULL, 7962621704940313679ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 750000617ULL, 7962621704940313679ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 750000617ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 750000703ULL, 7962618676669209560ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 750000703ULL, 7962618676669209560ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 750000703ULL, 7962618676669209560ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 750000703ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 750000709ULL, 7962618465394507282ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 750000709ULL, 7962618465394507282ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 750000709ULL, 7962618465394507282ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 750000709ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 750000733ULL, 7962617620295731974ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 750000733ULL, 7962617620295731974ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 750000733ULL, 7962617620295731974ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 750000733ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 750000739ULL, 7962617409021046597ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 750000739ULL, 7962617409021046597ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 750000739ULL, 7962617409021046597ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 750000739ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 750000749ULL, 7962617056896578483ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 750000749ULL, 7962617056896578483ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 750000749ULL, 7962617056896578483ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 750000749ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 750000751ULL, 7962616986471685987ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 750000751ULL, 7962616986471685987ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 750000751ULL, 7962616986471685987ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 750000751ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 750000773ULL, 7962616211797893318ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 750000773ULL, 7962616211797893318ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 750000773ULL, 7962616211797893318ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 750000773ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 750000791ULL, 7962615577973914939ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 750000791ULL, 7962615577973914939ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 750000791ULL, 7962615577973914939ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 750000791ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #24] Progress: %llu (71.88%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #24] Progress: %llu (71.88%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #24] Potential Solution: %llu, primes[0] = 749999989, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_24( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 749999976ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 749999977ULL; n <= 781249975ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 781249981ULL, 6906268547440303360ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 781249981ULL, 6906268547440303360ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 781249981ULL, 6906268547440303360ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 781249981ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 781250137ULL, 6906263484951630927ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 781250137ULL, 6906263484951630927ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 781250137ULL, 6906263484951630927ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 781250137ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 781250201ULL, 6906261408033786071ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 781250201ULL, 6906261408033786071ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 781250201ULL, 6906261408033786071ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 781250201ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 781250207ULL, 6906261213322755561ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 781250207ULL, 6906261213322755561ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 781250207ULL, 6906261213322755561ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 781250207ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 781250213ULL, 6906261018611728043ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 781250213ULL, 6906261018611728043ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 781250213ULL, 6906261018611728043ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 781250213ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 781250243ULL, 6906260045056635312ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 781250243ULL, 6906260045056635312ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 781250243ULL, 6906260045056635312ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 781250243ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 781250257ULL, 6906259590730950959ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 781250257ULL, 6906259590730950959ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 781250257ULL, 6906259590730950959ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 781250257ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 781250287ULL, 6906258617175967890ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 781250287ULL, 6906258617175967890ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 781250287ULL, 6906258617175967890ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 781250287ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 781250299ULL, 6906258227753995597ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 781250299ULL, 6906258227753995597ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 781250299ULL, 6906258227753995597ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 781250299ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 781250311ULL, 6906257838332035268ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 781250311ULL, 6906257838332035268ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 781250311ULL, 6906257838332035268ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 781250311ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 781250321ULL, 6906257513813744132ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 781250321ULL, 6906257513813744132ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 781250321ULL, 6906257513813744132ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 781250321ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 781250339ULL, 6906256929680841022ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 781250339ULL, 6906256929680841022ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 781250339ULL, 6906256929680841022ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 781250339ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 781250347ULL, 6906256670066226058ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 781250347ULL, 6906256670066226058ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 781250347ULL, 6906256670066226058ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 781250347ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 781250377ULL, 6906255696511467296ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 781250377ULL, 6906255696511467296ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 781250377ULL, 6906255696511467296ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 781250377ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 781250389ULL, 6906255307089584726ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 781250389ULL, 6906255307089584726ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 781250389ULL, 6906255307089584726ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 781250389ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 781250411ULL, 6906254593149497752ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 781250411ULL, 6906254593149497752ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 781250411ULL, 6906254593149497752ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 781250411ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 781250413ULL, 6906254528245855476ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 781250413ULL, 6906254528245855476ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 781250413ULL, 6906254528245855476ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 781250413ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 781250443ULL, 6906253554691261205ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 781250443ULL, 6906253554691261205ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 781250443ULL, 6906253554691261205ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 781250443ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 781250467ULL, 6906252775847639622ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 781250467ULL, 6906252775847639622ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 781250467ULL, 6906252775847639622ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 781250467ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 781250471ULL, 6906252646040374011ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 781250471ULL, 6906252646040374011ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 781250471ULL, 6906252646040374011ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 781250471ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 781250479ULL, 6906252386425846775ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 781250479ULL, 6906252386425846775ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 781250479ULL, 6906252386425846775ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 781250479ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 781250507ULL, 6906251477775043322ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 781250507ULL, 6906251477775043322ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 781250507ULL, 6906251477775043322ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 781250507ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 781250543ULL, 6906250309509820301ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 781250543ULL, 6906250309509820301ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 781250543ULL, 6906250309509820301ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 781250543ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 781250563ULL, 6906249660473631812ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 781250563ULL, 6906249660473631812ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 781250563ULL, 6906249660473631812ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 781250563ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 781250567ULL, 6906249530666398102ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 781250567ULL, 6906249530666398102ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 781250567ULL, 6906249530666398102ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 781250567ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 781250573ULL, 6906249335955550029ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 781250573ULL, 6906249335955550029ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 781250573ULL, 6906249335955550029ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 781250573ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 781250579ULL, 6906249141244704947ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 781250579ULL, 6906249141244704947ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 781250579ULL, 6906249141244704947ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 781250579ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 781250593ULL, 6906248686919411386ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 781250593ULL, 6906248686919411386ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 781250593ULL, 6906248686919411386ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 781250593ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 781250611ULL, 6906248102786915019ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 781250611ULL, 6906248102786915019ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 781250611ULL, 6906248102786915019ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 781250611ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 781250629ULL, 6906247518654445569ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 781250629ULL, 6906247518654445569ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 781250629ULL, 6906247518654445569ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 781250629ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 781250663ULL, 6906246415293187826ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 781250663ULL, 6906246415293187826ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 781250663ULL, 6906246415293187826ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 781250663ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 781250681ULL, 6906245831160796136ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 781250681ULL, 6906245831160796136ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 781250681ULL, 6906245831160796136ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 781250681ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 781250689ULL, 6906245571546408469ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 781250689ULL, 6906245571546408469ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 781250689ULL, 6906245571546408469ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 781250689ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 781250693ULL, 6906245441739216630ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 781250693ULL, 6906245441739216630ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 781250693ULL, 6906245441739216630ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 781250693ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 781250711ULL, 6906244857606869801ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 781250711ULL, 6906244857606869801ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 781250711ULL, 6906244857606869801ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 781250711ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 781250713ULL, 6906244792703277370ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 781250713ULL, 6906244792703277370ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 781250713ULL, 6906244792703277370ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 781250713ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 781250719ULL, 6906244597992502073ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 781250719ULL, 6906244597992502073ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 781250719ULL, 6906244597992502073ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 781250719ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 781250737ULL, 6906244013860194124ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 781250737ULL, 6906244013860194124ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 781250737ULL, 6906244013860194124ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 781250737ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 781250741ULL, 6906243884053018235ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 781250741ULL, 6906243884053018235ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 781250741ULL, 6906243884053018235ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 781250741ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 781250839ULL, 6906240703777624174ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 781250839ULL, 6906240703777624174ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 781250839ULL, 6906240703777624174ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 781250839ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #25] Progress: %llu (75.00%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #25] Progress: %llu (75.00%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #25] Potential Solution: %llu, primes[0] = 781249981, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_25( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 781249975ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 781249976ULL; n <= 812499974ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 812499977ULL, 5931152774607632272ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 812499977ULL, 5931152774607632272ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 812499977ULL, 5931152774607632272ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 812499977ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 812499997ULL, 5931152174536323021ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 812499997ULL, 5931152174536323021ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 812499997ULL, 5931152174536323021ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 812499997ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 812500027ULL, 5931151274429414536ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 812500027ULL, 5931151274429414536ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 812500027ULL, 5931151274429414536ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 812500027ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 812500063ULL, 5931150194301212093ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 812500063ULL, 5931150194301212093ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 812500063ULL, 5931150194301212093ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 812500063ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 812500067ULL, 5931150074286973285ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 812500067ULL, 5931150074286973285ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 812500067ULL, 5931150074286973285ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 812500067ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 812500099ULL, 5931149114173105366ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 812500099ULL, 5931149114173105366ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 812500099ULL, 5931149114173105366ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 812500099ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 812500127ULL, 5931148274073532974ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 812500127ULL, 5931148274073532974ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 812500127ULL, 5931148274073532974ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 812500127ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 812500133ULL, 5931148094052203566ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 812500133ULL, 5931148094052203566ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 812500133ULL, 5931148094052203566ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 812500133ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 812500181ULL, 5931146653881664020ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 812500181ULL, 5931146653881664020ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 812500181ULL, 5931146653881664020ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 812500181ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 812500207ULL, 5931145873789359480ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 812500207ULL, 5931145873789359480ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 812500207ULL, 5931145873789359480ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 812500207ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 812500253ULL, 5931144493626173753ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 812500253ULL, 5931144493626173753ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 812500253ULL, 5931144493626173753ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 812500253ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 812500259ULL, 5931144313604900179ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 812500259ULL, 5931144313604900179ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 812500259ULL, 5931144313604900179ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 812500259ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 812500267ULL, 5931144073576539550ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 812500267ULL, 5931144073576539550ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 812500267ULL, 5931144073576539550ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 812500267ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 812500301ULL, 5931143053456059610ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 812500301ULL, 5931143053456059610ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 812500301ULL, 5931143053456059610ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 812500301ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 812500307ULL, 5931142873434807307ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 812500307ULL, 5931142873434807307ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 812500307ULL, 5931142873434807307ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 812500307ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 812500331ULL, 5931142153349824681ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 812500331ULL, 5931142153349824681ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 812500331ULL, 5931142153349824681ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 812500331ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 812500333ULL, 5931142093342744716ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 812500333ULL, 5931142093342744716ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 812500333ULL, 5931142093342744716ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 812500333ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 812500361ULL, 5931141253243656221ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 812500361ULL, 5931141253243656221ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 812500361ULL, 5931141253243656221ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 812500361ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 812500391ULL, 5931140353137554231ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 812500391ULL, 5931140353137554231ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 812500391ULL, 5931140353137554231ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 812500391ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 812500399ULL, 5931140113109271593ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 812500399ULL, 5931140113109271593ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 812500399ULL, 5931140113109271593ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 812500399ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 812500433ULL, 5931139092989123113ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 812500433ULL, 5931139092989123113ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 812500433ULL, 5931139092989123113ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 812500433ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 812500487ULL, 5931137472798474536ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 812500487ULL, 5931137472798474536ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 812500487ULL, 5931137472798474536ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 812500487ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 812500489ULL, 5931137412791417614ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 812500489ULL, 5931137412791417614ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 812500489ULL, 5931137412791417614ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 812500489ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 812500519ULL, 5931136512685599226ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 812500519ULL, 5931136512685599226ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 812500519ULL, 5931136512685599226ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 812500519ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 812500537ULL, 5931135972622140098ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 812500537ULL, 5931135972622140098ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 812500537ULL, 5931135972622140098ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 812500537ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 812500571ULL, 5931134952502338145ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 812500571ULL, 5931134952502338145ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 812500571ULL, 5931134952502338145ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 812500571ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 812500583ULL, 5931134592460075487ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 812500583ULL, 5931134592460075487ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 812500583ULL, 5931134592460075487ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 812500583ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 812500589ULL, 5931134412438948146ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 812500589ULL, 5931134412438948146ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 812500589ULL, 5931134412438948146ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 812500589ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 812500621ULL, 5931133452326313897ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 812500621ULL, 5931133452326313897ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 812500621ULL, 5931133452326313897ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 812500621ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 812500631ULL, 5931133152291131204ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 812500631ULL, 5931133152291131204ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 812500631ULL, 5931133152291131204ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 812500631ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 812500639ULL, 5931132912262990367ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 812500639ULL, 5931132912262990367ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 812500639ULL, 5931132912262990367ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 812500639ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 812500673ULL, 5931131892143444543ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 812500673ULL, 5931131892143444543ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 812500673ULL, 5931131892143444543ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 812500673ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 812500681ULL, 5931131652115328521ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 812500681ULL, 5931131652115328521ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 812500681ULL, 5931131652115328521ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 812500681ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 812500687ULL, 5931131472094244606ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 812500687ULL, 5931131472094244606ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 812500687ULL, 5931131472094244606ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 812500687ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 812500697ULL, 5931131172059110658ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 812500697ULL, 5931131172059110658ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 812500697ULL, 5931131172059110658ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 812500697ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 812500709ULL, 5931130812016959668ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 812500709ULL, 5931130812016959668ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 812500709ULL, 5931130812016959668ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 812500709ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 812500739ULL, 5931129911911628721ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 812500739ULL, 5931129911911628721ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 812500739ULL, 5931129911911628721ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 812500739ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 812500747ULL, 5931129671883551695ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 812500747ULL, 5931129671883551695ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 812500747ULL, 5931129671883551695ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 812500747ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 812500753ULL, 5931129491862497027ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 812500753ULL, 5931129491862497027ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 812500753ULL, 5931129491862497027ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 812500753ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 812500763ULL, 5931129191827411822ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 812500763ULL, 5931129191827411822ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 812500763ULL, 5931129191827411822ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 812500763ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #26] Progress: %llu (78.12%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #26] Progress: %llu (78.12%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #26] Potential Solution: %llu, primes[0] = 812499977, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_26( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 812499974ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 812499975ULL; n <= 843749973ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 843750023ULL, 5028266401716633229ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 843750023ULL, 5028266401716633229ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 843750023ULL, 5028266401716633229ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 843750023ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 843750071ULL, 5028265066249483004ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 843750071ULL, 5028265066249483004ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 843750071ULL, 5028265066249483004ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 843750071ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 843750073ULL, 5028265010605021709ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 843750073ULL, 5028265010605021709ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 843750073ULL, 5028265010605021709ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 843750073ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 843750077ULL, 5028264899316099910ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 843750077ULL, 5028264899316099910ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 843750077ULL, 5028264899316099910ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 843750077ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 843750079ULL, 5028264843671639406ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 843750079ULL, 5028264843671639406ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 843750079ULL, 5028264843671639406ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 843750079ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 843750107ULL, 5028264064649220050ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 843750107ULL, 5028264064649220050ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 843750107ULL, 5028264064649220050ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 843750107ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 843750113ULL, 5028263897715851201ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 843750113ULL, 5028263897715851201ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 843750113ULL, 5028263897715851201ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 843750113ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 843750121ULL, 5028263675138029762ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 843750121ULL, 5028263675138029762ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 843750121ULL, 5028263675138029762ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 843750121ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 843750139ULL, 5028263174337946955ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 843750139ULL, 5028263174337946955ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 843750139ULL, 5028263174337946955ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 843750139ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 843750163ULL, 5028262506604536451ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 843750163ULL, 5028262506604536451ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 843750163ULL, 5028262506604536451ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 843750163ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 843750179ULL, 5028262061448950552ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 843750179ULL, 5028262061448950552ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 843750179ULL, 5028262061448950552ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 843750179ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 843750199ULL, 5028261505004491920ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 843750199ULL, 5028261505004491920ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 843750199ULL, 5028261505004491920ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 843750199ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 843750217ULL, 5028261004204501706ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 843750217ULL, 5028261004204501706ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 843750217ULL, 5028261004204501706ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 843750217ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 843750221ULL, 5028260892915617894ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 843750221ULL, 5028260892915617894ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 843750221ULL, 5028260892915617894ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 843750221ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 843750227ULL, 5028260725982294153ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 843750227ULL, 5028260725982294153ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 843750227ULL, 5028260725982294153ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 843750227ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 843750241ULL, 5028260336471214659ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 843750241ULL, 5028260336471214659ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 843750241ULL, 5028260336471214659ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 843750241ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 843750253ULL, 5028260002604585380ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 843750253ULL, 5028260002604585380ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 843750253ULL, 5028260002604585380ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 843750253ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 843750269ULL, 5028259557449094448ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 843750269ULL, 5028259557449094448ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 843750269ULL, 5028259557449094448ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 843750269ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 843750277ULL, 5028259334871355313ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 843750277ULL, 5028259334871355313ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 843750277ULL, 5028259334871355313ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 843750277ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 843750287ULL, 5028259056649187329ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 843750287ULL, 5028259056649187329ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 843750287ULL, 5028259056649187329ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 843750287ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 843750289ULL, 5028259001004754524ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 843750289ULL, 5028259001004754524ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 843750289ULL, 5028259001004754524ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 843750289ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 843750293ULL, 5028258889715889705ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 843750293ULL, 5028258889715889705ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 843750293ULL, 5028258889715889705ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 843750293ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 843750311ULL, 5028258388916011076ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 843750311ULL, 5028258388916011076ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 843750311ULL, 5028258388916011076ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 843750311ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 843750367ULL, 5028256830872080878ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 843750367ULL, 5028256830872080878ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 843750367ULL, 5028256830872080878ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 843750367ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 843750403ULL, 5028255829272520676ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 843750403ULL, 5028255829272520676ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 843750403ULL, 5028255829272520676ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 843750403ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 843750419ULL, 5028255384117188021ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 843750419ULL, 5028255384117188021ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 843750419ULL, 5028255384117188021ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 843750419ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 843750431ULL, 5028255050250699609ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 843750431ULL, 5028255050250699609ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 843750431ULL, 5028255050250699609ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 843750431ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 843750449ULL, 5028254549450984797ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 843750449ULL, 5028254549450984797ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 843750449ULL, 5028254549450984797ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 843750449ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 843750463ULL, 5028254159940110272ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 843750463ULL, 5028254159940110272ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 843750463ULL, 5028254159940110272ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 843750463ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 843750491ULL, 5028253380918400000ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 843750491ULL, 5028253380918400000ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 843750491ULL, 5028253380918400000ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 843750491ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 843750493ULL, 5028253325273994101ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 843750493ULL, 5028253325273994101ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 843750493ULL, 5028253325273994101ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 843750493ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 843750517ULL, 5028252657541143900ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 843750517ULL, 5028252657541143900ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 843750517ULL, 5028252657541143900ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 843750517ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 843750539ULL, 5028252045452731252ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 843750539ULL, 5028252045452731252ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 843750539ULL, 5028252045452731252ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 843750539ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 843750623ULL, 5028249708388176563ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 843750623ULL, 5028249708388176563ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 843750623ULL, 5028249708388176563ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 843750623ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 843750629ULL, 5028249541455011892ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 843750629ULL, 5028249541455011892ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 843750629ULL, 5028249541455011892ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 843750629ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 843750659ULL, 5028248706789224146ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 843750659ULL, 5028248706789224146ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 843750659ULL, 5028248706789224146ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 843750659ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 843750671ULL, 5028248372922925667ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 843750671ULL, 5028248372922925667ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 843750671ULL, 5028248372922925667ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 843750671ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 843750683ULL, 5028248039056636685ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 843750683ULL, 5028248039056636685ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 843750683ULL, 5028248039056636685ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 843750683ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 843750751ULL, 5028246147147845165ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 843750751ULL, 5028246147147845165ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 843750751ULL, 5028246147147845165ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 843750751ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 843750757ULL, 5028245980214731142ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 843750757ULL, 5028245980214731142ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 843750757ULL, 5028245980214731142ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 843750757ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #27] Progress: %llu (81.25%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #27] Progress: %llu (81.25%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #27] Potential Solution: %llu, primes[0] = 843750023, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_27( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 843749973ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 843749974ULL; n <= 874999972ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 874999997ULL, 4189873865120092058ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 874999997ULL, 4189873865120092058ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 874999997ULL, 4189873865120092058ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 874999997ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 875000033ULL, 4189872933784989128ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 875000033ULL, 4189872933784989128ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 875000033ULL, 4189872933784989128ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 875000033ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 875000039ULL, 4189872778562479423ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 875000039ULL, 4189872778562479423ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 875000039ULL, 4189872778562479423ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 875000039ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 875000051ULL, 4189872468117466401ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 875000051ULL, 4189872468117466401ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 875000051ULL, 4189872468117466401ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 875000051ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 875000053ULL, 4189872416376631725ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 875000053ULL, 4189872416376631725ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 875000053ULL, 4189872416376631725ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 875000053ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 875000099ULL, 4189871226337499462ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 875000099ULL, 4189871226337499462ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 875000099ULL, 4189871226337499462ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 875000099ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 875000123ULL, 4189870605447567083ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 875000123ULL, 4189870605447567083ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 875000123ULL, 4189870605447567083ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 875000123ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 875000167ULL, 4189869467149446183ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 875000167ULL, 4189869467149446183ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 875000167ULL, 4189869467149446183ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 875000167ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 875000173ULL, 4189869311926984022ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 875000173ULL, 4189869311926984022ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 875000173ULL, 4189869311926984022ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 875000173ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 875000197ULL, 4189868691037156662ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 875000197ULL, 4189868691037156662ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 875000197ULL, 4189868691037156662ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 875000197ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 875000233ULL, 4189867759702479485ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 875000233ULL, 4189867759702479485ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 875000233ULL, 4189867759702479485ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 875000233ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 875000333ULL, 4189865172662111648ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 875000333ULL, 4189865172662111648ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 875000333ULL, 4189865172662111648ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 875000333ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 875000377ULL, 4189864034364537131ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 875000377ULL, 4189864034364537131ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 875000377ULL, 4189864034364537131ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 875000377ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 875000419ULL, 4189862947807868249ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 875000419ULL, 4189862947807868249ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 875000419ULL, 4189862947807868249ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 875000419ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 875000429ULL, 4189862689103914842ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 875000429ULL, 4189862689103914842ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 875000429ULL, 4189862689103914842ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 875000429ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 875000437ULL, 4189862482140756374ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 875000437ULL, 4189862482140756374ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 875000437ULL, 4189862482140756374ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 875000437ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 875000453ULL, 4189862068214450791ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 875000453ULL, 4189862068214450791ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 875000453ULL, 4189862068214450791ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 875000453ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 875000459ULL, 4189861912992090100ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 875000459ULL, 4189861912992090100ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 875000459ULL, 4189861912992090100ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 875000459ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 875000473ULL, 4189861550806590100ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 875000473ULL, 4189861550806590100ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 875000473ULL, 4189861550806590100ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 875000473ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 875000549ULL, 4189859584656935189ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 875000549ULL, 4189859584656935189ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 875000549ULL, 4189859584656935189ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 875000549ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 875000573ULL, 4189858963767641439ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 875000573ULL, 4189858963767641439ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 875000573ULL, 4189858963767641439ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 875000573ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 875000579ULL, 4189858808545323324ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 875000579ULL, 4189858808545323324ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 875000579ULL, 4189858808545323324ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 875000579ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 875000641ULL, 4189857204581494114ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 875000641ULL, 4189857204581494114ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 875000641ULL, 4189857204581494114ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 875000641ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 875000671ULL, 4189856428470045453ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 875000671ULL, 4189856428470045453ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 875000671ULL, 4189856428470045453ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 875000671ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 875000681ULL, 4189856169766241059ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 875000681ULL, 4189856169766241059ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 875000681ULL, 4189856169766241059ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 875000681ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 875000683ULL, 4189856118025480890ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 875000683ULL, 4189856118025480890ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 875000683ULL, 4189856118025480890ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 875000683ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 875000729ULL, 4189854927988062282ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 875000729ULL, 4189854927988062282ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 875000729ULL, 4189854927988062282ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 875000729ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 875000743ULL, 4189854565802785801ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 875000743ULL, 4189854565802785801ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 875000743ULL, 4189854565802785801ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 875000743ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 875000767ULL, 4189853944913767371ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 875000767ULL, 4189853944913767371ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 875000767ULL, 4189853944913767371ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 875000767ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 875000807ULL, 4189852910098812344ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 875000807ULL, 4189852910098812344ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 875000807ULL, 4189852910098812344ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 875000807ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 875000813ULL, 4189852754876577250ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 875000813ULL, 4189852754876577250ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 875000813ULL, 4189852754876577250ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 875000813ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 875000831ULL, 4189852289209884740ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 875000831ULL, 4189852289209884740ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 875000831ULL, 4189852289209884740ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 875000831ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 875000881ULL, 4189850995691394962ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 875000881ULL, 4189850995691394962ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 875000881ULL, 4189850995691394962ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 875000881ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 875000899ULL, 4189850530024774831ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 875000899ULL, 4189850530024774831ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 875000899ULL, 4189850530024774831ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 875000899ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 875000909ULL, 4189850271321105258ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 875000909ULL, 4189850271321105258ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 875000909ULL, 4189850271321105258ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 875000909ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 875000911ULL, 4189850219580372054ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 875000911ULL, 4189850219580372054ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 875000911ULL, 4189850219580372054ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 875000911ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 875000981ULL, 4189848408654858897ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 875000981ULL, 4189848408654858897ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 875000981ULL, 4189848408654858897ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 875000981ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 875000989ULL, 4189848201691961556ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 875000989ULL, 4189848201691961556ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 875000989ULL, 4189848201691961556ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 875000989ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 875001011ULL, 4189847632544013385ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 875001011ULL, 4189847632544013385ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 875001011ULL, 4189847632544013385ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 875001011ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 875001041ULL, 4189846856433221092ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 875001041ULL, 4189846856433221092ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 875001041ULL, 4189846856433221092ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 875001041ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #28] Progress: %llu (84.38%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #28] Progress: %llu (84.38%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #28] Potential Solution: %llu, primes[0] = 874999997, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_28( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 874999972ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 874999973ULL; n <= 906249971ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 906249989ULL, 3409301023098813033ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 906249989ULL, 3409301023098813033ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 906249989ULL, 3409301023098813033ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 906249989ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 906250013ULL, 3409300444290454634ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 906250013ULL, 3409300444290454634ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 906250013ULL, 3409300444290454634ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 906250013ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 906250027ULL, 3409300106652259725ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 906250027ULL, 3409300106652259725ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 906250027ULL, 3409300106652259725ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 906250027ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 906250067ULL, 3409299141971760326ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 906250067ULL, 3409299141971760326ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 906250067ULL, 3409299141971760326ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 906250067ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 906250109ULL, 3409298129057327608ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 906250109ULL, 3409298129057327608ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 906250109ULL, 3409298129057327608ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 906250109ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 906250129ULL, 3409297646717154550ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 906250129ULL, 3409297646717154550ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 906250129ULL, 3409297646717154550ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 906250129ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 906250153ULL, 3409297067908974983ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 906250153ULL, 3409297067908974983ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 906250153ULL, 3409297067908974983ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 906250153ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 906250157ULL, 3409296971440948036ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 906250157ULL, 3409296971440948036ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 906250157ULL, 3409296971440948036ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 906250157ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 906250211ULL, 3409295669122667595ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 906250211ULL, 3409295669122667595ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 906250211ULL, 3409295669122667595ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 906250211ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 906250223ULL, 3409295379718626352ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 906250223ULL, 3409295379718626352ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 906250223ULL, 3409295379718626352ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 906250223ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 906250237ULL, 3409295042080587921ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 906250237ULL, 3409295042080587921ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 906250237ULL, 3409295042080587921ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 906250237ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 906250253ULL, 3409294656208556774ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 906250253ULL, 3409294656208556774ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 906250253ULL, 3409294656208556774ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 906250253ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 906250291ULL, 3409293739762537408ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 906250291ULL, 3409293739762537408ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 906250291ULL, 3409293739762537408ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 906250291ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 906250337ULL, 3409292630380616792ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 906250337ULL, 3409292630380616792ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 906250337ULL, 3409292630380616792ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 906250337ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 906250363ULL, 3409292003338711479ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 906250363ULL, 3409292003338711479ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 906250363ULL, 3409292003338711479ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 906250363ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 906250409ULL, 3409290893956967140ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 906250409ULL, 3409290893956967140ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 906250409ULL, 3409290893956967140ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 906250409ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 906250417ULL, 3409290701021023099ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 906250417ULL, 3409290701021023099ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 906250417ULL, 3409290701021023099ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 906250417ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 906250441ULL, 3409290122213211414ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 906250441ULL, 3409290122213211414ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 906250441ULL, 3409290122213211414ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 906250441ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 906250451ULL, 3409289881043298927ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 906250451ULL, 3409289881043298927ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 906250451ULL, 3409289881043298927ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 906250451ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 906250463ULL, 3409289591639410968ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 906250463ULL, 3409289591639410968ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 906250463ULL, 3409289591639410968ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 906250463ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 906250469ULL, 3409289446937469862ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 906250469ULL, 3409289446937469862ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 906250469ULL, 3409289446937469862ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 906250469ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 906250487ULL, 3409289012831658042ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 906250487ULL, 3409289012831658042ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 906250487ULL, 3409289012831658042ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 906250487ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 906250507ULL, 3409288530491887355ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 906250507ULL, 3409288530491887355ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 906250507ULL, 3409288530491887355ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 906250507ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 906250519ULL, 3409288241088035162ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 906250519ULL, 3409288241088035162ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 906250519ULL, 3409288241088035162ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 906250519ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 906250567ULL, 3409287083472703033ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 906250567ULL, 3409287083472703033ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 906250567ULL, 3409287083472703033ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 906250567ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 906250601ULL, 3409286263495250302ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 906250601ULL, 3409286263495250302ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 906250601ULL, 3409286263495250302ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 906250601ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 906250673ULL, 3409284527072612325ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 906250673ULL, 3409284527072612325ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 906250673ULL, 3409284527072612325ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 906250673ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 906250691ULL, 3409284092966995942ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 906250691ULL, 3409284092966995942ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 906250691ULL, 3409284092966995942ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 906250691ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 906250703ULL, 3409283803563261267ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 906250703ULL, 3409283803563261267ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 906250703ULL, 3409283803563261267ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 906250703ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 906250721ULL, 3409283369457673625ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 906250721ULL, 3409283369457673625ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 906250721ULL, 3409283369457673625ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 906250721ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 906250801ULL, 3409281440099714962ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 906250801ULL, 3409281440099714962ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 906250801ULL, 3409281440099714962ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 906250801ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 906250817ULL, 3409281054228164106ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 906250817ULL, 3409281054228164106ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 906250817ULL, 3409281054228164106ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 906250817ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 906250861ULL, 3409279993081469505ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 906250861ULL, 3409279993081469505ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 906250861ULL, 3409279993081469505ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 906250861ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 906250901ULL, 3409279028402745647ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 906250901ULL, 3409279028402745647ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 906250901ULL, 3409279028402745647ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 906250901ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 906250903ULL, 3409278980168811690ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 906250903ULL, 3409278980168811690ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 906250903ULL, 3409278980168811690ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 906250903ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 906250927ULL, 3409278401361620805ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 906250927ULL, 3409278401361620805ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 906250927ULL, 3409278401361620805ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 906250927ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 906250951ULL, 3409277822554460578ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 906250951ULL, 3409277822554460578ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 906250951ULL, 3409277822554460578ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 906250951ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 906250973ULL, 3409277291981257301ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 906250973ULL, 3409277291981257301ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 906250973ULL, 3409277291981257301ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 906250973ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 906250987ULL, 3409276954343777718ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 906250987ULL, 3409276954343777718ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 906250987ULL, 3409276954343777718ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 906250987ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 906250997ULL, 3409276713174155832ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 906250997ULL, 3409276713174155832ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 906250997ULL, 3409276713174155832ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 906250997ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #29] Progress: %llu (87.50%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #29] Progress: %llu (87.50%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #29] Potential Solution: %llu, primes[0] = 906249989, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_29( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 906249971ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 906249972ULL; n <= 937499970ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 937499977ULL, 2680766448422529885ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 937499977ULL, 2680766448422529885ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 937499977ULL, 2680766448422529885ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 937499977ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 937499999ULL, 2680765952630282437ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 937499999ULL, 2680765952630282437ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 937499999ULL, 2680765952630282437ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 937499999ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 937500001ULL, 2680765907558261095ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 937500001ULL, 2680765907558261095ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 937500001ULL, 2680765907558261095ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 937500001ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 937500013ULL, 2680765637126137085ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 937500013ULL, 2680765637126137085ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 937500013ULL, 2680765637126137085ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 937500013ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 937500041ULL, 2680765006117874651ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 937500041ULL, 2680765006117874651ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 937500041ULL, 2680765006117874651ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 937500041ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 937500049ULL, 2680764825829806593ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 937500049ULL, 2680764825829806593ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 937500049ULL, 2680764825829806593ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 937500049ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 937500077ULL, 2680764194821592620ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 937500077ULL, 2680764194821592620ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 937500077ULL, 2680764194821592620ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 937500077ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 937500089ULL, 2680763924389512456ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 937500089ULL, 2680763924389512456ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 937500089ULL, 2680763924389512456ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 937500089ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 937500107ULL, 2680763518741405190ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 937500107ULL, 2680763518741405190ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 937500107ULL, 2680763518741405190ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 937500107ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 937500119ULL, 2680763248309342334ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 937500119ULL, 2680763248309342334ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 937500119ULL, 2680763248309342334ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 937500119ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 937500121ULL, 2680763203237332531ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 937500121ULL, 2680763203237332531ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 937500121ULL, 2680763203237332531ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 937500121ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 937500127ULL, 2680763068021304275ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 937500127ULL, 2680763068021304275ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 937500127ULL, 2680763068021304275ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 937500127ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 937500131ULL, 2680762977877286400ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 937500131ULL, 2680762977877286400ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 937500131ULL, 2680762977877286400ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 937500131ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 937500163ULL, 2680762256725171090ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 937500163ULL, 2680762256725171090ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 937500163ULL, 2680762256725171090ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 937500163ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 937500169ULL, 2680762121509154950ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 937500169ULL, 2680762121509154950ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 937500169ULL, 2680762121509154950ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 937500169ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 937500181ULL, 2680761851077127863ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 937500181ULL, 2680761851077127863ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 937500181ULL, 2680761851077127863ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 937500181ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 937500209ULL, 2680761220069091582ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 937500209ULL, 2680761220069091582ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 937500209ULL, 2680761220069091582ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 937500209ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 937500227ULL, 2680760814421088162ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 937500227ULL, 2680760814421088162ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 937500227ULL, 2680760814421088162ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 937500227ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 937500229ULL, 2680760769349088744ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 937500229ULL, 2680760769349088744ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 937500229ULL, 2680760769349088744ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 937500229ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 937500253ULL, 2680760228485110723ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 937500253ULL, 2680760228485110723ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 937500253ULL, 2680760228485110723ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 937500253ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 937500257ULL, 2680760138341117078ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 937500257ULL, 2680760138341117078ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 937500257ULL, 2680760138341117078ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 937500257ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 937500293ULL, 2680759327045208893ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 937500293ULL, 2680759327045208893ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 937500293ULL, 2680759327045208893ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 937500293ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 937500307ULL, 2680759011541261425ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 937500307ULL, 2680759011541261425ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 937500307ULL, 2680759011541261425ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 937500307ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 937500323ULL, 2680758650965333000ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 937500323ULL, 2680758650965333000ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 937500323ULL, 2680758650965333000ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 937500323ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 937500331ULL, 2680758470677373404ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 937500331ULL, 2680758470677373404ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 937500331ULL, 2680758470677373404ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 937500331ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 937500341ULL, 2680758245317428234ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 937500341ULL, 2680758245317428234ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 937500341ULL, 2680758245317428234ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 937500341ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 937500359ULL, 2680757839669539045ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 937500359ULL, 2680757839669539045ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 937500359ULL, 2680757839669539045ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 937500359ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 937500367ULL, 2680757659381593294ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 937500367ULL, 2680757659381593294ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 937500367ULL, 2680757659381593294ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 937500367ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 937500409ULL, 2680756712869928583ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 937500409ULL, 2680756712869928583ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 937500409ULL, 2680756712869928583ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 937500409ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 937500433ULL, 2680756172006158254ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 937500433ULL, 2680756172006158254ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 937500433ULL, 2680756172006158254ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 937500433ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 937500437ULL, 2680756081862199225ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 937500437ULL, 2680756081862199225ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 937500437ULL, 2680756081862199225ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 937500437ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 937500439ULL, 2680756036790219998ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 937500439ULL, 2680756036790219998ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 937500439ULL, 2680756036790219998ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 937500439ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 937500449ULL, 2680755811430326752ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 937500449ULL, 2680755811430326752ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 937500449ULL, 2680755811430326752ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 937500449ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 937500461ULL, 2680755540998461203ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 937500461ULL, 2680755540998461203ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 937500461ULL, 2680755540998461203ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 937500461ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 937500463ULL, 2680755495926484284ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 937500463ULL, 2680755495926484284ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 937500463ULL, 2680755495926484284ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 937500463ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 937500467ULL, 2680755405782531024ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 937500467ULL, 2680755405782531024ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 937500467ULL, 2680755405782531024ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 937500467ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 937500469ULL, 2680755360710554683ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 937500469ULL, 2680755360710554683ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 937500469ULL, 2680755360710554683ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 937500469ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 937500533ULL, 2680753918407413290ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 937500533ULL, 2680753918407413290ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 937500533ULL, 2680753918407413290ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 937500533ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 937500559ULL, 2680753332471818349ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 937500559ULL, 2680753332471818349ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 937500559ULL, 2680753332471818349ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 937500559ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 937500589ULL, 2680752656392326110ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 937500589ULL, 2680752656392326110ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 937500589ULL, 2680752656392326110ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 937500589ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #30] Progress: %llu (90.62%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #30] Progress: %llu (90.62%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #30] Potential Solution: %llu, primes[0] = 937499977, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_30( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 937499970ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 937499971ULL; n <= 968749969ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 968749987ULL, 1999233623698236218ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 968749987ULL, 1999233623698236218ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 968749987ULL, 1999233623698236218ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 968749987ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 968749997ULL, 1999233412642981914ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 968749997ULL, 1999233412642981914ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 968749997ULL, 1999233412642981914ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 968749997ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 968750011ULL, 1999233117165633208ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 968750011ULL, 1999233117165633208ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 968750011ULL, 1999233117165633208ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 968750011ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 968750033ULL, 1999232652844102497ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 968750033ULL, 1999232652844102497ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 968750033ULL, 1999232652844102497ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 968750033ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 968750039ULL, 1999232526210961417ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 968750039ULL, 1999232526210961417ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 968750039ULL, 1999232526210961417ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 968750039ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 968750051ULL, 1999232272944683964ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 968750051ULL, 1999232272944683964ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 968750051ULL, 1999232272944683964ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 968750051ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 968750063ULL, 1999232019678412786ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 968750063ULL, 1999232019678412786ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 968750063ULL, 1999232019678412786ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 968750063ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 968750071ULL, 1999231850834235486ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 968750071ULL, 1999231850834235486ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 968750071ULL, 1999231850834235486ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 968750071ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 968750113ULL, 1999230964402350414ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 968750113ULL, 1999230964402350414ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 968750113ULL, 1999230964402350414ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 968750113ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 968750143ULL, 1999230331236765278ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 968750143ULL, 1999230331236765278ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 968750143ULL, 1999230331236765278ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 968750143ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 968750149ULL, 1999230204603652956ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 968750149ULL, 1999230204603652956ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 968750149ULL, 1999230204603652956ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 968750149ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 968750201ULL, 1999229107116745212ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 968750201ULL, 1999229107116745212ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 968750201ULL, 1999229107116745212ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 968750201ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 968750213ULL, 1999228853850552464ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 968750213ULL, 1999228853850552464ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 968750213ULL, 1999228853850552464ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 968750213ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 968750227ULL, 1999228558373335522ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 968750227ULL, 1999228558373335522ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 968750227ULL, 1999228558373335522ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 968750227ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 968750257ULL, 1999227925207899405ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 968750257ULL, 1999227925207899405ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 968750257ULL, 1999227925207899405ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 968750257ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 968750261ULL, 1999227840785844218ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 968750261ULL, 1999227840785844218ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 968750261ULL, 1999227840785844218ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 968750261ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 968750267ULL, 1999227714152762746ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 968750267ULL, 1999227714152762746ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 968750267ULL, 1999227714152762746ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 968750267ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 968750291ULL, 1999227207620452545ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 968750291ULL, 1999227207620452545ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 968750291ULL, 1999227207620452545ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 968750291ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 968750297ULL, 1999227080987378916ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 968750297ULL, 1999227080987378916ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 968750297ULL, 1999227080987378916ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 968750297ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 968750303ULL, 1999226954354306856ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 968750303ULL, 1999226954354306856ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 968750303ULL, 1999226954354306856ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 968750303ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 968750339ULL, 1999226194555907435ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 968750339ULL, 1999226194555907435ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 968750339ULL, 1999226194555907435ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 968750339ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 968750357ULL, 1999225814656728901ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 968750357ULL, 1999225814656728901ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 968750357ULL, 1999225814656728901ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 968750357ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 968750407ULL, 1999224759381307047ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 968750407ULL, 1999224759381307047ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 968750407ULL, 1999224759381307047ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 968750407ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 968750413ULL, 1999224632748263745ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 968750413ULL, 1999224632748263745ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 968750413ULL, 1999224632748263745ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 968750413ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 968750437ULL, 1999224126216106222ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 968750437ULL, 1999224126216106222ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 968750437ULL, 1999224126216106222ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 968750437ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 968750443ULL, 1999223999583070763ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 968750443ULL, 1999223999583070763ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 968750443ULL, 1999223999583070763ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 968750443ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 968750459ULL, 1999223661894983873ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 968750459ULL, 1999223661894983873ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 968750459ULL, 1999223661894983873ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 968750459ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 968750477ULL, 1999223281995899456ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 968750477ULL, 1999223281995899456ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 968750477ULL, 1999223281995899456ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 968750477ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 968750479ULL, 1999223239784890948ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 968750479ULL, 1999223239784890948ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 968750479ULL, 1999223239784890948ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 968750479ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 968750537ULL, 1999222015665720026ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 968750537ULL, 1999222015665720026ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 968750537ULL, 1999222015665720026ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 968750537ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 968750551ULL, 1999221720188700730ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 968750551ULL, 1999221720188700730ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 968750551ULL, 1999221720188700730ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 968750551ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 968750599ULL, 1999220707124699407ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 968750599ULL, 1999220707124699407ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 968750599ULL, 1999220707124699407ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 968750599ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 968750623ULL, 1999220200592736392ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 968750623ULL, 1999220200592736392ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 968750623ULL, 1999220200592736392ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 968750623ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 968750641ULL, 1999219820693780601ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 968750641ULL, 1999219820693780601ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 968750641ULL, 1999219820693780601ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 968750641ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 968750683ULL, 1999218934262938658ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 968750683ULL, 1999218934262938658ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 968750683ULL, 1999218934262938658ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 968750683ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 968750707ULL, 1999218427731063485ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 968750707ULL, 1999218427731063485ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 968750707ULL, 1999218427731063485ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 968750707ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 968750711ULL, 1999218343309086730ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 968750711ULL, 1999218343309086730ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 968750711ULL, 1999218343309086730ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 968750711ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 968750719ULL, 1999218174465135311ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 968750719ULL, 1999218174465135311ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 968750719ULL, 1999218174465135311ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 968750719ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 968750723ULL, 1999218090043160647ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 968750723ULL, 1999218090043160647ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 968750723ULL, 1999218090043160647ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 968750723ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 968750749ULL, 1999217541300342325ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 968750749ULL, 1999217541300342325ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 968750749ULL, 1999217541300342325ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 968750749ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #31] Progress: %llu (93.75%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #31] Progress: %llu (93.75%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #31] Potential Solution: %llu, primes[0] = 968749987, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

void brocard_31( uint64_t *factorials ) {
    uint64_t last_n[40] = { 0 };

    for ( uint64_t &i : last_n ) {
        i = 968749969ULL;
    }

    int best_i = 25, i;
    for ( uint64_t n = 968749970ULL; n <= 1000000000ULL; ++n ) {
        if ( last_n[0] == n - 1 ) {
            factorials[0] = mulmod_preinv( factorials[0], n, 1000000007ULL, 1360296416207249352ULL );
        } else if ( n - last_n[0] <= 2000000 ) {
            for ( uint64_t j = last_n[0] + 1; j <= n; ++j ) {
                factorials[0] = mulmod_preinv( factorials[0], j, 1000000007ULL, 1360296416207249352ULL );
            }
        } else {
            factorials[0] = initialize_factorial( n, 1000000007ULL, 1360296416207249352ULL );
        }

        last_n[0] = n;

        if ( jacobi_unsigned( factorials[0] + 1, 1000000007ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 0 >= best_i, 0 ) != 0 ) {
                best_i = 0;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 0\n", n );
            }

            continue;
        }

        if ( last_n[1] == n - 1 ) {
            factorials[1] = mulmod_preinv( factorials[1], n, 1000000009ULL, 1360296376593168729ULL );
        } else if ( n - last_n[1] <= 2000000 ) {
            for ( uint64_t j = last_n[1] + 1; j <= n; ++j ) {
                factorials[1] = mulmod_preinv( factorials[1], j, 1000000009ULL, 1360296376593168729ULL );
            }
        } else {
            factorials[1] = initialize_factorial( n, 1000000009ULL, 1360296376593168729ULL );
        }

        last_n[1] = n;

        if ( jacobi_unsigned( factorials[1] + 1, 1000000009ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 1 >= best_i, 0 ) != 0 ) {
                best_i = 1;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 1\n", n );
            }

            continue;
        }

        if ( last_n[2] == n - 1 ) {
            factorials[2] = mulmod_preinv( factorials[2], n, 1000000021ULL, 1360296138908688317ULL );
        } else if ( n - last_n[2] <= 2000000 ) {
            for ( uint64_t j = last_n[2] + 1; j <= n; ++j ) {
                factorials[2] = mulmod_preinv( factorials[2], j, 1000000021ULL, 1360296138908688317ULL );
            }
        } else {
            factorials[2] = initialize_factorial( n, 1000000021ULL, 1360296138908688317ULL );
        }

        last_n[2] = n;

        if ( jacobi_unsigned( factorials[2] + 1, 1000000021ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 2 >= best_i, 0 ) != 0 ) {
                best_i = 2;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 2\n", n );
            }

            continue;
        }

        if ( last_n[3] == n - 1 ) {
            factorials[3] = mulmod_preinv( factorials[3], n, 1000000033ULL, 1360295901224213609ULL );
        } else if ( n - last_n[3] <= 2000000 ) {
            for ( uint64_t j = last_n[3] + 1; j <= n; ++j ) {
                factorials[3] = mulmod_preinv( factorials[3], j, 1000000033ULL, 1360295901224213609ULL );
            }
        } else {
            factorials[3] = initialize_factorial( n, 1000000033ULL, 1360295901224213609ULL );
        }

        last_n[3] = n;

        if ( jacobi_unsigned( factorials[3] + 1, 1000000033ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 3 >= best_i, 0 ) != 0 ) {
                best_i = 3;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 3\n", n );
            }

            continue;
        }

        if ( last_n[4] == n - 1 ) {
            factorials[4] = mulmod_preinv( factorials[4], n, 1000000087ULL, 1360294831644148016ULL );
        } else if ( n - last_n[4] <= 2000000 ) {
            for ( uint64_t j = last_n[4] + 1; j <= n; ++j ) {
                factorials[4] = mulmod_preinv( factorials[4], j, 1000000087ULL, 1360294831644148016ULL );
            }
        } else {
            factorials[4] = initialize_factorial( n, 1000000087ULL, 1360294831644148016ULL );
        }

        last_n[4] = n;

        if ( jacobi_unsigned( factorials[4] + 1, 1000000087ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 4 >= best_i, 0 ) != 0 ) {
                best_i = 4;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 4\n", n );
            }

            continue;
        }

        if ( last_n[5] == n - 1 ) {
            factorials[5] = mulmod_preinv( factorials[5], n, 1000000093ULL, 1360294712801925636ULL );
        } else if ( n - last_n[5] <= 2000000 ) {
            for ( uint64_t j = last_n[5] + 1; j <= n; ++j ) {
                factorials[5] = mulmod_preinv( factorials[5], j, 1000000093ULL, 1360294712801925636ULL );
            }
        } else {
            factorials[5] = initialize_factorial( n, 1000000093ULL, 1360294712801925636ULL );
        }

        last_n[5] = n;

        if ( jacobi_unsigned( factorials[5] + 1, 1000000093ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 5 >= best_i, 0 ) != 0 ) {
                best_i = 5;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 5\n", n );
            }

            continue;
        }

        if ( last_n[6] == n - 1 ) {
            factorials[6] = mulmod_preinv( factorials[6], n, 1000000097ULL, 1360294633573778175ULL );
        } else if ( n - last_n[6] <= 2000000 ) {
            for ( uint64_t j = last_n[6] + 1; j <= n; ++j ) {
                factorials[6] = mulmod_preinv( factorials[6], j, 1000000097ULL, 1360294633573778175ULL );
            }
        } else {
            factorials[6] = initialize_factorial( n, 1000000097ULL, 1360294633573778175ULL );
        }

        last_n[6] = n;

        if ( jacobi_unsigned( factorials[6] + 1, 1000000097ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 6 >= best_i, 0 ) != 0 ) {
                best_i = 6;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 6\n", n );
            }

            continue;
        }

        if ( last_n[7] == n - 1 ) {
            factorials[7] = mulmod_preinv( factorials[7], n, 1000000103ULL, 1360294514731558172ULL );
        } else if ( n - last_n[7] <= 2000000 ) {
            for ( uint64_t j = last_n[7] + 1; j <= n; ++j ) {
                factorials[7] = mulmod_preinv( factorials[7], j, 1000000103ULL, 1360294514731558172ULL );
            }
        } else {
            factorials[7] = initialize_factorial( n, 1000000103ULL, 1360294514731558172ULL );
        }

        last_n[7] = n;

        if ( jacobi_unsigned( factorials[7] + 1, 1000000103ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 7 >= best_i, 0 ) != 0 ) {
                best_i = 7;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 7\n", n );
            }

            continue;
        }

        if ( last_n[8] == n - 1 ) {
            factorials[8] = mulmod_preinv( factorials[8], n, 1000000123ULL, 1360294118590835129ULL );
        } else if ( n - last_n[8] <= 2000000 ) {
            for ( uint64_t j = last_n[8] + 1; j <= n; ++j ) {
                factorials[8] = mulmod_preinv( factorials[8], j, 1000000123ULL, 1360294118590835129ULL );
            }
        } else {
            factorials[8] = initialize_factorial( n, 1000000123ULL, 1360294118590835129ULL );
        }

        last_n[8] = n;

        if ( jacobi_unsigned( factorials[8] + 1, 1000000123ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 8 >= best_i, 0 ) != 0 ) {
                best_i = 8;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 8\n", n );
            }

            continue;
        }

        if ( last_n[9] == n - 1 ) {
            factorials[9] = mulmod_preinv( factorials[9], n, 1000000181ULL, 1360292969782827910ULL );
        } else if ( n - last_n[9] <= 2000000 ) {
            for ( uint64_t j = last_n[9] + 1; j <= n; ++j ) {
                factorials[9] = mulmod_preinv( factorials[9], j, 1000000181ULL, 1360292969782827910ULL );
            }
        } else {
            factorials[9] = initialize_factorial( n, 1000000181ULL, 1360292969782827910ULL );
        }

        last_n[9] = n;

        if ( jacobi_unsigned( factorials[9] + 1, 1000000181ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 9 >= best_i, 0 ) != 0 ) {
                best_i = 9;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 9\n", n );
            }

            continue;
        }

        if ( last_n[10] == n - 1 ) {
            factorials[10] = mulmod_preinv( factorials[10], n, 1000000207ULL, 1360292454799971380ULL );
        } else if ( n - last_n[10] <= 2000000 ) {
            for ( uint64_t j = last_n[10] + 1; j <= n; ++j ) {
                factorials[10] = mulmod_preinv( factorials[10], j, 1000000207ULL, 1360292454799971380ULL );
            }
        } else {
            factorials[10] = initialize_factorial( n, 1000000207ULL, 1360292454799971380ULL );
        }

        last_n[10] = n;

        if ( jacobi_unsigned( factorials[10] + 1, 1000000207ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 10 >= best_i, 0 ) != 0 ) {
                best_i = 10;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 10\n", n );
            }

            continue;
        }

        if ( last_n[11] == n - 1 ) {
            factorials[11] = mulmod_preinv( factorials[11], n, 1000000223ULL, 1360292137887457596ULL );
        } else if ( n - last_n[11] <= 2000000 ) {
            for ( uint64_t j = last_n[11] + 1; j <= n; ++j ) {
                factorials[11] = mulmod_preinv( factorials[11], j, 1000000223ULL, 1360292137887457596ULL );
            }
        } else {
            factorials[11] = initialize_factorial( n, 1000000223ULL, 1360292137887457596ULL );
        }

        last_n[11] = n;

        if ( jacobi_unsigned( factorials[11] + 1, 1000000223ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 11 >= best_i, 0 ) != 0 ) {
                best_i = 11;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 11\n", n );
            }

            continue;
        }

        if ( last_n[12] == n - 1 ) {
            factorials[12] = mulmod_preinv( factorials[12], n, 1000000241ULL, 1360291781360891710ULL );
        } else if ( n - last_n[12] <= 2000000 ) {
            for ( uint64_t j = last_n[12] + 1; j <= n; ++j ) {
                factorials[12] = mulmod_preinv( factorials[12], j, 1000000241ULL, 1360291781360891710ULL );
            }
        } else {
            factorials[12] = initialize_factorial( n, 1000000241ULL, 1360291781360891710ULL );
        }

        last_n[12] = n;

        if ( jacobi_unsigned( factorials[12] + 1, 1000000241ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 12 >= best_i, 0 ) != 0 ) {
                best_i = 12;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 12\n", n );
            }

            continue;
        }

        if ( last_n[13] == n - 1 ) {
            factorials[13] = mulmod_preinv( factorials[13], n, 1000000271ULL, 1360291187149977089ULL );
        } else if ( n - last_n[13] <= 2000000 ) {
            for ( uint64_t j = last_n[13] + 1; j <= n; ++j ) {
                factorials[13] = mulmod_preinv( factorials[13], j, 1000000271ULL, 1360291187149977089ULL );
            }
        } else {
            factorials[13] = initialize_factorial( n, 1000000271ULL, 1360291187149977089ULL );
        }

        last_n[13] = n;

        if ( jacobi_unsigned( factorials[13] + 1, 1000000271ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 13 >= best_i, 0 ) != 0 ) {
                best_i = 13;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 13\n", n );
            }

            continue;
        }

        if ( last_n[14] == n - 1 ) {
            factorials[14] = mulmod_preinv( factorials[14], n, 1000000289ULL, 1360290830623445430ULL );
        } else if ( n - last_n[14] <= 2000000 ) {
            for ( uint64_t j = last_n[14] + 1; j <= n; ++j ) {
                factorials[14] = mulmod_preinv( factorials[14], j, 1000000289ULL, 1360290830623445430ULL );
            }
        } else {
            factorials[14] = initialize_factorial( n, 1000000289ULL, 1360290830623445430ULL );
        }

        last_n[14] = n;

        if ( jacobi_unsigned( factorials[14] + 1, 1000000289ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 14 >= best_i, 0 ) != 0 ) {
                best_i = 14;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 14\n", n );
            }

            continue;
        }

        if ( last_n[15] == n - 1 ) {
            factorials[15] = mulmod_preinv( factorials[15], n, 1000000297ULL, 1360290672167213256ULL );
        } else if ( n - last_n[15] <= 2000000 ) {
            for ( uint64_t j = last_n[15] + 1; j <= n; ++j ) {
                factorials[15] = mulmod_preinv( factorials[15], j, 1000000297ULL, 1360290672167213256ULL );
            }
        } else {
            factorials[15] = initialize_factorial( n, 1000000297ULL, 1360290672167213256ULL );
        }

        last_n[15] = n;

        if ( jacobi_unsigned( factorials[15] + 1, 1000000297ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 15 >= best_i, 0 ) != 0 ) {
                best_i = 15;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 15\n", n );
            }

            continue;
        }

        if ( last_n[16] == n - 1 ) {
            factorials[16] = mulmod_preinv( factorials[16], n, 1000000321ULL, 1360290196798531949ULL );
        } else if ( n - last_n[16] <= 2000000 ) {
            for ( uint64_t j = last_n[16] + 1; j <= n; ++j ) {
                factorials[16] = mulmod_preinv( factorials[16], j, 1000000321ULL, 1360290196798531949ULL );
            }
        } else {
            factorials[16] = initialize_factorial( n, 1000000321ULL, 1360290196798531949ULL );
        }

        last_n[16] = n;

        if ( jacobi_unsigned( factorials[16] + 1, 1000000321ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 16 >= best_i, 0 ) != 0 ) {
                best_i = 16;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 16\n", n );
            }

            continue;
        }

        if ( last_n[17] == n - 1 ) {
            factorials[17] = mulmod_preinv( factorials[17], n, 1000000349ULL, 1360289642201765929ULL );
        } else if ( n - last_n[17] <= 2000000 ) {
            for ( uint64_t j = last_n[17] + 1; j <= n; ++j ) {
                factorials[17] = mulmod_preinv( factorials[17], j, 1000000349ULL, 1360289642201765929ULL );
            }
        } else {
            factorials[17] = initialize_factorial( n, 1000000349ULL, 1360289642201765929ULL );
        }

        last_n[17] = n;

        if ( jacobi_unsigned( factorials[17] + 1, 1000000349ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 17 >= best_i, 0 ) != 0 ) {
                best_i = 17;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 17\n", n );
            }

            continue;
        }

        if ( last_n[18] == n - 1 ) {
            factorials[18] = mulmod_preinv( factorials[18], n, 1000000363ULL, 1360289364903394565ULL );
        } else if ( n - last_n[18] <= 2000000 ) {
            for ( uint64_t j = last_n[18] + 1; j <= n; ++j ) {
                factorials[18] = mulmod_preinv( factorials[18], j, 1000000363ULL, 1360289364903394565ULL );
            }
        } else {
            factorials[18] = initialize_factorial( n, 1000000363ULL, 1360289364903394565ULL );
        }

        last_n[18] = n;

        if ( jacobi_unsigned( factorials[18] + 1, 1000000363ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 18 >= best_i, 0 ) != 0 ) {
                best_i = 18;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 18\n", n );
            }

            continue;
        }

        if ( last_n[19] == n - 1 ) {
            factorials[19] = mulmod_preinv( factorials[19], n, 1000000403ULL, 1360288572622376310ULL );
        } else if ( n - last_n[19] <= 2000000 ) {
            for ( uint64_t j = last_n[19] + 1; j <= n; ++j ) {
                factorials[19] = mulmod_preinv( factorials[19], j, 1000000403ULL, 1360288572622376310ULL );
            }
        } else {
            factorials[19] = initialize_factorial( n, 1000000403ULL, 1360288572622376310ULL );
        }

        last_n[19] = n;

        if ( jacobi_unsigned( factorials[19] + 1, 1000000403ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 19 >= best_i, 0 ) != 0 ) {
                best_i = 19;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 19\n", n );
            }

            continue;
        }

        if ( last_n[20] == n - 1 ) {
            factorials[20] = mulmod_preinv( factorials[20], n, 1000000409ULL, 1360288453780229039ULL );
        } else if ( n - last_n[20] <= 2000000 ) {
            for ( uint64_t j = last_n[20] + 1; j <= n; ++j ) {
                factorials[20] = mulmod_preinv( factorials[20], j, 1000000409ULL, 1360288453780229039ULL );
            }
        } else {
            factorials[20] = initialize_factorial( n, 1000000409ULL, 1360288453780229039ULL );
        }

        last_n[20] = n;

        if ( jacobi_unsigned( factorials[20] + 1, 1000000409ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 20 >= best_i, 0 ) != 0 ) {
                best_i = 20;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 20\n", n );
            }

            continue;
        }

        if ( last_n[21] == n - 1 ) {
            factorials[21] = mulmod_preinv( factorials[21], n, 1000000411ULL, 1360288414166180265ULL );
        } else if ( n - last_n[21] <= 2000000 ) {
            for ( uint64_t j = last_n[21] + 1; j <= n; ++j ) {
                factorials[21] = mulmod_preinv( factorials[21], j, 1000000411ULL, 1360288414166180265ULL );
            }
        } else {
            factorials[21] = initialize_factorial( n, 1000000411ULL, 1360288414166180265ULL );
        }

        last_n[21] = n;

        if ( jacobi_unsigned( factorials[21] + 1, 1000000411ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 21 >= best_i, 0 ) != 0 ) {
                best_i = 21;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 21\n", n );
            }

            continue;
        }

        if ( last_n[22] == n - 1 ) {
            factorials[22] = mulmod_preinv( factorials[22], n, 1000000427ULL, 1360288097253795781ULL );
        } else if ( n - last_n[22] <= 2000000 ) {
            for ( uint64_t j = last_n[22] + 1; j <= n; ++j ) {
                factorials[22] = mulmod_preinv( factorials[22], j, 1000000427ULL, 1360288097253795781ULL );
            }
        } else {
            factorials[22] = initialize_factorial( n, 1000000427ULL, 1360288097253795781ULL );
        }

        last_n[22] = n;

        if ( jacobi_unsigned( factorials[22] + 1, 1000000427ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 22 >= best_i, 0 ) != 0 ) {
                best_i = 22;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 22\n", n );
            }

            continue;
        }

        if ( last_n[23] == n - 1 ) {
            factorials[23] = mulmod_preinv( factorials[23], n, 1000000433ULL, 1360287978411654213ULL );
        } else if ( n - last_n[23] <= 2000000 ) {
            for ( uint64_t j = last_n[23] + 1; j <= n; ++j ) {
                factorials[23] = mulmod_preinv( factorials[23], j, 1000000433ULL, 1360287978411654213ULL );
            }
        } else {
            factorials[23] = initialize_factorial( n, 1000000433ULL, 1360287978411654213ULL );
        }

        last_n[23] = n;

        if ( jacobi_unsigned( factorials[23] + 1, 1000000433ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 23 >= best_i, 0 ) != 0 ) {
                best_i = 23;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 23\n", n );
            }

            continue;
        }

        if ( last_n[24] == n - 1 ) {
            factorials[24] = mulmod_preinv( factorials[24], n, 1000000439ULL, 1360287859569514072ULL );
        } else if ( n - last_n[24] <= 2000000 ) {
            for ( uint64_t j = last_n[24] + 1; j <= n; ++j ) {
                factorials[24] = mulmod_preinv( factorials[24], j, 1000000439ULL, 1360287859569514072ULL );
            }
        } else {
            factorials[24] = initialize_factorial( n, 1000000439ULL, 1360287859569514072ULL );
        }

        last_n[24] = n;

        if ( jacobi_unsigned( factorials[24] + 1, 1000000439ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 24 >= best_i, 0 ) != 0 ) {
                best_i = 24;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 24\n", n );
            }

            continue;
        }

        if ( last_n[25] == n - 1 ) {
            factorials[25] = mulmod_preinv( factorials[25], n, 1000000447ULL, 1360287701113329436ULL );
        } else if ( n - last_n[25] <= 2000000 ) {
            for ( uint64_t j = last_n[25] + 1; j <= n; ++j ) {
                factorials[25] = mulmod_preinv( factorials[25], j, 1000000447ULL, 1360287701113329436ULL );
            }
        } else {
            factorials[25] = initialize_factorial( n, 1000000447ULL, 1360287701113329436ULL );
        }

        last_n[25] = n;

        if ( jacobi_unsigned( factorials[25] + 1, 1000000447ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 25 >= best_i, 0 ) != 0 ) {
                best_i = 25;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 25\n", n );
            }

            continue;
        }

        if ( last_n[26] == n - 1 ) {
            factorials[26] = mulmod_preinv( factorials[26], n, 1000000453ULL, 1360287582271192623ULL );
        } else if ( n - last_n[26] <= 2000000 ) {
            for ( uint64_t j = last_n[26] + 1; j <= n; ++j ) {
                factorials[26] = mulmod_preinv( factorials[26], j, 1000000453ULL, 1360287582271192623ULL );
            }
        } else {
            factorials[26] = initialize_factorial( n, 1000000453ULL, 1360287582271192623ULL );
        }

        last_n[26] = n;

        if ( jacobi_unsigned( factorials[26] + 1, 1000000453ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 26 >= best_i, 0 ) != 0 ) {
                best_i = 26;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 26\n", n );
            }

            continue;
        }

        if ( last_n[27] == n - 1 ) {
            factorials[27] = mulmod_preinv( factorials[27], n, 1000000459ULL, 1360287463429057235ULL );
        } else if ( n - last_n[27] <= 2000000 ) {
            for ( uint64_t j = last_n[27] + 1; j <= n; ++j ) {
                factorials[27] = mulmod_preinv( factorials[27], j, 1000000459ULL, 1360287463429057235ULL );
            }
        } else {
            factorials[27] = initialize_factorial( n, 1000000459ULL, 1360287463429057235ULL );
        }

        last_n[27] = n;

        if ( jacobi_unsigned( factorials[27] + 1, 1000000459ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 27 >= best_i, 0 ) != 0 ) {
                best_i = 27;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 27\n", n );
            }

            continue;
        }

        if ( last_n[28] == n - 1 ) {
            factorials[28] = mulmod_preinv( factorials[28], n, 1000000483ULL, 1360286988060529947ULL );
        } else if ( n - last_n[28] <= 2000000 ) {
            for ( uint64_t j = last_n[28] + 1; j <= n; ++j ) {
                factorials[28] = mulmod_preinv( factorials[28], j, 1000000483ULL, 1360286988060529947ULL );
            }
        } else {
            factorials[28] = initialize_factorial( n, 1000000483ULL, 1360286988060529947ULL );
        }

        last_n[28] = n;

        if ( jacobi_unsigned( factorials[28] + 1, 1000000483ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 28 >= best_i, 0 ) != 0 ) {
                best_i = 28;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 28\n", n );
            }

            continue;
        }

        if ( last_n[29] == n - 1 ) {
            factorials[29] = mulmod_preinv( factorials[29], n, 1000000513ULL, 1360286393849902924ULL );
        } else if ( n - last_n[29] <= 2000000 ) {
            for ( uint64_t j = last_n[29] + 1; j <= n; ++j ) {
                factorials[29] = mulmod_preinv( factorials[29], j, 1000000513ULL, 1360286393849902924ULL );
            }
        } else {
            factorials[29] = initialize_factorial( n, 1000000513ULL, 1360286393849902924ULL );
        }

        last_n[29] = n;

        if ( jacobi_unsigned( factorials[29] + 1, 1000000513ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 29 >= best_i, 0 ) != 0 ) {
                best_i = 29;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 29\n", n );
            }

            continue;
        }

        if ( last_n[30] == n - 1 ) {
            factorials[30] = mulmod_preinv( factorials[30], n, 1000000531ULL, 1360286037323543823ULL );
        } else if ( n - last_n[30] <= 2000000 ) {
            for ( uint64_t j = last_n[30] + 1; j <= n; ++j ) {
                factorials[30] = mulmod_preinv( factorials[30], j, 1000000531ULL, 1360286037323543823ULL );
            }
        } else {
            factorials[30] = initialize_factorial( n, 1000000531ULL, 1360286037323543823ULL );
        }

        last_n[30] = n;

        if ( jacobi_unsigned( factorials[30] + 1, 1000000531ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 30 >= best_i, 0 ) != 0 ) {
                best_i = 30;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 30\n", n );
            }

            continue;
        }

        if ( last_n[31] == n - 1 ) {
            factorials[31] = mulmod_preinv( factorials[31], n, 1000000579ULL, 1360285086586648970ULL );
        } else if ( n - last_n[31] <= 2000000 ) {
            for ( uint64_t j = last_n[31] + 1; j <= n; ++j ) {
                factorials[31] = mulmod_preinv( factorials[31], j, 1000000579ULL, 1360285086586648970ULL );
            }
        } else {
            factorials[31] = initialize_factorial( n, 1000000579ULL, 1360285086586648970ULL );
        }

        last_n[31] = n;

        if ( jacobi_unsigned( factorials[31] + 1, 1000000579ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 31 >= best_i, 0 ) != 0 ) {
                best_i = 31;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 31\n", n );
            }

            continue;
        }

        if ( last_n[32] == n - 1 ) {
            factorials[32] = mulmod_preinv( factorials[32], n, 1000000607ULL, 1360284531990169122ULL );
        } else if ( n - last_n[32] <= 2000000 ) {
            for ( uint64_t j = last_n[32] + 1; j <= n; ++j ) {
                factorials[32] = mulmod_preinv( factorials[32], j, 1000000607ULL, 1360284531990169122ULL );
            }
        } else {
            factorials[32] = initialize_factorial( n, 1000000607ULL, 1360284531990169122ULL );
        }

        last_n[32] = n;

        if ( jacobi_unsigned( factorials[32] + 1, 1000000607ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 32 >= best_i, 0 ) != 0 ) {
                best_i = 32;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 32\n", n );
            }

            continue;
        }

        if ( last_n[33] == n - 1 ) {
            factorials[33] = mulmod_preinv( factorials[33], n, 1000000613ULL, 1360284413148070338ULL );
        } else if ( n - last_n[33] <= 2000000 ) {
            for ( uint64_t j = last_n[33] + 1; j <= n; ++j ) {
                factorials[33] = mulmod_preinv( factorials[33], j, 1000000613ULL, 1360284413148070338ULL );
            }
        } else {
            factorials[33] = initialize_factorial( n, 1000000613ULL, 1360284413148070338ULL );
        }

        last_n[33] = n;

        if ( jacobi_unsigned( factorials[33] + 1, 1000000613ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 33 >= best_i, 0 ) != 0 ) {
                best_i = 33;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 33\n", n );
            }

            continue;
        }

        if ( last_n[34] == n - 1 ) {
            factorials[34] = mulmod_preinv( factorials[34], n, 1000000637ULL, 1360283937779689463ULL );
        } else if ( n - last_n[34] <= 2000000 ) {
            for ( uint64_t j = last_n[34] + 1; j <= n; ++j ) {
                factorials[34] = mulmod_preinv( factorials[34], j, 1000000637ULL, 1360283937779689463ULL );
            }
        } else {
            factorials[34] = initialize_factorial( n, 1000000637ULL, 1360283937779689463ULL );
        }

        last_n[34] = n;

        if ( jacobi_unsigned( factorials[34] + 1, 1000000637ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 34 >= best_i, 0 ) != 0 ) {
                best_i = 34;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 34\n", n );
            }

            continue;
        }

        if ( last_n[35] == n - 1 ) {
            factorials[35] = mulmod_preinv( factorials[35], n, 1000000663ULL, 1360283422797302598ULL );
        } else if ( n - last_n[35] <= 2000000 ) {
            for ( uint64_t j = last_n[35] + 1; j <= n; ++j ) {
                factorials[35] = mulmod_preinv( factorials[35], j, 1000000663ULL, 1360283422797302598ULL );
            }
        } else {
            factorials[35] = initialize_factorial( n, 1000000663ULL, 1360283422797302598ULL );
        }

        last_n[35] = n;

        if ( jacobi_unsigned( factorials[35] + 1, 1000000663ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 35 >= best_i, 0 ) != 0 ) {
                best_i = 35;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 35\n", n );
            }

            continue;
        }

        if ( last_n[36] == n - 1 ) {
            factorials[36] = mulmod_preinv( factorials[36], n, 1000000711ULL, 1360282472060658739ULL );
        } else if ( n - last_n[36] <= 2000000 ) {
            for ( uint64_t j = last_n[36] + 1; j <= n; ++j ) {
                factorials[36] = mulmod_preinv( factorials[36], j, 1000000711ULL, 1360282472060658739ULL );
            }
        } else {
            factorials[36] = initialize_factorial( n, 1000000711ULL, 1360282472060658739ULL );
        }

        last_n[36] = n;

        if ( jacobi_unsigned( factorials[36] + 1, 1000000711ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 36 >= best_i, 0 ) != 0 ) {
                best_i = 36;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 36\n", n );
            }

            continue;
        }

        if ( last_n[37] == n - 1 ) {
            factorials[37] = mulmod_preinv( factorials[37], n, 1000000753ULL, 1360281640166170233ULL );
        } else if ( n - last_n[37] <= 2000000 ) {
            for ( uint64_t j = last_n[37] + 1; j <= n; ++j ) {
                factorials[37] = mulmod_preinv( factorials[37], j, 1000000753ULL, 1360281640166170233ULL );
            }
        } else {
            factorials[37] = initialize_factorial( n, 1000000753ULL, 1360281640166170233ULL );
        }

        last_n[37] = n;

        if ( jacobi_unsigned( factorials[37] + 1, 1000000753ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 37 >= best_i, 0 ) != 0 ) {
                best_i = 37;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 37\n", n );
            }

            continue;
        }

        if ( last_n[38] == n - 1 ) {
            factorials[38] = mulmod_preinv( factorials[38], n, 1000000787ULL, 1360280966727825958ULL );
        } else if ( n - last_n[38] <= 2000000 ) {
            for ( uint64_t j = last_n[38] + 1; j <= n; ++j ) {
                factorials[38] = mulmod_preinv( factorials[38], j, 1000000787ULL, 1360280966727825958ULL );
            }
        } else {
            factorials[38] = initialize_factorial( n, 1000000787ULL, 1360280966727825958ULL );
        }

        last_n[38] = n;

        if ( jacobi_unsigned( factorials[38] + 1, 1000000787ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 38 >= best_i, 0 ) != 0 ) {
                best_i = 38;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 38\n", n );
            }

            continue;
        }

        if ( last_n[39] == n - 1 ) {
            factorials[39] = mulmod_preinv( factorials[39], n, 1000000801ULL, 1360280689429697507ULL );
        } else if ( n - last_n[39] <= 2000000 ) {
            for ( uint64_t j = last_n[39] + 1; j <= n; ++j ) {
                factorials[39] = mulmod_preinv( factorials[39], j, 1000000801ULL, 1360280689429697507ULL );
            }
        } else {
            factorials[39] = initialize_factorial( n, 1000000801ULL, 1360280689429697507ULL );
        }

        last_n[39] = n;

        if ( jacobi_unsigned( factorials[39] + 1, 1000000801ULL ) == -1 ) {
            if ( __builtin_expect( n % 100000000ULL == 0, 0 ) != 0 ) {
                printf( "[Sub Range #32] Progress: %llu (96.88%%)\n", n );
            } else if ( __builtin_expect( 39 >= best_i, 0 ) != 0 ) {
                best_i = 39;
                printf( "[Sub Range #32] Progress: %llu (96.88%%), Tests Passed: 39\n", n );
            }

            continue;
        }

        printf( "[Sub Range #32] Potential Solution: %llu, primes[0] = 1000000007, factorials[0] = %llu\n", n, factorials[0] );
        FILE *fp = fopen( "brocard_solutions.txt", "ae" );
        fprintf( fp, "%llu\n", n );
        fclose( fp );
    }
 }

auto main() -> int {
    remove( "brocard_solutions.txt" );

    printf( "Partition Size: 31249999\n" );

    uint64_t factorials[32][40];

    uint64_t primes[32][40] = {
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        { 312500017ULL, 312500059ULL, 312500077ULL, 312500081ULL, 312500099ULL, 312500101ULL, 312500129ULL, 312500141ULL, 312500159ULL, 312500189ULL, 312500207ULL, 312500213ULL, 312500269ULL, 312500291ULL, 312500329ULL, 312500339ULL, 312500359ULL, 312500411ULL, 312500413ULL, 312500473ULL, 312500497ULL, 312500569ULL, 312500593ULL, 312500611ULL, 312500641ULL, 312500653ULL, 312500687ULL, 312500693ULL, 312500707ULL, 312500717ULL, 312500753ULL, 312500777ULL, 312500789ULL, 312500803ULL, 312500813ULL, 312500843ULL, 312500849ULL, 312500861ULL, 312500869ULL, 312500911ULL },
        { 343750007ULL, 343750009ULL, 343750063ULL, 343750073ULL, 343750097ULL, 343750117ULL, 343750163ULL, 343750193ULL, 343750219ULL, 343750241ULL, 343750247ULL, 343750271ULL, 343750283ULL, 343750291ULL, 343750327ULL, 343750333ULL, 343750361ULL, 343750367ULL, 343750397ULL, 343750417ULL, 343750423ULL, 343750441ULL, 343750487ULL, 343750499ULL, 343750513ULL, 343750529ULL, 343750541ULL, 343750577ULL, 343750639ULL, 343750651ULL, 343750657ULL, 343750699ULL, 343750733ULL, 343750747ULL, 343750751ULL, 343750769ULL, 343750783ULL, 343750789ULL, 343750807ULL, 343750811ULL },
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        { 906249989ULL, 906250013ULL, 906250027ULL, 906250067ULL, 906250109ULL, 906250129ULL, 906250153ULL, 906250157ULL, 906250211ULL, 906250223ULL, 906250237ULL, 906250253ULL, 906250291ULL, 906250337ULL, 906250363ULL, 906250409ULL, 906250417ULL, 906250441ULL, 906250451ULL, 906250463ULL, 906250469ULL, 906250487ULL, 906250507ULL, 906250519ULL, 906250567ULL, 906250601ULL, 906250673ULL, 906250691ULL, 906250703ULL, 906250721ULL, 906250801ULL, 906250817ULL, 906250861ULL, 906250901ULL, 906250903ULL, 906250927ULL, 906250951ULL, 906250973ULL, 906250987ULL, 906250997ULL },
        { 937499977ULL, 937499999ULL, 937500001ULL, 937500013ULL, 937500041ULL, 937500049ULL, 937500077ULL, 937500089ULL, 937500107ULL, 937500119ULL, 937500121ULL, 937500127ULL, 937500131ULL, 937500163ULL, 937500169ULL, 937500181ULL, 937500209ULL, 937500227ULL, 937500229ULL, 937500253ULL, 937500257ULL, 937500293ULL, 937500307ULL, 937500323ULL, 937500331ULL, 937500341ULL, 937500359ULL, 937500367ULL, 937500409ULL, 937500433ULL, 937500437ULL, 937500439ULL, 937500449ULL, 937500461ULL, 937500463ULL, 937500467ULL, 937500469ULL, 937500533ULL, 937500559ULL, 937500589ULL },
        {},
        {}
    };

    uint64_t pinvs[32][40] = {
        { 1360285779832292455ULL, 1360271835700677838ULL, 1360266765112231194ULL, 1360260426880323706ULL, 1360224932856605039ULL, 1360214791730336246ULL, 1360209721171096025ULL, 1360205918253369560ULL, 1360203382975696534ULL, 1360194509508952040ULL, 1360188171323287962ULL, 1360183100777677319ULL, 1360176762599314786ULL, 1360167889156422005ULL, 1360152677558531571ULL, 1360142536506251744ULL, 1360138733614324025ULL, 1360137465984005963ULL, 1360123522061216128ULL, 1360119719176589894ULL, 1360118451548705660ULL, 1360114648666026485ULL, 1360107042905049013ULL, 1360089296152150549ULL, 1360085493280666934ULL, 1360081690410643606ULL, 1360055070361368269ULL, 1360036056084265734ULL, 1360028450383646656ULL, 1360023379919812326ULL, 1360013238999931785ULL, 1360000562864683817ULL, 1359966337380559088ULL, 1359940985246354405ULL, 1359939717641347804ULL, 1359905492367500157ULL, 1359901689566596109ULL, 1359876337597886483ULL, 1359872534808177634ULL, 1359871267211932516ULL },
        { 1360296237943887795ULL, 1360295604118628246ULL, 1360290533518012185ULL, 1360282927621955866ULL, 1360273420260099825ULL, 1360258208500114424ULL, 1360256307031759116ULL, 1360249968806544784ULL, 1360242362941642104ULL, 1360239193832989979ULL, 1360238560011381247ULL, 1360236658546798439ULL, 1360232855618728062ULL, 1360221446843278846ULL, 1360191657324901223ULL, 1360187854414111239ULL, 1360185952959263863ULL, 1360179614779075945ULL, 1360176445690503140ULL, 1360173910420375049ULL, 1360172008968204904ULL, 1360160600262850635ULL, 1360157431180362435ULL, 1360154895915102026ULL, 1360141585783132911ULL, 1360128275669052461ULL, 1360122571339922667ULL, 1360114965572860641ULL, 1360113064132007818ULL, 1360103556933219799ULL, 1360092782118960018ULL, 1360090880682366376ULL, 1360088345434142743ULL, 1360081373504874244ULL, 1360076936825167973ULL, 1360073767769451826ULL, 1360056021076181704ULL, 1360050316788670108ULL, 1360047147741472271ULL, 1360045246313640328ULL },
        { 7962636951943749288ULL, 7962635261743886481ULL, 7962626247348272013ULL, 7962623430350904506ULL, 7962617796357972369ULL, 7962614415963366927ULL, 7962612725766388724ULL, 7962599204198351512ULL, 7962590753225359455ULL, 7962586246041975213ULL, 7962573851295601168ULL, 7962572161103815232ULL, 7962567090529755487ULL, 7962562583354448089ULL, 7962559202973977145ULL, 7962528779588680463ULL, 7962524835821644513ULL, 7962519765265757606ULL, 7962518638475824935ULL, 7962516384896248048ULL, 7962514694711817783ULL, 7962513004527603861ULL, 7962511877738248103ULL, 7962505117004132750ULL, 7962504553609779385ULL, 7962488215183988324ULL, 7962479200888757279ULL, 7962477510709086541ULL, 7962471313385478087ULL, 7962469059813977970ULL, 7962461172316756338ULL, 7962459482139393241ULL, 7962457791962246486ULL, 7962457228569912310ULL, 7962455538393054009ULL, 7962453848216412049ULL, 7962452721432104265ULL, 7962447087512007619ULL, 7962440890202677684ULL, 7962432439331006063ULL },
        {},
        { 13244515455746536731ULL, 13244510993618594307ULL, 13244502069366479062ULL, 13244500041128062920ULL, 13244497201594716473ULL, 13244496390299568092ULL, 13244495984652009479ULL, 13244485032171852278ULL, 13244483815230079895ULL, 13244483003935616895ULL, 13244478947463924970ULL, 13244470428876752099ULL, 13244469617582974480ULL, 13244465561114709456ULL, 13244458259474449316ULL, 13244455825595110289ULL, 13244454608655580967ULL, 13244451363483959694ULL, 13244449740898398286ULL, 13244444061850241807ULL, 13244440411034644583ULL, 13244440005388519036ULL, 13244429052947054618ULL, 13244425807780667140ULL, 13244422156969275641ULL, 13244417289222062089ULL, 13244416072285492353ULL, 13244413232767193090ULL, 13244407553732121086ULL, 13244407148086836683ULL, 13244404714215348343ULL, 13244402685989393632ULL, 13244399846473493186ULL, 13244388894059786507ULL, 13244387677125397510ULL, 13244385243256899897ULL, 13244384431967483769ULL, 13244381592454854429ULL, 13244380375521026193ULL, 13244379564231859292ULL },
        {},
        {},
        {},
        { 16765773475697257433ULL, 16765772474096761811ULL, 16765771722896427487ULL, 16765770470895941507ULL, 16765768968495475851ULL, 16765768718095410706ULL, 16765767466095138400ULL, 16765765212494872608ULL, 16765761456495070645ULL, 16765760454895258782ULL, 16765756698896471773ULL, 16765756198096694046ULL, 16765752942898486043ULL, 16765752442098815153ULL, 16765740422910987291ULL, 16765736666916473768ULL, 16765730406927398515ULL, 16765728403731364517ULL, 16765726650935021733ULL, 16765725899736642530ULL, 16765725398937740868ULL, 16765719890150762744ULL, 16765716384559946823ULL, 16765710875775789194ULL, 16765706618989211573ULL, 16765705116594194607ULL, 16765699607813562592ULL, 16765698856616337227ULL, 16765691344645846380ULL, 16765686336667299760ULL, 16765686086268409821ULL, 16765682330285488095ULL, 16765679575898521416ULL, 16765678574303367642ULL, 16765672564733641568ULL, 16765672063936256987ULL, 16765671062341530559ULL, 16765668808753604427ULL, 16765668307956326682ULL, 16765662298390104844ULL },
        { 13244519207991460896ULL, 13244514948686479993ULL, 13244513123270410085ULL, 13244512717622423108ULL, 13244510892206610219ULL, 13244510689382643990ULL, 13244507849847389377ULL, 13244506632903864597ULL, 13244504807488752667ULL, 13244501765130700090ULL, 13244499939716148928ULL, 13244499331244678604ULL, 13244493652178748976ULL, 13244491421117690638ULL, 13244487567467511590ULL, 13244486553349199188ULL, 13244484525112769094ULL, 13244479251699265843ULL, 13244479048875704612ULL, 13244472964170074886ULL, 13244470530288477222ULL, 13244463228645927292ULL, 13244460794765825002ULL, 13244458969355993619ULL, 13244455927006741952ULL, 13244454710067204841ULL, 13244451262072357238ULL, 13244450653602756133ULL, 13244449233840444420ULL, 13244448219724585366ULL, 13244444568908030170ULL, 13244442135030794009ULL, 13244440918092316120ULL, 13244439498330876706ULL, 13244438484215640723ULL, 13244435441870322193ULL, 13244434833401328582ULL, 13244433616463411456ULL, 13244432805171518628ULL, 13244428545889762765ULL },
        { 10363496253887131746ULL, 10363496086263919684ULL, 10363491560437931286ULL, 10363490722322163551ULL, 10363488710844519940ULL, 10363487034613364821ULL, 10363483179282448271ULL, 10363480664936754247ULL, 10363478485837507753ULL, 10363476641984556651ULL, 10363476139115610948ULL, 10363474127640003681ULL, 10363473121902305376ULL, 10363472451410545516ULL, 10363469434198012350ULL, 10363468931329318263ULL, 10363466584608977972ULL, 10363466081740383363ULL, 10363463567397673633ULL, 10363461891169444295ULL, 10363461388301013529ULL, 10363459879695826558ULL, 10363456024372177644ULL, 10363455018635743275ULL, 10363453845276658592ULL, 10363452504294964557ULL, 10363451498558775953ULL, 10363448481350631451ULL, 10363443285049197336ULL, 10363442279313652401ULL, 10363441776445906266ULL, 10363438256372174848ULL, 10363435406789308001ULL, 10363434233431820790ULL, 10363433898186841998ULL, 10363432389584533987ULL, 10363431216227292540ULL, 10363430713359932606ULL, 10363429204757958132ULL, 10363428869513096371ULL },
        {},
        {},
        {},
        {},
        {},
        {},
        { 16765773287897160163ULL, 16765771785496454123ULL, 16765771535096348914ULL, 16765771409896297645ULL, 16765771159496197778ULL, 16765770658696008728ULL, 16765768780695426658ULL, 16765768405095334283ULL, 16765767403495127122ULL, 16765765775894912013ULL, 16765761769495023537ULL, 16765758764695705469ULL, 16765758263895868982ULL, 16765757512696140961ULL, 16765757137096288969ULL, 16765754883497345288ULL, 16765754257497689903ULL, 16765753130698366299ULL, 16765750501500225005ULL, 16765748623501793035ULL, 16765745618704718549ULL, 16765745117905255991ULL, 16765742989507699044ULL, 16765740735910566253ULL, 16765740610710734001ULL, 16765739609112108030ULL, 16765737731114837915ULL, 16765736854716180414ULL, 16765736103517365850ULL, 16765735101918996289ULL, 16765732723123096945ULL, 16765732097124229484ULL, 16765731220725852431ULL, 16765730845126561334ULL, 16765730594727038388ULL, 16765729843528490916ULL, 16765728341131492127ULL, 16765727464733302039ULL, 16765724209540406510ULL, 16765723333142422083ULL },
        { 14912482416637840164ULL, 14912482304269919165ULL, 14912481630062409069ULL, 14912480618751195023ULL, 14912477921921590674ULL, 14912477697185809993ULL, 14912477022978486121ULL, 14912476011667551409ULL, 14912475562196044553ULL, 14912475337460295667ULL, 14912472865367257769ULL, 14912472528263690080ULL, 14912471179849487453ULL, 14912470618010268531ULL, 14912469943803230806ULL, 14912469269596220333ULL, 14912468932492725316ULL, 14912465898561576750ULL, 14912465449090342415ULL, 14912463875941117626ULL, 14912461516217558641ULL, 14912458707023280840ULL, 14912458145184482056ULL, 14912456347300453121ULL, 14912455673093992232ULL, 14912454774152086773ULL, 14912454099945689473ULL, 14912453987577959240ULL, 14912448369192412726ULL, 14912448032089340117ULL, 14912447357883215338ULL, 14912447245515530524ULL, 14912446346574079267ULL, 14912443312647038957ULL, 14912442975544068544ULL, 14912441627132255019ULL, 14912440503455827018ULL, 14912440278720550502ULL, 14912439941617641406ULL, 14912439492147106542ULL },
        { 13244521489762457338ULL, 13244519562933594318ULL, 13244519055873406150ULL, 13244518447401201766ULL, 13244517534692939000ULL, 13244517433280913049ULL, 13244515405040530327ULL, 13244514492332442801ULL, 13244513883860413657ULL, 13244513173976409187ULL, 13244512362680443021ULL, 13244512261268450171ULL, 13244508914673050226ULL, 13244508711849109309ULL, 13244508103377302136ULL, 13244507697729443668ULL, 13244506785021800083ULL, 13244505872314209070ULL, 13244505263842510935ULL, 13244504756782780338ULL, 13244502627132089015ULL, 13244501613012812795ULL, 13244500497481683917ULL, 13244499179126814674ULL, 13244498266419661761ULL, 13244498063595857141ULL, 13244497150888768482ULL, 13244496745241190398ULL, 13244496238181732395ULL, 13244495224062865068ULL, 13244494007120309948ULL, 13244493094413454942ULL, 13244492485942247477ULL, 13244492181706652507ULL, 13244491370411761145ULL, 13244490356293205354ULL, 13244487111114262977ULL, 13244486401231457925ULL, 13244484981465943230ULL, 13244484880054125619ULL },
        { 11735413856443239562ULL, 11735411740817786710ULL, 11735409717176326728ULL, 11735409441225239574ULL, 11735409257257850941ULL, 11735408337420941415ULL, 11735408153453566238ULL, 11735407509567770779ULL, 11735406221796262278ULL, 11735405577910549236ULL, 11735405117992199597ULL, 11735404014188217652ULL, 11735403462286256955ULL, 11735402358482396113ULL, 11735401714596847906ULL, 11735400150874916635ULL, 11735398955087666757ULL, 11735397391366021424ULL, 11735397115415159655ULL, 11735394631857630808ULL, 11735394539874026478ULL, 11735394355906819499ULL, 11735394263923216851ULL, 11735392976152838644ULL, 11735392056316921490ULL, 11735390124661677962ULL, 11735389112842363362ULL, 11735388836891652973ULL, 11735388560940947629ULL, 11735386813253264296ULL, 11735386261351932662ULL, 11735386077384826602ULL, 11735385433499973055ULL, 11735385157549329944ULL, 11735383041927900402ULL, 11735381294240856223ULL, 11735380834323246658ULL, 11735380006471584762ULL, 11735378258784892117ULL, 11735377706883873331ULL },
        { 10363497133909027077ULL, 10363496714850974977ULL, 10363494619560897336ULL, 10363494368126108500ULL, 10363493949068136859ULL, 10363493446198586981ULL, 10363491853778461514ULL, 10363491099474252998ULL, 10363489842300659910ULL, 10363489590865954459ULL, 10363488920373428044ULL, 10363488585127176540ULL, 10363488417504053714ULL, 10363487579388468840ULL, 10363487327953802886ULL, 10363486322215182960ULL, 10363486070780538950ULL, 10363485819345899329ULL, 10363485651722808686ULL, 10363483891680474700ULL, 10363483807868940351ULL, 10363483304999744493ULL, 10363482634507510657ULL, 10363482047826831650ULL, 10363480371596451864ULL, 10363478108685748555ULL, 10363477522005253873ULL, 10363476767701795820ULL, 10363474085734264850ULL, 10363473834299834422ULL, 10363473750488358588ULL, 10363473247619513824ULL, 10363472074258944309ULL, 10363471571390158061ULL, 10363470481841181412ULL, 10363468470366364106ULL, 10363467045571871786ULL, 10363466794137564241ULL, 10363466710326129368ULL, 10363465788400377947ULL },
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        { 1999233623698236218ULL, 1999233412642981914ULL, 1999233117165633208ULL, 1999232652844102497ULL, 1999232526210961417ULL, 1999232272944683964ULL, 1999232019678412786ULL, 1999231850834235486ULL, 1999230964402350414ULL, 1999230331236765278ULL, 1999230204603652956ULL, 1999229107116745212ULL, 1999228853850552464ULL, 1999228558373335522ULL, 1999227925207899405ULL, 1999227840785844218ULL, 1999227714152762746ULL, 1999227207620452545ULL, 1999227080987378916ULL, 1999226954354306856ULL, 1999226194555907435ULL, 1999225814656728901ULL, 1999224759381307047ULL, 1999224632748263745ULL, 1999224126216106222ULL, 1999223999583070763ULL, 1999223661894983873ULL, 1999223281995899456ULL, 1999223239784890948ULL, 1999222015665720026ULL, 1999221720188700730ULL, 1999220707124699407ULL, 1999220200592736392ULL, 1999219820693780601ULL, 1999218934262938658ULL, 1999218427731063485ULL, 1999218343309086730ULL, 1999218174465135311ULL, 1999218090043160647ULL, 1999217541300342325ULL },
        {}
    };

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[0][index] = initialize_factorial( 0ULL, primes[0][index], pinvs[0][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[1][index] = initialize_factorial( 31249999ULL, primes[1][index], pinvs[1][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[2][index] = initialize_factorial( 62499998ULL, primes[2][index], pinvs[2][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[3][index] = initialize_factorial( 93749997ULL, primes[3][index], pinvs[3][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[4][index] = initialize_factorial( 124999996ULL, primes[4][index], pinvs[4][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[5][index] = initialize_factorial( 156249995ULL, primes[5][index], pinvs[5][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[6][index] = initialize_factorial( 187499994ULL, primes[6][index], pinvs[6][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[7][index] = initialize_factorial( 218749993ULL, primes[7][index], pinvs[7][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[8][index] = initialize_factorial( 249999992ULL, primes[8][index], pinvs[8][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[9][index] = initialize_factorial( 281249991ULL, primes[9][index], pinvs[9][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[10][index] = initialize_factorial( 312499990ULL, primes[10][index], pinvs[10][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[11][index] = initialize_factorial( 343749989ULL, primes[11][index], pinvs[11][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[12][index] = initialize_factorial( 374999988ULL, primes[12][index], pinvs[12][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[13][index] = initialize_factorial( 406249987ULL, primes[13][index], pinvs[13][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[14][index] = initialize_factorial( 437499986ULL, primes[14][index], pinvs[14][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[15][index] = initialize_factorial( 468749985ULL, primes[15][index], pinvs[15][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[16][index] = initialize_factorial( 499999984ULL, primes[16][index], pinvs[16][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[17][index] = initialize_factorial( 531249983ULL, primes[17][index], pinvs[17][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[18][index] = initialize_factorial( 562499982ULL, primes[18][index], pinvs[18][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[19][index] = initialize_factorial( 593749981ULL, primes[19][index], pinvs[19][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[20][index] = initialize_factorial( 624999980ULL, primes[20][index], pinvs[20][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[21][index] = initialize_factorial( 656249979ULL, primes[21][index], pinvs[21][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[22][index] = initialize_factorial( 687499978ULL, primes[22][index], pinvs[22][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[23][index] = initialize_factorial( 718749977ULL, primes[23][index], pinvs[23][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[24][index] = initialize_factorial( 749999976ULL, primes[24][index], pinvs[24][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[25][index] = initialize_factorial( 781249975ULL, primes[25][index], pinvs[25][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[26][index] = initialize_factorial( 812499974ULL, primes[26][index], pinvs[26][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[27][index] = initialize_factorial( 843749973ULL, primes[27][index], pinvs[27][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[28][index] = initialize_factorial( 874999972ULL, primes[28][index], pinvs[28][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[29][index] = initialize_factorial( 906249971ULL, primes[29][index], pinvs[29][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[30][index] = initialize_factorial( 937499970ULL, primes[30][index], pinvs[30][index] );
    }

#pragma omp parallel for num_threads( 8 ) schedule( dynamic )
    for ( int index = 0; index < 40; ++index ) {
        factorials[31][index] = initialize_factorial( 968749969ULL, primes[31][index], pinvs[31][index] );
    }

#pragma omp parallel for schedule( dynamic )
    for ( int sub_range = 0; sub_range < 32; ++sub_range ) {
        switch ( sub_range ) {
            case 0:
                brocard_0( factorials[0] );
                break;
            case 1:
                brocard_1( factorials[1] );
                break;
            case 2:
                brocard_2( factorials[2] );
                break;
            case 3:
                brocard_3( factorials[3] );
                break;
            case 4:
                brocard_4( factorials[4] );
                break;
            case 5:
                brocard_5( factorials[5] );
                break;
            case 6:
                brocard_6( factorials[6] );
                break;
            case 7:
                brocard_7( factorials[7] );
                break;
            case 8:
                brocard_8( factorials[8] );
                break;
            case 9:
                brocard_9( factorials[9] );
                break;
            case 10:
                brocard_10( factorials[10] );
                break;
            case 11:
                brocard_11( factorials[11] );
                break;
            case 12:
                brocard_12( factorials[12] );
                break;
            case 13:
                brocard_13( factorials[13] );
                break;
            case 14:
                brocard_14( factorials[14] );
                break;
            case 15:
                brocard_15( factorials[15] );
                break;
            case 16:
                brocard_16( factorials[16] );
                break;
            case 17:
                brocard_17( factorials[17] );
                break;
            case 18:
                brocard_18( factorials[18] );
                break;
            case 19:
                brocard_19( factorials[19] );
                break;
            case 20:
                brocard_20( factorials[20] );
                break;
            case 21:
                brocard_21( factorials[21] );
                break;
            case 22:
                brocard_22( factorials[22] );
                break;
            case 23:
                brocard_23( factorials[23] );
                break;
            case 24:
                brocard_24( factorials[24] );
                break;
            case 25:
                brocard_25( factorials[25] );
                break;
            case 26:
                brocard_26( factorials[26] );
                break;
            case 27:
                brocard_27( factorials[27] );
                break;
            case 28:
                brocard_28( factorials[28] );
                break;
            case 29:
                brocard_29( factorials[29] );
                break;
            case 30:
                brocard_30( factorials[30] );
                break;
            case 31:
                brocard_31( factorials[31] );
                break;
        }
    }
}
